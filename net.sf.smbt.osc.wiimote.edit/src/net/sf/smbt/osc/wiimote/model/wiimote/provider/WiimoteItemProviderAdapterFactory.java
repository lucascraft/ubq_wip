/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.osc.wiimote.model.wiimote.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.osc.wiimote.model.wiimote.util.WiimoteAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class WiimoteItemProviderAdapterFactory extends WiimoteAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public WiimoteItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiimoteCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiimoteCmdItemProvider wiimoteCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiimoteCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiimoteCmdAdapter() {
		if (wiimoteCmdItemProvider == null) {
			wiimoteCmdItemProvider = new WiimoteCmdItemProvider(this);
		}

		return wiimoteCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiAccelXYZCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiAccelXYZCmdItemProvider wiiAccelXYZCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiAccelXYZCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiAccelXYZCmdAdapter() {
		if (wiiAccelXYZCmdItemProvider == null) {
			wiiAccelXYZCmdItemProvider = new WiiAccelXYZCmdItemProvider(this);
		}

		return wiiAccelXYZCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiAccelPryCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiAccelPryCmdItemProvider wiiAccelPryCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiAccelPryCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiAccelPryCmdAdapter() {
		if (wiiAccelPryCmdItemProvider == null) {
			wiiAccelPryCmdItemProvider = new WiiAccelPryCmdItemProvider(this);
		}

		return wiiAccelPryCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiButtonCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiButtonCmdItemProvider wiiButtonCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiButtonCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiButtonCmdAdapter() {
		if (wiiButtonCmdItemProvider == null) {
			wiiButtonCmdItemProvider = new WiiButtonCmdItemProvider(this);
		}

		return wiiButtonCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiIrXYSpeedCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiIrXYSpeedCmdItemProvider wiiIrXYSpeedCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiIrXYSpeedCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiIrXYSpeedCmdAdapter() {
		if (wiiIrXYSpeedCmdItemProvider == null) {
			wiiIrXYSpeedCmdItemProvider = new WiiIrXYSpeedCmdItemProvider(this);
		}

		return wiiIrXYSpeedCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiMotionAnglesCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiMotionAnglesCmdItemProvider wiiMotionAnglesCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiMotionAnglesCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiMotionAnglesCmdAdapter() {
		if (wiiMotionAnglesCmdItemProvider == null) {
			wiiMotionAnglesCmdItemProvider = new WiiMotionAnglesCmdItemProvider(this);
		}

		return wiiMotionAnglesCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiMotionVeloCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiMotionVeloCmdItemProvider wiiMotionVeloCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiMotionVeloCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiMotionVeloCmdAdapter() {
		if (wiiMotionVeloCmdItemProvider == null) {
			wiiMotionVeloCmdItemProvider = new WiiMotionVeloCmdItemProvider(this);
		}

		return wiiMotionVeloCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiNunchukAccelPryCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiNunchukAccelPryCmdItemProvider wiiNunchukAccelPryCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiNunchukAccelPryCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiNunchukAccelPryCmdAdapter() {
		if (wiiNunchukAccelPryCmdItemProvider == null) {
			wiiNunchukAccelPryCmdItemProvider = new WiiNunchukAccelPryCmdItemProvider(this);
		}

		return wiiNunchukAccelPryCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiNunchukButtonCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiNunchukButtonCmdItemProvider wiiNunchukButtonCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiNunchukButtonCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiNunchukButtonCmdAdapter() {
		if (wiiNunchukButtonCmdItemProvider == null) {
			wiiNunchukButtonCmdItemProvider = new WiiNunchukButtonCmdItemProvider(this);
		}

		return wiiNunchukButtonCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiNunchukJoyCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiNunchukJoyCmdItemProvider wiiNunchukJoyCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiNunchukJoyCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiNunchukJoyCmdAdapter() {
		if (wiiNunchukJoyCmdItemProvider == null) {
			wiiNunchukJoyCmdItemProvider = new WiiNunchukJoyCmdItemProvider(this);
		}

		return wiiNunchukJoyCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiNunchukAccelXyzCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiNunchukAccelXyzCmdItemProvider wiiNunchukAccelXyzCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiNunchukAccelXyzCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiNunchukAccelXyzCmdAdapter() {
		if (wiiNunchukAccelXyzCmdItemProvider == null) {
			wiiNunchukAccelXyzCmdItemProvider = new WiiNunchukAccelXyzCmdItemProvider(this);
		}

		return wiiNunchukAccelXyzCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiIrCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiIrCmdItemProvider wiiIrCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiIrCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiIrCmdAdapter() {
		if (wiiIrCmdItemProvider == null) {
			wiiIrCmdItemProvider = new WiiIrCmdItemProvider(this);
		}

		return wiiIrCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiAnglesCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiiAnglesCmdItemProvider wiiAnglesCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiiAnglesCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiiAnglesCmdAdapter() {
		if (wiiAnglesCmdItemProvider == null) {
			wiiAnglesCmdItemProvider = new WiiAnglesCmdItemProvider(this);
		}

		return wiiAnglesCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiimoteMonitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiimoteMonitorItemProvider wiimoteMonitorItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiimoteMonitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiimoteMonitorAdapter() {
		if (wiimoteMonitorItemProvider == null) {
			wiimoteMonitorItemProvider = new WiimoteMonitorItemProvider(this);
		}

		return wiimoteMonitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.osc.wiimote.model.wiimote.WiimoteLiveSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WiimoteLiveSettingsItemProvider wiimoteLiveSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.osc.wiimote.model.wiimote.WiimoteLiveSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWiimoteLiveSettingsAdapter() {
		if (wiimoteLiveSettingsItemProvider == null) {
			wiimoteLiveSettingsItemProvider = new WiimoteLiveSettingsItemProvider(this);
		}

		return wiimoteLiveSettingsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (wiimoteCmdItemProvider != null) wiimoteCmdItemProvider.dispose();
		if (wiiAccelXYZCmdItemProvider != null) wiiAccelXYZCmdItemProvider.dispose();
		if (wiiAccelPryCmdItemProvider != null) wiiAccelPryCmdItemProvider.dispose();
		if (wiiButtonCmdItemProvider != null) wiiButtonCmdItemProvider.dispose();
		if (wiiIrXYSpeedCmdItemProvider != null) wiiIrXYSpeedCmdItemProvider.dispose();
		if (wiiMotionAnglesCmdItemProvider != null) wiiMotionAnglesCmdItemProvider.dispose();
		if (wiiMotionVeloCmdItemProvider != null) wiiMotionVeloCmdItemProvider.dispose();
		if (wiiNunchukAccelPryCmdItemProvider != null) wiiNunchukAccelPryCmdItemProvider.dispose();
		if (wiiNunchukButtonCmdItemProvider != null) wiiNunchukButtonCmdItemProvider.dispose();
		if (wiiNunchukJoyCmdItemProvider != null) wiiNunchukJoyCmdItemProvider.dispose();
		if (wiiNunchukAccelXyzCmdItemProvider != null) wiiNunchukAccelXyzCmdItemProvider.dispose();
		if (wiiIrCmdItemProvider != null) wiiIrCmdItemProvider.dispose();
		if (wiiAnglesCmdItemProvider != null) wiiAnglesCmdItemProvider.dispose();
		if (wiimoteMonitorItemProvider != null) wiimoteMonitorItemProvider.dispose();
		if (wiimoteLiveSettingsItemProvider != null) wiimoteLiveSettingsItemProvider.dispose();
	}

}
