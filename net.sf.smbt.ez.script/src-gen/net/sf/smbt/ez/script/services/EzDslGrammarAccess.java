/*
* generated by Xtext
*/

package net.sf.smbt.ez.script.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class EzDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsTestedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsTestedTestedKeyword_0_0 = (Keyword)cIsTestedAssignment_0.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUsingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUsingsUsingParserRuleCall_3_0 = (RuleCall)cUsingsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_4_0_0 = (RuleCall)cElementsAssignment_4_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cFunctionsFunctionDeclarationParserRuleCall_4_1_0 = (RuleCall)cFunctionsAssignment_4_1.eContents().get(0);
		
		////import "http://osccmd/1.0"
		//Model:
		//	isTested?="tested"? "model" name=ID usings+=Using* (elements+=Element | functions+=FunctionDeclaration)*;
		public ParserRule getRule() { return rule; }

		//isTested?="tested"? "model" name=ID usings+=Using* (elements+=Element | functions+=FunctionDeclaration)*
		public Group getGroup() { return cGroup; }

		//isTested?="tested"?
		public Assignment getIsTestedAssignment_0() { return cIsTestedAssignment_0; }

		//"tested"
		public Keyword getIsTestedTestedKeyword_0_0() { return cIsTestedTestedKeyword_0_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//usings+=Using*
		public Assignment getUsingsAssignment_3() { return cUsingsAssignment_3; }

		//Using
		public RuleCall getUsingsUsingParserRuleCall_3_0() { return cUsingsUsingParserRuleCall_3_0; }

		//(elements+=Element | functions+=FunctionDeclaration)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//elements+=Element
		public Assignment getElementsAssignment_4_0() { return cElementsAssignment_4_0; }

		//Element
		public RuleCall getElementsElementParserRuleCall_4_0_0() { return cElementsElementParserRuleCall_4_0_0; }

		//functions+=FunctionDeclaration
		public Assignment getFunctionsAssignment_4_1() { return cFunctionsAssignment_4_1; }

		//FunctionDeclaration
		public RuleCall getFunctionsFunctionDeclarationParserRuleCall_4_1_0() { return cFunctionsFunctionDeclarationParserRuleCall_4_1_0; }
	}

	public class JvmVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJvarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJavaTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cJavaTypesJvmTypeCrossReference_3_0 = (CrossReference)cJavaTypesAssignment_3.eContents().get(0);
		private final RuleCall cJavaTypesJvmTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cJavaTypesJvmTypeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cJavaTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cJavaTypesJvmTypeCrossReference_4_1_0 = (CrossReference)cJavaTypesAssignment_4_1.eContents().get(0);
		private final RuleCall cJavaTypesJvmTypeQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cJavaTypesJvmTypeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//JvmVar:
		//	"jvar" name=ID "as" javaTypes+=[jvmTypes::JvmType|QualifiedName] ("," javaTypes+=[jvmTypes::JvmType|QualifiedName])*
		//	"!";
		public ParserRule getRule() { return rule; }

		//"jvar" name=ID "as" javaTypes+=[jvmTypes::JvmType|QualifiedName] ("," javaTypes+=[jvmTypes::JvmType|QualifiedName])* "!"
		public Group getGroup() { return cGroup; }

		//"jvar"
		public Keyword getJvarKeyword_0() { return cJvarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//javaTypes+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getJavaTypesAssignment_3() { return cJavaTypesAssignment_3; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getJavaTypesJvmTypeCrossReference_3_0() { return cJavaTypesJvmTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getJavaTypesJvmTypeQualifiedNameParserRuleCall_3_0_1() { return cJavaTypesJvmTypeQualifiedNameParserRuleCall_3_0_1; }

		//("," javaTypes+=[jvmTypes::JvmType|QualifiedName])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//javaTypes+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getJavaTypesAssignment_4_1() { return cJavaTypesAssignment_4_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getJavaTypesJvmTypeCrossReference_4_1_0() { return cJavaTypesJvmTypeCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getJavaTypesJvmTypeQualifiedNameParserRuleCall_4_1_0_1() { return cJavaTypesJvmTypeQualifiedNameParserRuleCall_4_1_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_5() { return cExclamationMarkKeyword_5; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class MessageOutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageOut");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMsgKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOscAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOscOSCExprCrossReference_1_0 = (CrossReference)cOscAssignment_1.eContents().get(0);
		private final RuleCall cOscOSCExprIDTerminalRuleCall_1_0_1 = (RuleCall)cOscOSCExprCrossReference_1_0.eContents().get(1);
		
		//MessageOut:
		//	"msg" osc=[oscDsl::OSCExpr];
		public ParserRule getRule() { return rule; }

		//"msg" osc=[oscDsl::OSCExpr]
		public Group getGroup() { return cGroup; }

		//"msg"
		public Keyword getMsgKeyword_0() { return cMsgKeyword_0; }

		//osc=[oscDsl::OSCExpr]
		public Assignment getOscAssignment_1() { return cOscAssignment_1; }

		//[oscDsl::OSCExpr]
		public CrossReference getOscOSCExprCrossReference_1_0() { return cOscOSCExprCrossReference_1_0; }

		//ID
		public RuleCall getOscOSCExprIDTerminalRuleCall_1_0_1() { return cOscOSCExprIDTerminalRuleCall_1_0_1; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Assignment cTriggerAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTriggerMessageOutParserRuleCall_0 = (RuleCall)cTriggerAssignment.eContents().get(0);
		
		//Trigger:
		//	trigger=MessageOut;
		public ParserRule getRule() { return rule; }

		//trigger=MessageOut
		public Assignment getTriggerAssignment() { return cTriggerAssignment; }

		//MessageOut
		public RuleCall getTriggerMessageOutParserRuleCall_0() { return cTriggerMessageOutParserRuleCall_0; }
	}

	public class MessageInElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MessageIn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOscAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOscOSCExprCrossReference_1_0 = (CrossReference)cOscAssignment_1.eContents().get(0);
		private final RuleCall cOscOSCExprIDTerminalRuleCall_1_0_1 = (RuleCall)cOscOSCExprCrossReference_1_0.eContents().get(1);
		private final Assignment cTriggerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTriggerTriggerCrossReference_2_0 = (CrossReference)cTriggerAssignment_2.eContents().get(0);
		private final RuleCall cTriggerTriggerIDTerminalRuleCall_2_0_1 = (RuleCall)cTriggerTriggerCrossReference_2_0.eContents().get(1);
		
		//MessageIn:
		//	"listen" osc=[oscDsl::OSCExpr] trigger=[Trigger]+;
		public ParserRule getRule() { return rule; }

		//"listen" osc=[oscDsl::OSCExpr] trigger=[Trigger]+
		public Group getGroup() { return cGroup; }

		//"listen"
		public Keyword getListenKeyword_0() { return cListenKeyword_0; }

		//osc=[oscDsl::OSCExpr]
		public Assignment getOscAssignment_1() { return cOscAssignment_1; }

		//[oscDsl::OSCExpr]
		public CrossReference getOscOSCExprCrossReference_1_0() { return cOscOSCExprCrossReference_1_0; }

		//ID
		public RuleCall getOscOSCExprIDTerminalRuleCall_1_0_1() { return cOscOSCExprIDTerminalRuleCall_1_0_1; }

		//trigger=[Trigger]+
		public Assignment getTriggerAssignment_2() { return cTriggerAssignment_2; }

		//[Trigger]
		public CrossReference getTriggerTriggerCrossReference_2_0() { return cTriggerTriggerCrossReference_2_0; }

		//ID
		public RuleCall getTriggerTriggerIDTerminalRuleCall_2_0_1() { return cTriggerTriggerIDTerminalRuleCall_2_0_1; }
	}

	public class DataTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DataType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDatatypeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cMappedToKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJavaTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cJavaTypeJvmTypeCrossReference_3_0 = (CrossReference)cJavaTypeAssignment_3.eContents().get(0);
		private final RuleCall cJavaTypeJvmTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cJavaTypeJvmTypeCrossReference_3_0.eContents().get(1);
		
		////
		////
		////
		//DataType:
		//	"datatype" name=ID "mapped-to" javaType=[jvmTypes::JvmType|QualifiedName];
		public ParserRule getRule() { return rule; }

		//"datatype" name=ID "mapped-to" javaType=[jvmTypes::JvmType|QualifiedName]
		public Group getGroup() { return cGroup; }

		//"datatype"
		public Keyword getDatatypeKeyword_0() { return cDatatypeKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"mapped-to"
		public Keyword getMappedToKeyword_2() { return cMappedToKeyword_2; }

		//javaType=[jvmTypes::JvmType|QualifiedName]
		public Assignment getJavaTypeAssignment_3() { return cJavaTypeAssignment_3; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getJavaTypeJvmTypeCrossReference_3_0() { return cJavaTypeJvmTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getJavaTypeJvmTypeQualifiedNameParserRuleCall_3_0_1() { return cJavaTypeJvmTypeQualifiedNameParserRuleCall_3_0_1; }
	}

	public class UsingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Using");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportIDParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Using:
		//	"using" importedNamespace=ImportID;
		public ParserRule getRule() { return rule; }

		//"using" importedNamespace=ImportID
		public Group getGroup() { return cGroup; }

		//"using"
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }

		//importedNamespace=ImportID
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ImportID
		public RuleCall getImportedNamespaceImportIDParserRuleCall_1_0() { return cImportedNamespaceImportIDParserRuleCall_1_0; }
	}

	public class ImportIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// ... and ID with .* at the end.
		//ImportID:
		//	ID ("." "*");
		public ParserRule getRule() { return rule; }

		//ID ("." "*")
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"." "*"
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReturnParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAssertParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Element:
		//	VarDecl | Formula | EnumDecl | Return | Assert;
		public ParserRule getRule() { return rule; }

		//VarDecl | Formula | EnumDecl | Return | Assert
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDecl
		public RuleCall getVarDeclParserRuleCall_0() { return cVarDeclParserRuleCall_0; }

		//Formula
		public RuleCall getFormulaParserRuleCall_1() { return cFormulaParserRuleCall_1; }

		//EnumDecl
		public RuleCall getEnumDeclParserRuleCall_2() { return cEnumDeclParserRuleCall_2; }

		//Return
		public RuleCall getReturnParserRuleCall_3() { return cReturnParserRuleCall_3; }

		//Assert
		public RuleCall getAssertParserRuleCall_4() { return cAssertParserRuleCall_4; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElementsElementParserRuleCall_8_0 = (RuleCall)cElementsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//FunctionDeclaration returns Symbol:
		//	{FunctionDeclaration} "function" type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" // FUNC
		//	"{" elements+=Element* "}";
		public ParserRule getRule() { return rule; }

		//{FunctionDeclaration} "function" type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" // FUNC
		//"{" elements+=Element* "}"
		public Group getGroup() { return cGroup; }

		//{FunctionDeclaration}
		public Action getFunctionDeclarationAction_0() { return cFunctionDeclarationAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_0_0() { return cParamsParameterParserRuleCall_5_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_1_1_0() { return cParamsParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//// FUNC
		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//elements+=Element*
		public Assignment getElementsAssignment_8() { return cElementsAssignment_8; }

		//Element
		public RuleCall getElementsElementParserRuleCall_8_0() { return cElementsElementParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class AssertElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Assert");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssertKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cActualAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActualExprParserRuleCall_1_0 = (RuleCall)cActualAssignment_1.eContents().get(0);
		private final Keyword cIsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpectedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpectedExprParserRuleCall_3_0 = (RuleCall)cExpectedAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMsgAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMsgExprParserRuleCall_4_1_0 = (RuleCall)cMsgAssignment_4_1.eContents().get(0);
		
		//Assert:
		//	"assert" actual=Expr "is" expected=Expr (":" msg=Expr)?;
		public ParserRule getRule() { return rule; }

		//"assert" actual=Expr "is" expected=Expr (":" msg=Expr)?
		public Group getGroup() { return cGroup; }

		//"assert"
		public Keyword getAssertKeyword_0() { return cAssertKeyword_0; }

		//actual=Expr
		public Assignment getActualAssignment_1() { return cActualAssignment_1; }

		//Expr
		public RuleCall getActualExprParserRuleCall_1_0() { return cActualExprParserRuleCall_1_0; }

		//"is"
		public Keyword getIsKeyword_2() { return cIsKeyword_2; }

		//expected=Expr
		public Assignment getExpectedAssignment_3() { return cExpectedAssignment_3; }

		//Expr
		public RuleCall getExpectedExprParserRuleCall_3_0() { return cExpectedExprParserRuleCall_3_0; }

		//(":" msg=Expr)?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//msg=Expr
		public Assignment getMsgAssignment_4_1() { return cMsgAssignment_4_1; }

		//Expr
		public RuleCall getMsgExprParserRuleCall_4_1_0() { return cMsgExprParserRuleCall_4_1_0; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Return:
		//	"return" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"return" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter returns Symbol:
		//	{Parameter} type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//{Parameter} type=Type name=ID
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class EnumDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsEnumLiteralParserRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumDecl:
		//	"enum" name=ID "{" literals+=EnumLiteral* "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" literals+=EnumLiteral* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//literals+=EnumLiteral*
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }

		//EnumLiteral
		public RuleCall getLiteralsEnumLiteralParserRuleCall_3_0() { return cLiteralsEnumLiteralParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumLiteral returns Symbol:
		//	{EnumLiteral} name=ID;
		public ParserRule getRule() { return rule; }

		//{EnumLiteral} name=ID
		public Group getGroup() { return cGroup; }

		//{EnumLiteral}
		public Action getEnumLiteralAction_0() { return cEnumLiteralAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReadonlyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cReadonlyReadonlyKeyword_1_0 = (Keyword)cReadonlyAssignment_1.eContents().get(0);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitExprParserRuleCall_5_1_0 = (RuleCall)cInitAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VarDecl returns Symbol:
		//	{VarDecl} readonly?="readonly"? "var" type=Type name=ID ("=" init=Expr)? ";";
		public ParserRule getRule() { return rule; }

		//{VarDecl} readonly?="readonly"? "var" type=Type name=ID ("=" init=Expr)? ";"
		public Group getGroup() { return cGroup; }

		//{VarDecl}
		public Action getVarDeclAction_0() { return cVarDeclAction_0; }

		//readonly?="readonly"?
		public Assignment getReadonlyAssignment_1() { return cReadonlyAssignment_1; }

		//"readonly"
		public Keyword getReadonlyReadonlyKeyword_1_0() { return cReadonlyReadonlyKeyword_1_0; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//("=" init=Expr)?
		public Group getGroup_5() { return cGroup_5; }

		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }

		//init=Expr
		public Assignment getInitAssignment_5_1() { return cInitAssignment_5_1; }

		//Expr
		public RuleCall getInitExprParserRuleCall_5_1_0() { return cInitExprParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	PrimitiveType | ArrayType;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | ArrayType
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_1() { return cArrayTypeParserRuleCall_1; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimitiveType:
		//	IntType | BoolType | FloatType | EnumType | StringType;
		public ParserRule getRule() { return rule; }

		//IntType | BoolType | FloatType | EnumType | StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//BoolType
		public RuleCall getBoolTypeParserRuleCall_1() { return cBoolTypeParserRuleCall_1; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_2() { return cFloatTypeParserRuleCall_2; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_3() { return cEnumTypeParserRuleCall_3; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_4() { return cStringTypeParserRuleCall_4; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBaseTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBaseTypeTypeParserRuleCall_3_0 = (RuleCall)cBaseTypeAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayType:
		//	{ArrayType} "array" "[" baseType=Type "]";
		public ParserRule getRule() { return rule; }

		//{ArrayType} "array" "[" baseType=Type "]"
		public Group getGroup() { return cGroup; }

		//{ArrayType}
		public Action getArrayTypeAction_0() { return cArrayTypeAction_0; }

		//"array"
		public Keyword getArrayKeyword_1() { return cArrayKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//baseType=Type
		public Assignment getBaseTypeAssignment_3() { return cBaseTypeAssignment_3; }

		//Type
		public RuleCall getBaseTypeTypeParserRuleCall_3_0() { return cBaseTypeTypeParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Assignment cEnumRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEnumRefEnumDeclCrossReference_0 = (CrossReference)cEnumRefAssignment.eContents().get(0);
		private final RuleCall cEnumRefEnumDeclIDTerminalRuleCall_0_1 = (RuleCall)cEnumRefEnumDeclCrossReference_0.eContents().get(1);
		
		//EnumType:
		//	enumRef=[EnumDecl];
		public ParserRule getRule() { return rule; }

		//enumRef=[EnumDecl]
		public Assignment getEnumRefAssignment() { return cEnumRefAssignment; }

		//[EnumDecl]
		public CrossReference getEnumRefEnumDeclCrossReference_0() { return cEnumRefEnumDeclCrossReference_0; }

		//ID
		public RuleCall getEnumRefEnumDeclIDTerminalRuleCall_0_1() { return cEnumRefEnumDeclIDTerminalRuleCall_0_1; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntType:
		//	{IntType} "int";
		public ParserRule getRule() { return rule; }

		//{IntType} "int"
		public Group getGroup() { return cGroup; }

		//{IntType}
		public Action getIntTypeAction_0() { return cIntTypeAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class BoolTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BoolType:
		//	{BoolType} "bool";
		public ParserRule getRule() { return rule; }

		//{BoolType} "bool"
		public Group getGroup() { return cGroup; }

		//{BoolType}
		public Action getBoolTypeAction_0() { return cBoolTypeAction_0; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatType:
		//	{FloatType} "float";
		public ParserRule getRule() { return rule; }

		//{FloatType} "float"
		public Group getGroup() { return cGroup; }

		//{FloatType}
		public Action getFloatTypeAction_0() { return cFloatTypeAction_0; }

		//"float"
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType} "string";
		public ParserRule getRule() { return rule; }

		//{StringType} "string"
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Formula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormulaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCalcKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExprParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Formula returns Symbol:
		//	{Formula} "calc" type=Type name=ID "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//{Formula} "calc" type=Type name=ID "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//{Formula}
		public Action getFormulaAction_0() { return cFormulaAction_0; }

		//"calc"
		public Keyword getCalcKeyword_1() { return cCalcKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//expr=Expr
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Expr
		public RuleCall getExprExprParserRuleCall_5_0() { return cExprExprParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cComparisonParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	Comparison;
		public ParserRule getRule() { return rule; }

		//Comparison
		public RuleCall getComparisonParserRuleCall() { return cComparisonParserRuleCall; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualsLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//	Addition ({Equals.left=current} "==" right=Addition)?;
		public ParserRule getRule() { return rule; }

		//Addition ({Equals.left=current} "==" right=Addition)?
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//({Equals.left=current} "==" right=Addition)?
		public Group getGroup_1() { return cGroup_1; }

		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0() { return cEqualsLeftAction_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_1() { return cEqualsSignEqualsSignKeyword_1_1; }

		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication ({Plus.left=current} "+" right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({Plus.left=current} "+" right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Plus.left=current} "+" right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0() { return cPlusLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPostfixOperatorsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPostfixOperatorsParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	PostfixOperators ({Multi.left=current} "*" right=PostfixOperators)*;
		public ParserRule getRule() { return rule; }

		//PostfixOperators ({Multi.left=current} "*" right=PostfixOperators)*
		public Group getGroup() { return cGroup; }

		//PostfixOperators
		public RuleCall getPostfixOperatorsParserRuleCall_0() { return cPostfixOperatorsParserRuleCall_0; }

		//({Multi.left=current} "*" right=PostfixOperators)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0() { return cMultiLeftAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=PostfixOperators
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PostfixOperators
		public RuleCall getRightPostfixOperatorsParserRuleCall_1_2_0() { return cRightPostfixOperatorsParserRuleCall_1_2_0; }
	}

	public class PostfixOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArrayAccessExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexExprParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PostfixOperators returns Expression:
		//	Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?;
		public ParserRule getRule() { return rule; }

		//Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?
		public Group getGroup() { return cGroup; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }

		//({ArrayAccess.expr=current} "[" index=Expr "]")?
		public Group getGroup_1() { return cGroup_1; }

		//{ArrayAccess.expr=current}
		public Action getArrayAccessExprAction_1_0() { return cArrayAccessExprAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//index=Expr
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }

		//Expr
		public RuleCall getIndexExprParserRuleCall_1_2_0() { return cIndexExprParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSymbolRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSymbolAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cSymbolSymbolCrossReference_0_1_0 = (CrossReference)cSymbolAssignment_0_1.eContents().get(0);
		private final RuleCall cSymbolSymbolQIDParserRuleCall_0_1_0_1 = (RuleCall)cSymbolSymbolCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cActualsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cActualsExprParserRuleCall_0_2_1_0 = (RuleCall)cActualsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cActualsAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cActualsExprParserRuleCall_0_2_2_1_0 = (RuleCall)cActualsAssignment_0_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueFloatTypeParserRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Atomic returns Expression:
		//	{SymbolRef} symbol=[Symbol|QID] ("(" actuals+=Expr? ("," actuals+=Expr)* ")")? // FUNC
		//	| {NumberLiteral} value=FloatType | {StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{SymbolRef} symbol=[Symbol|QID] ("(" actuals+=Expr? ("," actuals+=Expr)* ")")? // FUNC
		//| {NumberLiteral} value=FloatType | {StringLiteral} value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SymbolRef} symbol=[Symbol|QID] ("(" actuals+=Expr? ("," actuals+=Expr)* ")")?
		public Group getGroup_0() { return cGroup_0; }

		//{SymbolRef}
		public Action getSymbolRefAction_0_0() { return cSymbolRefAction_0_0; }

		//symbol=[Symbol|QID]
		public Assignment getSymbolAssignment_0_1() { return cSymbolAssignment_0_1; }

		//[Symbol|QID]
		public CrossReference getSymbolSymbolCrossReference_0_1_0() { return cSymbolSymbolCrossReference_0_1_0; }

		//QID
		public RuleCall getSymbolSymbolQIDParserRuleCall_0_1_0_1() { return cSymbolSymbolQIDParserRuleCall_0_1_0_1; }

		//("(" actuals+=Expr? ("," actuals+=Expr)* ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//actuals+=Expr?
		public Assignment getActualsAssignment_0_2_1() { return cActualsAssignment_0_2_1; }

		//Expr
		public RuleCall getActualsExprParserRuleCall_0_2_1_0() { return cActualsExprParserRuleCall_0_2_1_0; }

		//("," actuals+=Expr)*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }

		//","
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }

		//actuals+=Expr
		public Assignment getActualsAssignment_0_2_2_1() { return cActualsAssignment_0_2_2_1; }

		//Expr
		public RuleCall getActualsExprParserRuleCall_0_2_2_1_0() { return cActualsExprParserRuleCall_0_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_3() { return cRightParenthesisKeyword_0_2_3; }

		//{NumberLiteral} value=FloatType
		public Group getGroup_1() { return cGroup_1; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }

		//value=FloatType
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//FloatType
		public RuleCall getValueFloatTypeParserRuleCall_1_1_0() { return cValueFloatTypeParserRuleCall_1_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{StringLiteral}
		public Action getStringLiteralAction_2_0() { return cStringLiteralAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private ModelElements pModel;
	private JvmVarElements pJvmVar;
	private QualifiedNameElements pQualifiedName;
	private MessageOutElements pMessageOut;
	private TriggerElements pTrigger;
	private MessageInElements pMessageIn;
	private DataTypeElements pDataType;
	private UsingElements pUsing;
	private ImportIDElements pImportID;
	private ElementElements pElement;
	private FunctionDeclarationElements pFunctionDeclaration;
	private AssertElements pAssert;
	private ReturnElements pReturn;
	private ParameterElements pParameter;
	private EnumDeclElements pEnumDecl;
	private EnumLiteralElements pEnumLiteral;
	private VarDeclElements pVarDecl;
	private TypeElements pType;
	private PrimitiveTypeElements pPrimitiveType;
	private ArrayTypeElements pArrayType;
	private EnumTypeElements pEnumType;
	private IntTypeElements pIntType;
	private BoolTypeElements pBoolType;
	private FloatTypeElements pFloatType;
	private StringTypeElements pStringType;
	private FormulaElements pFormula;
	private ExprElements pExpr;
	private ComparisonElements pComparison;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private PostfixOperatorsElements pPostfixOperators;
	private AtomicElements pAtomic;
	private QIDElements pQID;
	private TerminalRule tINT;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public EzDslGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.sf.smbt.ez.script.EzDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	////import "http://osccmd/1.0"
	//Model:
	//	isTested?="tested"? "model" name=ID usings+=Using* (elements+=Element | functions+=FunctionDeclaration)*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//JvmVar:
	//	"jvar" name=ID "as" javaTypes+=[jvmTypes::JvmType|QualifiedName] ("," javaTypes+=[jvmTypes::JvmType|QualifiedName])*
	//	"!";
	public JvmVarElements getJvmVarAccess() {
		return (pJvmVar != null) ? pJvmVar : (pJvmVar = new JvmVarElements());
	}
	
	public ParserRule getJvmVarRule() {
		return getJvmVarAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//MessageOut:
	//	"msg" osc=[oscDsl::OSCExpr];
	public MessageOutElements getMessageOutAccess() {
		return (pMessageOut != null) ? pMessageOut : (pMessageOut = new MessageOutElements());
	}
	
	public ParserRule getMessageOutRule() {
		return getMessageOutAccess().getRule();
	}

	//Trigger:
	//	trigger=MessageOut;
	public TriggerElements getTriggerAccess() {
		return (pTrigger != null) ? pTrigger : (pTrigger = new TriggerElements());
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//MessageIn:
	//	"listen" osc=[oscDsl::OSCExpr] trigger=[Trigger]+;
	public MessageInElements getMessageInAccess() {
		return (pMessageIn != null) ? pMessageIn : (pMessageIn = new MessageInElements());
	}
	
	public ParserRule getMessageInRule() {
		return getMessageInAccess().getRule();
	}

	////
	////
	////
	//DataType:
	//	"datatype" name=ID "mapped-to" javaType=[jvmTypes::JvmType|QualifiedName];
	public DataTypeElements getDataTypeAccess() {
		return (pDataType != null) ? pDataType : (pDataType = new DataTypeElements());
	}
	
	public ParserRule getDataTypeRule() {
		return getDataTypeAccess().getRule();
	}

	//Using:
	//	"using" importedNamespace=ImportID;
	public UsingElements getUsingAccess() {
		return (pUsing != null) ? pUsing : (pUsing = new UsingElements());
	}
	
	public ParserRule getUsingRule() {
		return getUsingAccess().getRule();
	}

	//// ... and ID with .* at the end.
	//ImportID:
	//	ID ("." "*");
	public ImportIDElements getImportIDAccess() {
		return (pImportID != null) ? pImportID : (pImportID = new ImportIDElements());
	}
	
	public ParserRule getImportIDRule() {
		return getImportIDAccess().getRule();
	}

	//Element:
	//	VarDecl | Formula | EnumDecl | Return | Assert;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//FunctionDeclaration returns Symbol:
	//	{FunctionDeclaration} "function" type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" // FUNC
	//	"{" elements+=Element* "}";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//Assert:
	//	"assert" actual=Expr "is" expected=Expr (":" msg=Expr)?;
	public AssertElements getAssertAccess() {
		return (pAssert != null) ? pAssert : (pAssert = new AssertElements());
	}
	
	public ParserRule getAssertRule() {
		return getAssertAccess().getRule();
	}

	//Return:
	//	"return" expr=Expr ";";
	public ReturnElements getReturnAccess() {
		return (pReturn != null) ? pReturn : (pReturn = new ReturnElements());
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//Parameter returns Symbol:
	//	{Parameter} type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//EnumDecl:
	//	"enum" name=ID "{" literals+=EnumLiteral* "}";
	public EnumDeclElements getEnumDeclAccess() {
		return (pEnumDecl != null) ? pEnumDecl : (pEnumDecl = new EnumDeclElements());
	}
	
	public ParserRule getEnumDeclRule() {
		return getEnumDeclAccess().getRule();
	}

	//EnumLiteral returns Symbol:
	//	{EnumLiteral} name=ID;
	public EnumLiteralElements getEnumLiteralAccess() {
		return (pEnumLiteral != null) ? pEnumLiteral : (pEnumLiteral = new EnumLiteralElements());
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}

	//VarDecl returns Symbol:
	//	{VarDecl} readonly?="readonly"? "var" type=Type name=ID ("=" init=Expr)? ";";
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//Type:
	//	PrimitiveType | ArrayType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//PrimitiveType:
	//	IntType | BoolType | FloatType | EnumType | StringType;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//ArrayType:
	//	{ArrayType} "array" "[" baseType=Type "]";
	public ArrayTypeElements getArrayTypeAccess() {
		return (pArrayType != null) ? pArrayType : (pArrayType = new ArrayTypeElements());
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//EnumType:
	//	enumRef=[EnumDecl];
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//IntType:
	//	{IntType} "int";
	public IntTypeElements getIntTypeAccess() {
		return (pIntType != null) ? pIntType : (pIntType = new IntTypeElements());
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//BoolType:
	//	{BoolType} "bool";
	public BoolTypeElements getBoolTypeAccess() {
		return (pBoolType != null) ? pBoolType : (pBoolType = new BoolTypeElements());
	}
	
	public ParserRule getBoolTypeRule() {
		return getBoolTypeAccess().getRule();
	}

	//FloatType:
	//	{FloatType} "float";
	public FloatTypeElements getFloatTypeAccess() {
		return (pFloatType != null) ? pFloatType : (pFloatType = new FloatTypeElements());
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//Formula returns Symbol:
	//	{Formula} "calc" type=Type name=ID "=" expr=Expr ";";
	public FormulaElements getFormulaAccess() {
		return (pFormula != null) ? pFormula : (pFormula = new FormulaElements());
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}

	//Expr:
	//	Comparison;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//Comparison returns Expression:
	//	Addition ({Equals.left=current} "==" right=Addition)?;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication ({Plus.left=current} "+" right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	PostfixOperators ({Multi.left=current} "*" right=PostfixOperators)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//PostfixOperators returns Expression:
	//	Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?;
	public PostfixOperatorsElements getPostfixOperatorsAccess() {
		return (pPostfixOperators != null) ? pPostfixOperators : (pPostfixOperators = new PostfixOperatorsElements());
	}
	
	public ParserRule getPostfixOperatorsRule() {
		return getPostfixOperatorsAccess().getRule();
	}

	//Atomic returns Expression:
	//	{SymbolRef} symbol=[Symbol|QID] ("(" actuals+=Expr? ("," actuals+=Expr)* ")")? // FUNC
	//	| {NumberLiteral} value=FloatType | {StringLiteral} value=STRING;
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//QID:
	//	ID ("." ID)*;
	public QIDElements getQIDAccess() {
		return (pQID != null) ? pQID : (pQID = new QIDElements());
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"$$$don\'t use this anymore$$$";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
