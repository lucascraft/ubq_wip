/***********************************************************************************
 * Ubiquisense - A smart ambient utilities framework 
 * 
 * Copyright (c) 2012, Lucas Bigeardel
 * 
 * The library is released under:
 * 
 * A) LGPL
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA
 * 
 * B) EPL
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Lucas Bigeardel <lucas.bigeardel@gmail.com> - Initial API and implementation
 ***********************************************************************************/

grammar net.sf.smbt.ez.script.EzDsl with org.eclipse.xtext.xbase.Xbase

generate ezDsl "http://www.sf.net/smbt/ez/script/EzDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase
import "http://www.sf.net/smbt/osc/OscDsl" as oscDsl
//import "http://osccmd/1.0"

Model:
	(isTested?="tested")? "model" name=ID
	(usings+=Using)*
	(elements+=Element | functions+=FunctionDeclaration)*;

JvmVar:
'jvar' name=ID 'as'
 javaTypes+=[jvmTypes::JvmType|QualifiedName]
 (',' javaTypes+=[jvmTypes::JvmType|QualifiedName])* '!'
;

QualifiedName: ID ('.' ID)* ;

MessageOut:
	"msg" osc=[oscDsl::OSCExpr]
;

Trigger:
	trigger = MessageOut 
;

MessageIn:
	"listen" osc=[oscDsl::OSCExpr] trigger=[Trigger]+
;

//
//
//

DataType:
  'datatype' name=ID 
  'mapped-to' javaType=[jvmTypes::JvmType|QualifiedName]; 
  
	
Using:
	"using" importedNamespace=ImportID;
	
// ... and ID with .* at the end.
ImportID:
	ID ('.' '*');	
	
Element:
	VarDecl | Formula | EnumDecl | Return | Assert;
	
FunctionDeclaration returns Symbol:
	{FunctionDeclaration} "function" type=Type name=ID "(" 
		(params+=Parameter  ("," params+=Parameter)* )?  ")" "{"		// FUNC
		(elements+=Element)*
	"}";	
	
Assert:
	"assert" actual=Expr "is" expected=Expr (":" msg=Expr)?; 	

Return:
	"return" expr=Expr ";";	
	
Parameter returns Symbol:
	{Parameter} type=Type name=ID;
	
EnumDecl:	
	"enum" name=ID "{"
		(literals+=EnumLiteral)*
	"}";
	
EnumLiteral returns Symbol:
	{EnumLiteral} name=ID;

	
VarDecl returns Symbol:
	{VarDecl} (readonly?="readonly")? "var" type=Type name=ID ("=" init=Expr)? ";";

Type:
	PrimitiveType | ArrayType;
	
PrimitiveType:
	IntType | BoolType | FloatType | EnumType | StringType; 
	
ArrayType:
	{ArrayType} "array" "[" baseType=Type "]";
	
EnumType:
	 enumRef=[EnumDecl];
	
IntType:
	 {IntType} "int";
	
BoolType:
	{BoolType} "bool";

FloatType:
	{FloatType} "float";

StringType:
	{StringType} "string";

Formula returns Symbol:
	{Formula} "calc" type=Type name=ID "=" expr=Expr ";";
	
Expr:
	Comparison;

Comparison returns Expression:
	Addition ({Equals.left=current}"==" right=Addition)?;
	
Addition returns Expression:
	Multiplication ({Plus.left=current}"+" right=Multiplication)*;
	
Multiplication returns Expression:
	PostfixOperators ( {Multi.left=current} "*" right=PostfixOperators)*; 
	
PostfixOperators returns Expression:
	Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?;
	
Atomic returns Expression:
	{SymbolRef} symbol=[Symbol|QID] ("(" (actuals+=Expr)? ("," actuals+=Expr)* ")")? |	// FUNC
	{NumberLiteral} value=FloatType | 
	{StringLiteral} value=STRING;
	
QID:
	ID ("." ID)*;

terminal INT returns ecore::EInt: 
	"$$$don't use this anymore$$$";
