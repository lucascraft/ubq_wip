/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.jzmui.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.jzmui.util.JzmuiAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class JzmuiItemProviderAdapterFactory extends JzmuiAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public JzmuiItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.LemurLiveApp} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LemurLiveAppItemProvider lemurLiveAppItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.LemurLiveApp}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLemurLiveAppAdapter() {
		if (lemurLiveAppItemProvider == null) {
			lemurLiveAppItemProvider = new LemurLiveAppItemProvider(this);
		}

		return lemurLiveAppItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZContainer} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZContainerItemProvider jzContainerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZContainer}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZContainerAdapter() {
		if (jzContainerItemProvider == null) {
			jzContainerItemProvider = new JZContainerItemProvider(this);
		}

		return jzContainerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZBreakPoint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZBreakPointItemProvider jzBreakPointItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZBreakPoint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZBreakPointAdapter() {
		if (jzBreakPointItemProvider == null) {
			jzBreakPointItemProvider = new JZBreakPointItemProvider(this);
		}

		return jzBreakPointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZFader} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZFaderItemProvider jzFaderItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZFader}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZFaderAdapter() {
		if (jzFaderItemProvider == null) {
			jzFaderItemProvider = new JZFaderItemProvider(this);
		}

		return jzFaderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZGesture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZGestureItemProvider jzGestureItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZGesture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZGestureAdapter() {
		if (jzGestureItemProvider == null) {
			jzGestureItemProvider = new JZGestureItemProvider(this);
		}

		return jzGestureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZKnob} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZKnobItemProvider jzKnobItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZKnob}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZKnobAdapter() {
		if (jzKnobItemProvider == null) {
			jzKnobItemProvider = new JZKnobItemProvider(this);
		}

		return jzKnobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZLed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZLedItemProvider jzLedItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZLed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZLedAdapter() {
		if (jzLedItemProvider == null) {
			jzLedItemProvider = new JZLedItemProvider(this);
		}

		return jzLedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZLemurMenu} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZLemurMenuItemProvider jzLemurMenuItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZLemurMenu}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZLemurMenuAdapter() {
		if (jzLemurMenuItemProvider == null) {
			jzLemurMenuItemProvider = new JZLemurMenuItemProvider(this);
		}

		return jzLemurMenuItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZLemurMonitor} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZLemurMonitorItemProvider jzLemurMonitorItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZLemurMonitor}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZLemurMonitorAdapter() {
		if (jzLemurMonitorItemProvider == null) {
			jzLemurMonitorItemProvider = new JZLemurMonitorItemProvider(this);
		}

		return jzLemurMonitorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZPads} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZPadsItemProvider jzPadsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZPads}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZPadsAdapter() {
		if (jzPadsItemProvider == null) {
			jzPadsItemProvider = new JZPadsItemProvider(this);
		}

		return jzPadsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZSurfaceLCD} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZSurfaceLCDItemProvider jzSurfaceLCDItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZSurfaceLCD}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZSurfaceLCDAdapter() {
		if (jzSurfaceLCDItemProvider == null) {
			jzSurfaceLCDItemProvider = new JZSurfaceLCDItemProvider(this);
		}

		return jzSurfaceLCDItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZSwitches} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZSwitchesItemProvider jzSwitchesItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZSwitches}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZSwitchesAdapter() {
		if (jzSwitchesItemProvider == null) {
			jzSwitchesItemProvider = new JZSwitchesItemProvider(this);
		}

		return jzSwitchesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZText} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZTextItemProvider jzTextItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZText}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZTextAdapter() {
		if (jzTextItemProvider == null) {
			jzTextItemProvider = new JZTextItemProvider(this);
		}

		return jzTextItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZCustomButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZCustomButtonItemProvider jzCustomButtonItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZCustomButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZCustomButtonAdapter() {
		if (jzCustomButtonItemProvider == null) {
			jzCustomButtonItemProvider = new JZCustomButtonItemProvider(this);
		}

		return jzCustomButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZSignalScope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZSignalScopeItemProvider jzSignalScopeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZSignalScope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZSignalScopeAdapter() {
		if (jzSignalScopeItemProvider == null) {
			jzSignalScopeItemProvider = new JZSignalScopeItemProvider(this);
		}

		return jzSignalScopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZRange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZRangeItemProvider jzRangeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZRange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZRangeAdapter() {
		if (jzRangeItemProvider == null) {
			jzRangeItemProvider = new JZRangeItemProvider(this);
		}

		return jzRangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZMultiBalls} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZMultiBallsItemProvider jzMultiBallsItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZMultiBalls}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZMultiBallsAdapter() {
		if (jzMultiBallsItemProvider == null) {
			jzMultiBallsItemProvider = new JZMultiBallsItemProvider(this);
		}

		return jzMultiBallsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZTrack} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZTrackItemProvider jzTrackItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZTrack}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZTrackAdapter() {
		if (jzTrackItemProvider == null) {
			jzTrackItemProvider = new JZTrackItemProvider(this);
		}

		return jzTrackItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZmultiSlider} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZmultiSliderItemProvider jZmultiSliderItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZmultiSlider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZmultiSliderAdapter() {
		if (jZmultiSliderItemProvider == null) {
			jZmultiSliderItemProvider = new JZmultiSliderItemProvider(this);
		}

		return jZmultiSliderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZMenuItem} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZMenuItemItemProvider jzMenuItemItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZMenuItem}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZMenuItemAdapter() {
		if (jzMenuItemItemProvider == null) {
			jzMenuItemItemProvider = new JZMenuItemItemProvider(this);
		}

		return jzMenuItemItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZRingArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZRingAreaItemProvider jzRingAreaItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZRingArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZRingAreaAdapter() {
		if (jzRingAreaItemProvider == null) {
			jzRingAreaItemProvider = new JZRingAreaItemProvider(this);
		}

		return jzRingAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.OSCDynaProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OSCDynaPropertiesItemProvider oscDynaPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.OSCDynaProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOSCDynaPropertiesAdapter() {
		if (oscDynaPropertiesItemProvider == null) {
			oscDynaPropertiesItemProvider = new OSCDynaPropertiesItemProvider(this);
		}

		return oscDynaPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiDynaProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiDynaPropertiesItemProvider midiDynaPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiDynaProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiDynaPropertiesAdapter() {
		if (midiDynaPropertiesItemProvider == null) {
			midiDynaPropertiesItemProvider = new MidiDynaPropertiesItemProvider(this);
		}

		return midiDynaPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.DMXDynaProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DMXDynaPropertiesItemProvider dmxDynaPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.DMXDynaProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDMXDynaPropertiesAdapter() {
		if (dmxDynaPropertiesItemProvider == null) {
			dmxDynaPropertiesItemProvider = new DMXDynaPropertiesItemProvider(this);
		}

		return dmxDynaPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZJazzInterface} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZJazzInterfaceItemProvider jzJazzInterfaceItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZJazzInterface}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZJazzInterfaceAdapter() {
		if (jzJazzInterfaceItemProvider == null) {
			jzJazzInterfaceItemProvider = new JZJazzInterfaceItemProvider(this);
		}

		return jzJazzInterfaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZTargetItemProvider jzTargetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZTargetAdapter() {
		if (jzTargetItemProvider == null) {
			jzTargetItemProvider = new JZTargetItemProvider(this);
		}

		return jzTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JzOscTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JzOscTargetItemProvider jzOscTargetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JzOscTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJzOscTargetAdapter() {
		if (jzOscTargetItemProvider == null) {
			jzOscTargetItemProvider = new JzOscTargetItemProvider(this);
		}

		return jzOscTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JzMidiTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JzMidiTargetItemProvider jzMidiTargetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JzMidiTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJzMidiTargetAdapter() {
		if (jzMidiTargetItemProvider == null) {
			jzMidiTargetItemProvider = new JzMidiTargetItemProvider(this);
		}

		return jzMidiTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JzKBTarget} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JzKBTargetItemProvider jzKBTargetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JzKBTarget}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJzKBTargetAdapter() {
		if (jzKBTargetItemProvider == null) {
			jzKBTargetItemProvider = new JzKBTargetItemProvider(this);
		}

		return jzKBTargetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.KBDynaProperties} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected KBDynaPropertiesItemProvider kbDynaPropertiesItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.KBDynaProperties}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createKBDynaPropertiesAdapter() {
		if (kbDynaPropertiesItemProvider == null) {
			kbDynaPropertiesItemProvider = new KBDynaPropertiesItemProvider(this);
		}

		return kbDynaPropertiesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZConfigurationManager} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZConfigurationManagerItemProvider jzConfigurationManagerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZConfigurationManager}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZConfigurationManagerAdapter() {
		if (jzConfigurationManagerItemProvider == null) {
			jzConfigurationManagerItemProvider = new JZConfigurationManagerItemProvider(this);
		}

		return jzConfigurationManagerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JzOscVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JzOscVarItemProvider jzOscVarItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JzOscVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJzOscVarAdapter() {
		if (jzOscVarItemProvider == null) {
			jzOscVarItemProvider = new JzOscVarItemProvider(this);
		}

		return jzOscVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JZVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JZVarItemProvider jzVarItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JZVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJZVarAdapter() {
		if (jzVarItemProvider == null) {
			jzVarItemProvider = new JZVarItemProvider(this);
		}

		return jzVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.JzMidiVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JzMidiVarItemProvider jzMidiVarItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.JzMidiVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJzMidiVarAdapter() {
		if (jzMidiVarItemProvider == null) {
			jzMidiVarItemProvider = new JzMidiVarItemProvider(this);
		}

		return jzMidiVarItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.Script} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScriptItemProvider scriptItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.Script}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScriptAdapter() {
		if (scriptItemProvider == null) {
			scriptItemProvider = new ScriptItemProvider(this);
		}

		return scriptItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVar80NoteOff} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVar80NoteOffItemProvider midiVar80NoteOffItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVar80NoteOff}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVar80NoteOffAdapter() {
		if (midiVar80NoteOffItemProvider == null) {
			midiVar80NoteOffItemProvider = new MidiVar80NoteOffItemProvider(this);
		}

		return midiVar80NoteOffItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVar90NoteOn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVar90NoteOnItemProvider midiVar90NoteOnItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVar90NoteOn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVar90NoteOnAdapter() {
		if (midiVar90NoteOnItemProvider == null) {
			midiVar90NoteOnItemProvider = new MidiVar90NoteOnItemProvider(this);
		}

		return midiVar90NoteOnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarA0KeyPressure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarA0KeyPressureItemProvider midiVarA0KeyPressureItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarA0KeyPressure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarA0KeyPressureAdapter() {
		if (midiVarA0KeyPressureItemProvider == null) {
			midiVarA0KeyPressureItemProvider = new MidiVarA0KeyPressureItemProvider(this);
		}

		return midiVarA0KeyPressureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarB0ControlChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarB0ControlChangeItemProvider midiVarB0ControlChangeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarB0ControlChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarB0ControlChangeAdapter() {
		if (midiVarB0ControlChangeItemProvider == null) {
			midiVarB0ControlChangeItemProvider = new MidiVarB0ControlChangeItemProvider(this);
		}

		return midiVarB0ControlChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarC0ProgramChange} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarC0ProgramChangeItemProvider midiVarC0ProgramChangeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarC0ProgramChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarC0ProgramChangeAdapter() {
		if (midiVarC0ProgramChangeItemProvider == null) {
			midiVarC0ProgramChangeItemProvider = new MidiVarC0ProgramChangeItemProvider(this);
		}

		return midiVarC0ProgramChangeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarD0ChannelPressure} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarD0ChannelPressureItemProvider midiVarD0ChannelPressureItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarD0ChannelPressure}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarD0ChannelPressureAdapter() {
		if (midiVarD0ChannelPressureItemProvider == null) {
			midiVarD0ChannelPressureItemProvider = new MidiVarD0ChannelPressureItemProvider(this);
		}

		return midiVarD0ChannelPressureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarE0PitchBend} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarE0PitchBendItemProvider midiVarE0PitchBendItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarE0PitchBend}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarE0PitchBendAdapter() {
		if (midiVarE0PitchBendItemProvider == null) {
			midiVarE0PitchBendItemProvider = new MidiVarE0PitchBendItemProvider(this);
		}

		return midiVarE0PitchBendItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarF0SystemExclusive} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarF0SystemExclusiveItemProvider midiVarF0SystemExclusiveItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarF0SystemExclusive}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarF0SystemExclusiveAdapter() {
		if (midiVarF0SystemExclusiveItemProvider == null) {
			midiVarF0SystemExclusiveItemProvider = new MidiVarF0SystemExclusiveItemProvider(this);
		}

		return midiVarF0SystemExclusiveItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarF2SngPosition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarF2SngPositionItemProvider midiVarF2SngPositionItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarF2SngPosition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarF2SngPositionAdapter() {
		if (midiVarF2SngPositionItemProvider == null) {
			midiVarF2SngPositionItemProvider = new MidiVarF2SngPositionItemProvider(this);
		}

		return midiVarF2SngPositionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarF3SongSelect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarF3SongSelectItemProvider midiVarF3SongSelectItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarF3SongSelect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarF3SongSelectAdapter() {
		if (midiVarF3SongSelectItemProvider == null) {
			midiVarF3SongSelectItemProvider = new MidiVarF3SongSelectItemProvider(this);
		}

		return midiVarF3SongSelectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarF5BusSelect} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarF5BusSelectItemProvider midiVarF5BusSelectItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarF5BusSelect}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarF5BusSelectAdapter() {
		if (midiVarF5BusSelectItemProvider == null) {
			midiVarF5BusSelectItemProvider = new MidiVarF5BusSelectItemProvider(this);
		}

		return midiVarF5BusSelectItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarF6TuneRequest} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarF6TuneRequestItemProvider midiVarF6TuneRequestItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarF6TuneRequest}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarF6TuneRequestAdapter() {
		if (midiVarF6TuneRequestItemProvider == null) {
			midiVarF6TuneRequestItemProvider = new MidiVarF6TuneRequestItemProvider(this);
		}

		return midiVarF6TuneRequestItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarF8TimingTick} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarF8TimingTickItemProvider midiVarF8TimingTickItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarF8TimingTick}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarF8TimingTickAdapter() {
		if (midiVarF8TimingTickItemProvider == null) {
			midiVarF8TimingTickItemProvider = new MidiVarF8TimingTickItemProvider(this);
		}

		return midiVarF8TimingTickItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarFAStartSong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarFAStartSongItemProvider midiVarFAStartSongItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarFAStartSong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarFAStartSongAdapter() {
		if (midiVarFAStartSongItemProvider == null) {
			midiVarFAStartSongItemProvider = new MidiVarFAStartSongItemProvider(this);
		}

		return midiVarFAStartSongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarFBContinueSong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarFBContinueSongItemProvider midiVarFBContinueSongItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarFBContinueSong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarFBContinueSongAdapter() {
		if (midiVarFBContinueSongItemProvider == null) {
			midiVarFBContinueSongItemProvider = new MidiVarFBContinueSongItemProvider(this);
		}

		return midiVarFBContinueSongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarFCStopSong} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarFCStopSongItemProvider midiVarFCStopSongItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarFCStopSong}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarFCStopSongAdapter() {
		if (midiVarFCStopSongItemProvider == null) {
			midiVarFCStopSongItemProvider = new MidiVarFCStopSongItemProvider(this);
		}

		return midiVarFCStopSongItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarFEActiveSensing} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarFEActiveSensingItemProvider midiVarFEActiveSensingItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarFEActiveSensing}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarFEActiveSensingAdapter() {
		if (midiVarFEActiveSensingItemProvider == null) {
			midiVarFEActiveSensingItemProvider = new MidiVarFEActiveSensingItemProvider(this);
		}

		return midiVarFEActiveSensingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVarFFSystemReset} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarFFSystemResetItemProvider midiVarFFSystemResetItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVarFFSystemReset}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarFFSystemResetAdapter() {
		if (midiVarFFSystemResetItemProvider == null) {
			midiVarFFSystemResetItemProvider = new MidiVarFFSystemResetItemProvider(this);
		}

		return midiVarFFSystemResetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.AbstractMidiVarNote} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AbstractMidiVarNoteItemProvider abstractMidiVarNoteItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.AbstractMidiVarNote}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAbstractMidiVarNoteAdapter() {
		if (abstractMidiVarNoteItemProvider == null) {
			abstractMidiVarNoteItemProvider = new AbstractMidiVarNoteItemProvider(this);
		}

		return abstractMidiVarNoteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.jzmui.MidiVar} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MidiVarItemProvider midiVarItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.jzmui.MidiVar}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMidiVarAdapter() {
		if (midiVarItemProvider == null) {
			midiVarItemProvider = new MidiVarItemProvider(this);
		}

		return midiVarItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (lemurLiveAppItemProvider != null) lemurLiveAppItemProvider.dispose();
		if (jzContainerItemProvider != null) jzContainerItemProvider.dispose();
		if (jzBreakPointItemProvider != null) jzBreakPointItemProvider.dispose();
		if (jzFaderItemProvider != null) jzFaderItemProvider.dispose();
		if (jzGestureItemProvider != null) jzGestureItemProvider.dispose();
		if (jzKnobItemProvider != null) jzKnobItemProvider.dispose();
		if (jzLedItemProvider != null) jzLedItemProvider.dispose();
		if (jzLemurMenuItemProvider != null) jzLemurMenuItemProvider.dispose();
		if (jzLemurMonitorItemProvider != null) jzLemurMonitorItemProvider.dispose();
		if (jzPadsItemProvider != null) jzPadsItemProvider.dispose();
		if (jzSurfaceLCDItemProvider != null) jzSurfaceLCDItemProvider.dispose();
		if (jzSwitchesItemProvider != null) jzSwitchesItemProvider.dispose();
		if (jzTextItemProvider != null) jzTextItemProvider.dispose();
		if (jzCustomButtonItemProvider != null) jzCustomButtonItemProvider.dispose();
		if (jzSignalScopeItemProvider != null) jzSignalScopeItemProvider.dispose();
		if (jzRangeItemProvider != null) jzRangeItemProvider.dispose();
		if (jzMultiBallsItemProvider != null) jzMultiBallsItemProvider.dispose();
		if (jzTrackItemProvider != null) jzTrackItemProvider.dispose();
		if (jZmultiSliderItemProvider != null) jZmultiSliderItemProvider.dispose();
		if (jzMenuItemItemProvider != null) jzMenuItemItemProvider.dispose();
		if (jzRingAreaItemProvider != null) jzRingAreaItemProvider.dispose();
		if (oscDynaPropertiesItemProvider != null) oscDynaPropertiesItemProvider.dispose();
		if (midiDynaPropertiesItemProvider != null) midiDynaPropertiesItemProvider.dispose();
		if (dmxDynaPropertiesItemProvider != null) dmxDynaPropertiesItemProvider.dispose();
		if (jzJazzInterfaceItemProvider != null) jzJazzInterfaceItemProvider.dispose();
		if (jzTargetItemProvider != null) jzTargetItemProvider.dispose();
		if (jzOscTargetItemProvider != null) jzOscTargetItemProvider.dispose();
		if (jzMidiTargetItemProvider != null) jzMidiTargetItemProvider.dispose();
		if (jzKBTargetItemProvider != null) jzKBTargetItemProvider.dispose();
		if (kbDynaPropertiesItemProvider != null) kbDynaPropertiesItemProvider.dispose();
		if (jzConfigurationManagerItemProvider != null) jzConfigurationManagerItemProvider.dispose();
		if (jzOscVarItemProvider != null) jzOscVarItemProvider.dispose();
		if (jzVarItemProvider != null) jzVarItemProvider.dispose();
		if (jzMidiVarItemProvider != null) jzMidiVarItemProvider.dispose();
		if (scriptItemProvider != null) scriptItemProvider.dispose();
		if (midiVar80NoteOffItemProvider != null) midiVar80NoteOffItemProvider.dispose();
		if (midiVar90NoteOnItemProvider != null) midiVar90NoteOnItemProvider.dispose();
		if (midiVarA0KeyPressureItemProvider != null) midiVarA0KeyPressureItemProvider.dispose();
		if (midiVarB0ControlChangeItemProvider != null) midiVarB0ControlChangeItemProvider.dispose();
		if (midiVarC0ProgramChangeItemProvider != null) midiVarC0ProgramChangeItemProvider.dispose();
		if (midiVarD0ChannelPressureItemProvider != null) midiVarD0ChannelPressureItemProvider.dispose();
		if (midiVarE0PitchBendItemProvider != null) midiVarE0PitchBendItemProvider.dispose();
		if (midiVarF0SystemExclusiveItemProvider != null) midiVarF0SystemExclusiveItemProvider.dispose();
		if (midiVarF2SngPositionItemProvider != null) midiVarF2SngPositionItemProvider.dispose();
		if (midiVarF3SongSelectItemProvider != null) midiVarF3SongSelectItemProvider.dispose();
		if (midiVarF5BusSelectItemProvider != null) midiVarF5BusSelectItemProvider.dispose();
		if (midiVarF6TuneRequestItemProvider != null) midiVarF6TuneRequestItemProvider.dispose();
		if (midiVarF8TimingTickItemProvider != null) midiVarF8TimingTickItemProvider.dispose();
		if (midiVarFAStartSongItemProvider != null) midiVarFAStartSongItemProvider.dispose();
		if (midiVarFBContinueSongItemProvider != null) midiVarFBContinueSongItemProvider.dispose();
		if (midiVarFCStopSongItemProvider != null) midiVarFCStopSongItemProvider.dispose();
		if (midiVarFEActiveSensingItemProvider != null) midiVarFEActiveSensingItemProvider.dispose();
		if (midiVarFFSystemResetItemProvider != null) midiVarFFSystemResetItemProvider.dispose();
		if (abstractMidiVarNoteItemProvider != null) abstractMidiVarNoteItemProvider.dispose();
		if (midiVarItemProvider != null) midiVarItemProvider.dispose();
	}

}
