/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.commands.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.commands.util.CommandsAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CommandsItemProviderAdapterFactory extends CommandsAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CommandsItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.BlinkMCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BlinkMCmdItemProvider blinkMCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.BlinkMCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBlinkMCmdAdapter() {
		if (blinkMCmdItemProvider == null) {
			blinkMCmdItemProvider = new BlinkMCmdItemProvider(this);
		}

		return blinkMCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.GoToRGBColorCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GoToRGBColorCmdItemProvider goToRGBColorCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.GoToRGBColorCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGoToRGBColorCmdAdapter() {
		if (goToRGBColorCmdItemProvider == null) {
			goToRGBColorCmdItemProvider = new GoToRGBColorCmdItemProvider(this);
		}

		return goToRGBColorCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.FadeToRGBColorCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FadeToRGBColorCmdItemProvider fadeToRGBColorCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.FadeToRGBColorCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFadeToRGBColorCmdAdapter() {
		if (fadeToRGBColorCmdItemProvider == null) {
			fadeToRGBColorCmdItemProvider = new FadeToRGBColorCmdItemProvider(this);
		}

		return fadeToRGBColorCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.FadeToHSBColorCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FadeToHSBColorCmdItemProvider fadeToHSBColorCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.FadeToHSBColorCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFadeToHSBColorCmdAdapter() {
		if (fadeToHSBColorCmdItemProvider == null) {
			fadeToHSBColorCmdItemProvider = new FadeToHSBColorCmdItemProvider(this);
		}

		return fadeToHSBColorCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.FadeToRandomRGBColorCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FadeToRandomRGBColorCmdItemProvider fadeToRandomRGBColorCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.FadeToRandomRGBColorCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFadeToRandomRGBColorCmdAdapter() {
		if (fadeToRandomRGBColorCmdItemProvider == null) {
			fadeToRandomRGBColorCmdItemProvider = new FadeToRandomRGBColorCmdItemProvider(this);
		}

		return fadeToRandomRGBColorCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.FadeToRandomHSBColorCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FadeToRandomHSBColorCmdItemProvider fadeToRandomHSBColorCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.FadeToRandomHSBColorCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFadeToRandomHSBColorCmdAdapter() {
		if (fadeToRandomHSBColorCmdItemProvider == null) {
			fadeToRandomHSBColorCmdItemProvider = new FadeToRandomHSBColorCmdItemProvider(this);
		}

		return fadeToRandomHSBColorCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.PlayLightScriptCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PlayLightScriptCmdItemProvider playLightScriptCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.PlayLightScriptCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPlayLightScriptCmdAdapter() {
		if (playLightScriptCmdItemProvider == null) {
			playLightScriptCmdItemProvider = new PlayLightScriptCmdItemProvider(this);
		}

		return playLightScriptCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.SetFadeSpeedCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetFadeSpeedCmdItemProvider setFadeSpeedCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.SetFadeSpeedCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetFadeSpeedCmdAdapter() {
		if (setFadeSpeedCmdItemProvider == null) {
			setFadeSpeedCmdItemProvider = new SetFadeSpeedCmdItemProvider(this);
		}

		return setFadeSpeedCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.StopScriptCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StopScriptCmdItemProvider stopScriptCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.StopScriptCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStopScriptCmdAdapter() {
		if (stopScriptCmdItemProvider == null) {
			stopScriptCmdItemProvider = new StopScriptCmdItemProvider(this);
		}

		return stopScriptCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.SetTimeAdjustCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetTimeAdjustCmdItemProvider setTimeAdjustCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.SetTimeAdjustCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetTimeAdjustCmdAdapter() {
		if (setTimeAdjustCmdItemProvider == null) {
			setTimeAdjustCmdItemProvider = new SetTimeAdjustCmdItemProvider(this);
		}

		return setTimeAdjustCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.GetCurrentRGBColorCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetCurrentRGBColorCmdItemProvider getCurrentRGBColorCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.GetCurrentRGBColorCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetCurrentRGBColorCmdAdapter() {
		if (getCurrentRGBColorCmdItemProvider == null) {
			getCurrentRGBColorCmdItemProvider = new GetCurrentRGBColorCmdItemProvider(this);
		}

		return getCurrentRGBColorCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.WriteScriptLineCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WriteScriptLineCmdItemProvider writeScriptLineCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.WriteScriptLineCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWriteScriptLineCmdAdapter() {
		if (writeScriptLineCmdItemProvider == null) {
			writeScriptLineCmdItemProvider = new WriteScriptLineCmdItemProvider(this);
		}

		return writeScriptLineCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.ReadScriptLineCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReadScriptLineCmdItemProvider readScriptLineCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.ReadScriptLineCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReadScriptLineCmdAdapter() {
		if (readScriptLineCmdItemProvider == null) {
			readScriptLineCmdItemProvider = new ReadScriptLineCmdItemProvider(this);
		}

		return readScriptLineCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.SetScriptLengthAndRepeatCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetScriptLengthAndRepeatCmdItemProvider setScriptLengthAndRepeatCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.SetScriptLengthAndRepeatCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetScriptLengthAndRepeatCmdAdapter() {
		if (setScriptLengthAndRepeatCmdItemProvider == null) {
			setScriptLengthAndRepeatCmdItemProvider = new SetScriptLengthAndRepeatCmdItemProvider(this);
		}

		return setScriptLengthAndRepeatCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.SetBlinkMAddrCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetBlinkMAddrCmdItemProvider setBlinkMAddrCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.SetBlinkMAddrCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetBlinkMAddrCmdAdapter() {
		if (setBlinkMAddrCmdItemProvider == null) {
			setBlinkMAddrCmdItemProvider = new SetBlinkMAddrCmdItemProvider(this);
		}

		return setBlinkMAddrCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.GetBlinkMAddrCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetBlinkMAddrCmdItemProvider getBlinkMAddrCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.GetBlinkMAddrCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetBlinkMAddrCmdAdapter() {
		if (getBlinkMAddrCmdItemProvider == null) {
			getBlinkMAddrCmdItemProvider = new GetBlinkMAddrCmdItemProvider(this);
		}

		return getBlinkMAddrCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.GetBlinkMFirmwareVersionCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GetBlinkMFirmwareVersionCmdItemProvider getBlinkMFirmwareVersionCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.GetBlinkMFirmwareVersionCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGetBlinkMFirmwareVersionCmdAdapter() {
		if (getBlinkMFirmwareVersionCmdItemProvider == null) {
			getBlinkMFirmwareVersionCmdItemProvider = new GetBlinkMFirmwareVersionCmdItemProvider(this);
		}

		return getBlinkMFirmwareVersionCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.commands.SetStartupParametersCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetStartupParametersCmdItemProvider setStartupParametersCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.commands.SetStartupParametersCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetStartupParametersCmdAdapter() {
		if (setStartupParametersCmdItemProvider == null) {
			setStartupParametersCmdItemProvider = new SetStartupParametersCmdItemProvider(this);
		}

		return setStartupParametersCmdItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (blinkMCmdItemProvider != null) blinkMCmdItemProvider.dispose();
		if (goToRGBColorCmdItemProvider != null) goToRGBColorCmdItemProvider.dispose();
		if (fadeToRGBColorCmdItemProvider != null) fadeToRGBColorCmdItemProvider.dispose();
		if (fadeToHSBColorCmdItemProvider != null) fadeToHSBColorCmdItemProvider.dispose();
		if (fadeToRandomRGBColorCmdItemProvider != null) fadeToRandomRGBColorCmdItemProvider.dispose();
		if (fadeToRandomHSBColorCmdItemProvider != null) fadeToRandomHSBColorCmdItemProvider.dispose();
		if (playLightScriptCmdItemProvider != null) playLightScriptCmdItemProvider.dispose();
		if (setFadeSpeedCmdItemProvider != null) setFadeSpeedCmdItemProvider.dispose();
		if (stopScriptCmdItemProvider != null) stopScriptCmdItemProvider.dispose();
		if (setTimeAdjustCmdItemProvider != null) setTimeAdjustCmdItemProvider.dispose();
		if (getCurrentRGBColorCmdItemProvider != null) getCurrentRGBColorCmdItemProvider.dispose();
		if (writeScriptLineCmdItemProvider != null) writeScriptLineCmdItemProvider.dispose();
		if (readScriptLineCmdItemProvider != null) readScriptLineCmdItemProvider.dispose();
		if (setScriptLengthAndRepeatCmdItemProvider != null) setScriptLengthAndRepeatCmdItemProvider.dispose();
		if (setBlinkMAddrCmdItemProvider != null) setBlinkMAddrCmdItemProvider.dispose();
		if (getBlinkMAddrCmdItemProvider != null) getBlinkMAddrCmdItemProvider.dispose();
		if (getBlinkMFirmwareVersionCmdItemProvider != null) getBlinkMFirmwareVersionCmdItemProvider.dispose();
		if (setStartupParametersCmdItemProvider != null) setStartupParametersCmdItemProvider.dispose();
	}

}
