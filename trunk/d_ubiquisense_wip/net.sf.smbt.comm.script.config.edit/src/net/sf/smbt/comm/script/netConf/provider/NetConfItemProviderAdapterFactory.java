/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.comm.script.netConf.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.comm.script.netConf.util.NetConfAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class NetConfItemProviderAdapterFactory extends NetConfAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public NetConfItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.script.netConf.NetCfg} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetCfgItemProvider netCfgItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.script.netConf.NetCfg}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetCfgAdapter() {
		if (netCfgItemProvider == null) {
			netCfgItemProvider = new NetCfgItemProvider(this);
		}

		return netCfgItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.script.netConf.DSLOrchestrorImport} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DSLOrchestrorImportItemProvider dslOrchestrorImportItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.script.netConf.DSLOrchestrorImport}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDSLOrchestrorImportAdapter() {
		if (dslOrchestrorImportItemProvider == null) {
			dslOrchestrorImportItemProvider = new DSLOrchestrorImportItemProvider(this);
		}

		return dslOrchestrorImportItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.script.netConf.NetPort} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetPortItemProvider netPortItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.script.netConf.NetPort}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetPortAdapter() {
		if (netPortItemProvider == null) {
			netPortItemProvider = new NetPortItemProvider(this);
		}

		return netPortItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.script.netConf.NetDecoder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetDecoderItemProvider netDecoderItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.script.netConf.NetDecoder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetDecoderAdapter() {
		if (netDecoderItemProvider == null) {
			netDecoderItemProvider = new NetDecoderItemProvider(this);
		}

		return netDecoderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.script.netConf.NetInterpreter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetInterpreterItemProvider netInterpreterItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.script.netConf.NetInterpreter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetInterpreterAdapter() {
		if (netInterpreterItemProvider == null) {
			netInterpreterItemProvider = new NetInterpreterItemProvider(this);
		}

		return netInterpreterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.script.netConf.NetListener} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetListenerItemProvider netListenerItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.script.netConf.NetListener}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetListenerAdapter() {
		if (netListenerItemProvider == null) {
			netListenerItemProvider = new NetListenerItemProvider(this);
		}

		return netListenerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.script.netConf.NetOrchestrorScope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetOrchestrorScopeItemProvider netOrchestrorScopeItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.script.netConf.NetOrchestrorScope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetOrchestrorScopeAdapter() {
		if (netOrchestrorScopeItemProvider == null) {
			netOrchestrorScopeItemProvider = new NetOrchestrorScopeItemProvider(this);
		}

		return netOrchestrorScopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.comm.script.netConf.NetBind} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NetBindItemProvider netBindItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.comm.script.netConf.NetBind}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNetBindAdapter() {
		if (netBindItemProvider == null) {
			netBindItemProvider = new NetBindItemProvider(this);
		}

		return netBindItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (netCfgItemProvider != null) netCfgItemProvider.dispose();
		if (dslOrchestrorImportItemProvider != null) dslOrchestrorImportItemProvider.dispose();
		if (netPortItemProvider != null) netPortItemProvider.dispose();
		if (netDecoderItemProvider != null) netDecoderItemProvider.dispose();
		if (netInterpreterItemProvider != null) netInterpreterItemProvider.dispose();
		if (netListenerItemProvider != null) netListenerItemProvider.dispose();
		if (netOrchestrorScopeItemProvider != null) netOrchestrorScopeItemProvider.dispose();
		if (netBindItemProvider != null) netBindItemProvider.dispose();
	}

}
