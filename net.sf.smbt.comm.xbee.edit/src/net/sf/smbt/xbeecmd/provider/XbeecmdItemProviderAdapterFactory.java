/**
 * <copyright>
 * </copyright>
 *
 * $Id$
 */
package net.sf.smbt.xbeecmd.provider;

import java.util.ArrayList;
import java.util.Collection;

import net.sf.smbt.xbeecmd.util.XbeecmdAdapterFactory;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;
import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class XbeecmdItemProviderAdapterFactory extends XbeecmdAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public XbeecmdItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.xbeecmd.XBeeSndCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XBeeSndCmdItemProvider xBeeSndCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.xbeecmd.XBeeSndCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXBeeSndCmdAdapter() {
		if (xBeeSndCmdItemProvider == null) {
			xBeeSndCmdItemProvider = new XBeeSndCmdItemProvider(this);
		}

		return xBeeSndCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.xbeecmd.XBeeRcvCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XBeeRcvCmdItemProvider xBeeRcvCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.xbeecmd.XBeeRcvCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXBeeRcvCmdAdapter() {
		if (xBeeRcvCmdItemProvider == null) {
			xBeeRcvCmdItemProvider = new XBeeRcvCmdItemProvider(this);
		}

		return xBeeRcvCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.xbeecmd.XBeeAtSndCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XBeeAtSndCmdItemProvider xBeeAtSndCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.xbeecmd.XBeeAtSndCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXBeeAtSndCmdAdapter() {
		if (xBeeAtSndCmdItemProvider == null) {
			xBeeAtSndCmdItemProvider = new XBeeAtSndCmdItemProvider(this);
		}

		return xBeeAtSndCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.xbeecmd.XBeeAtRcvCmd} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XBeeAtRcvCmdItemProvider xBeeAtRcvCmdItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.xbeecmd.XBeeAtRcvCmd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXBeeAtRcvCmdAdapter() {
		if (xBeeAtRcvCmdItemProvider == null) {
			xBeeAtRcvCmdItemProvider = new XBeeAtRcvCmdItemProvider(this);
		}

		return xBeeAtRcvCmdItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.xbeecmd.TxRequest16} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TxRequest16ItemProvider txRequest16ItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.xbeecmd.TxRequest16}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTxRequest16Adapter() {
		if (txRequest16ItemProvider == null) {
			txRequest16ItemProvider = new TxRequest16ItemProvider(this);
		}

		return txRequest16ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.xbeecmd.TxRequest64} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TxRequest64ItemProvider txRequest64ItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.xbeecmd.TxRequest64}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTxRequest64Adapter() {
		if (txRequest64ItemProvider == null) {
			txRequest64ItemProvider = new TxRequest64ItemProvider(this);
		}

		return txRequest64ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.xbeecmd.RxResponse16} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RxResponse16ItemProvider rxResponse16ItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.xbeecmd.RxResponse16}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRxResponse16Adapter() {
		if (rxResponse16ItemProvider == null) {
			rxResponse16ItemProvider = new RxResponse16ItemProvider(this);
		}

		return rxResponse16ItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link net.sf.smbt.xbeecmd.RxResponse64} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RxResponse64ItemProvider rxResponse64ItemProvider;

	/**
	 * This creates an adapter for a {@link net.sf.smbt.xbeecmd.RxResponse64}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRxResponse64Adapter() {
		if (rxResponse64ItemProvider == null) {
			rxResponse64ItemProvider = new RxResponse64ItemProvider(this);
		}

		return rxResponse64ItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (xBeeSndCmdItemProvider != null) xBeeSndCmdItemProvider.dispose();
		if (xBeeRcvCmdItemProvider != null) xBeeRcvCmdItemProvider.dispose();
		if (xBeeAtSndCmdItemProvider != null) xBeeAtSndCmdItemProvider.dispose();
		if (xBeeAtRcvCmdItemProvider != null) xBeeAtRcvCmdItemProvider.dispose();
		if (txRequest16ItemProvider != null) txRequest16ItemProvider.dispose();
		if (txRequest64ItemProvider != null) txRequest64ItemProvider.dispose();
		if (rxResponse16ItemProvider != null) rxResponse16ItemProvider.dispose();
		if (rxResponse64ItemProvider != null) rxResponse64ItemProvider.dispose();
	}

}
