/***********************************************************************************
 * Ubiquisense - A smart ambient utilities framework 
 * 
 * Copyright (c) 2008 - 2012, Lucas Bigeardel
 * 
 * The library is released under:
 * 
 * A) LGPL
 * 
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 3 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General
 * Public License along with this library; if not, write to the
 * Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
 * Boston, MA 02110-1301 USA
 * 
 * B) EPL
 * 
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Lucas Bigeardel <lucas.bigeardel@gmail.com> - Initial API and implementation
 ***********************************************************************************/

grammar net.sf.smbt.osc.OscDsl with org.eclipse.xtext.xbase.Xbase

generate oscDsl "http://www.sf.net/smbt/osc/OscDsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes
import "http://www.eclipse.org/xtext/xbase/Xbase" as xbase

EzModel:
	cmd=EzCmd | msg+=(EzMsg)* /* |  mdl=ExprModel */
;

EzCmd:
	cmd = (
		EzOpenCmd |
		EzCloseCmd |
		EzHookCmd |
		EzUnhookCmd |
		EzAliasCmd |
		EzStatusCmd |
		EzListCmd |
		EzHelpCmd |
		EzClearCmd |
		EzResetCmd |
		EzProtocolCmd
	)
;

EzOpenCmd :
	'open' (
		targets+=(	
			OSCUDPTarget		| 
			OSCTCPTarget		|
			OSCUSBTarget		|
			OSCXBeeTarget		|
			OSCHttpTarget		|
			OSCBluetoothTarget
		)
	)
;

EzCloseCmd :
	'close' (
		targets+=(	
			OSCUDPTarget		| 
			OSCTCPTarget		|
			OSCUSBTarget		|
			OSCXBeeTarget		|
			OSCHttpTarget		|
			OSCBluetoothTarget
		)
	)
;

EzHookCmd :
	'hook' (
		targets+=(	
			OSCUDPTarget		| 
			OSCTCPTarget		|
			OSCUSBTarget		|
			OSCXBeeTarget		|
			OSCHttpTarget		|
			OSCBluetoothTarget
		)
	)
;

EzUnhookCmd:
	'unhook' (
		targets+=(	
			OSCUDPTarget		| 
			OSCTCPTarget		|
			OSCUSBTarget		|
			OSCXBeeTarget		|
			OSCHttpTarget		|
			OSCBluetoothTarget
		)
	)
;

EzAliasCmd:
	'alias' alias=ID (
		targets+=(	
			OSCUDPTarget		| 
			OSCTCPTarget		|
			OSCUSBTarget		|
			OSCXBeeTarget		|
			OSCHttpTarget		|
			OSCBluetoothTarget
		)
	)
;

EzStatusCmd:
	'status' (
		targets+=(	
			OSCUDPTarget		| 
			OSCTCPTarget		|
			OSCUSBTarget		|
			OSCXBeeTarget		|
			OSCHttpTarget		|
			OSCBluetoothTarget
		)
	)
;

EzResetCmd:
	id='reset' (verbose='-v')?
;

EzHelpCmd:
	id='help' (verbose='-v')?
;

EzClearCmd:
	id='clear' (verbose='-v')?
;

EzProtocolCmd:
	id='protocol' (verbose='-v')?
;

EzListCmd:
	'list' addr=[EzAliasCmd]
;

EzMsg:
	msg=(
		EzMsgLegacySet	|
		EzMsgBang 		|
		EzMsgBind 		|
		EzMsgClock 		|
		EzMsgForward 	|
		EzMsgGet 		|
		EzMsgListen 	|
		EzMsgRemove 	|
		EzMsgSelect 	|
		EzMsgService 	|
		EzMsgSet 		|
		EzMsgUnforward 	|
		EzMsgUnlisten 	|
		EzMsgKinematics
	) | OSCSubDomain
;

EzMsgRemove:
	('remove'|'-') cmd=OSCExpr  
;

EzMsgGet:
	('get'|':') cmd=OSCExpr  
;

EzMsgBind:
	('bind'|'=') cmd=OSCExpr  
;

EzMsgListen:
	('listen'|'!') cmd=OSCExpr  
;

EzMsgService:
	('api'|'$') cmd=OSCExpr  
;

EzMsgUnlisten:
	('unlisten'|'#') cmd=OSCExpr  
;

EzMsgCmd:
	('command'|'%') cmd=OSCExpr
;

EzMsgClock:
	('clock'|'&') cmd=OSCExpr  
;

EzMsgToggle:
	('toggle'|')') cmd=OSCExpr
;

EzMsgBang:
	('bang'|'@') cmd=OSCExpr  
;

EzMsgUnforward:
	('unforward'|'<') cmd=OSCExpr  
;

EzMsgForward:
	('>'|'forward') cmd=OSCExpr  
;

EzMsgSet:
	('set'|'+') cmd=OSCExpr  
;

EzMsgLegacySet:
	cmd=OSCExpr  
;

EzMsgSelect:
	('select'|'.') cmd=OSCExpr  
;

EzMsgKinematics:
	('kinematic'|'k') cmd=OSCExpr
;

EzMsgTrigger:
	('trigger'|'T') cmd=OSCExpr
;

OSCExpr:
	(path=OSCAddr (args += OSCArg)* (
		targets+=(	
			OSCUDPTarget		| 
			OSCTCPTarget		|
			OSCUSBTarget		|
			OSCXBeeTarget		|
			OSCHttpTarget		|
			OSCBluetoothTarget
		)
	)?) 
;

OSCSubDomain:
	 '{' expr=EzMsg '}' 
;

terminal OSCAddr returns ecore::EString:
	(('/'('a'..'z'|'A'..'Z'))('a'..'z'|'A'..'Z'|'0'..'9')*)+
;


OSCArg:
	einteger	| 
	efloat		| 
	STRING		| 
	eboolean    
;



OSCUDPTarget:
	proto='udp://' addr=IPExpr ('<'format=EzFormats'>')?
;

OSCTCPTarget:
	proto='tcp://' addr=IPExpr ('<'format=EzFormats'>')?
;

OSCXBeeTarget:
	proto='xbee://' addr=IPExpr ('<'format=EzFormats'>')?
;

OSCHttpTarget:
	proto='http://' addr=IPExpr ('<'format=EzFormats'>')?
;

OSCBluetoothTarget:
	proto='bt://' addr=IPExpr ('<'format=EzFormats'>')?
;

OSCUSBTarget:
	proto='usb://' addr=(OSCUSBLinuxMacAddr|USBWinPort) ('@'speed=Speed)? ('<'format=EzFormats'>')?
;

OSCUbqTarget:
	proto='midi://' addr=(OSCUSBLinuxMacAddr|USBWinPort) ('<'format=EzFormats'>')?
;

terminal OSCUSBLinuxMacAddr returns ecore::EString:
	(('/'('a'..'z'|'A'..'Z'))('a'..'z'|'A'..'Z'|'0'..'9'|'.'|'-')*)+
;

enum EzFormats:
	osc |
	midi |
	dmx |
	oscableton |
	oscwiimote |
	oscresolume |
	tuio |
	tuio2 |
	thingm |
	firmata |
	i2cfirmata |
	pachube |
	ubiquino
;

terminal USBWinPort returns ecore::EString:
	'COM0'	|
	'COM1'	|
	'COM2'	|
	'COM3'	|
	'COM4'	|
	'COM5'	|
	'COM6'	|
	'COM7'	|
	'COM8'	|
	'COM9'	|
	'COM10'	|
	'COM11'	|
	'COM12'	|
	'COM13'	|
	'COM14'	|
	'COM15'	|
	'COM16'	|
	'COM17'	|
	'COM18'	|
	'COM19'	|
	'COM20'
;

terminal IPExpr returns ecore::EString:
	((('0'..'9')|'*'|'.')+|'localhost')?(':'INT)?
;

Speed:
	speed = ('300' | '1200' | '2400' | '4800' | '9600' | '14400' | '19200' | '28800' | '38400' | '57600' | '115200')
;

terminal httpAddr returns ecore::EString:
	(('A'..'Z')('0'..'9')':''.''/')
;

terminal usbmac returns ecore::EString:
	('A'..'Z')(('A'..'Z')('0'..'9')'-')+
;

terminal ebyte returns ecore::EByteObject:
	('0x'(('0'..'9')|('A'..'F'))(('0'..'9')|('A'..'F'))) | 
	(('0'..'9')|(('1'..'9')('0'..'9')) | 
	('1'('0'..'9')('0'..'9'))|('2'('0'..'5')('0'..'5')))
;

terminal eblob returns ecore::ECharacterObject:
	'b'
;

terminal eimpulse returns ecore::ECharacterObject:
	'I'
;

terminal etimetag returns ecore::ECharacterObject:
	't'
;

terminal enull returns ecore::ECharacterObject:
	'N'
;

terminal eboolean returns ecore::EBooleanObject:
	('T'|'F')
;

terminal efloat returns ecore::EFloatObject:
	('0'..'9')*'.'('0'..'9')+'f'
;

terminal einteger returns ecore::EIntegerObject:
	('0'..'9')+'i'
;


//
//
//

JvmVar:
'jvar' name=ID 'as'
 javaTypes+=[jvmTypes::JvmType|QualifiedName]
 (',' javaTypes+=[jvmTypes::JvmType|QualifiedName])* '!'
;

QualifiedName: ID ('.' ID)* ;

//
//
//

ExprModel:
	(isTested?="tested")? "model" name=ID
	(usings+=Using)*
	(elements+=Element | functions+=FunctionDeclaration)*;
	
Using:
	"using" importedNamespace=ImportID;
	
// ... and ID with .* at the end.
ImportID:
	ID ('.' '*');	
	
Element:
	VarDecl | Formula | EnumDecl | Return;
	
FunctionDeclaration returns Symbol:
	{FunctionDeclaration} "function" type=Type name=ID "(" 
		(params+=Parameter  ("," params+=Parameter)* )?  ")" "{"		// FUNC
		(elements+=Element)*
	"}";	
	
Return:
	"return" expr=Expr ";";	
	
Parameter returns Symbol:
	{Parameter} type=Type name=ID;
	
EnumDecl:	
	"enum" name=ID "{"
		(literals+=EnumLiteral)*
	"}";
	
EnumLiteral returns Symbol:
	{EnumLiteral} name=ID;

	
VarDecl returns Symbol:
	{VarDecl} (readonly?="readonly")? "var" type=Type name=ID ("=" init=Expr)? ";";

Type:
	PrimitiveType | ArrayType;
	
PrimitiveType:
	IntType | BoolType | FloatType | EnumType | StringType; 
	
ArrayType:
	{ArrayType} "array" "[" baseType=Type "]";
	
EnumType:
	 enumRef=[EnumDecl];
	
IntType:
	 {IntType} "int";
	
BoolType:
	{BoolType} "bool";

FloatType:
	{FloatType} "float";

StringType:
	{StringType} "string";

Formula returns Symbol:
	{Formula} "calc" type=Type name=ID "=" expr=Expr ";";
	
Expr:
	Comparison;

Comparison returns Expression:
	Addition ({Equals.left=current}"==" right=Addition)?;
	
Addition returns Expression:
	Multiplication ({Plus.left=current}"+" right=Multiplication)*;
	
Multiplication returns Expression:
	PostfixOperators ( {Multi.left=current} "*" right=PostfixOperators)*; 
	
PostfixOperators returns Expression:
	Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?;
	
Atomic returns Expression:
	{SymbolRef} symbol=[Symbol|QID] ("(" (actuals+=Expr)? ("," actuals+=Expr)* ")")? |	// FUNC
	{NumberLiteral} value=efloat | 
	{StringLiteral} value=STRING;
	
QID:
	ID ("." ID)*;

terminal INT returns ecore::EInt: 
	"$$$don't use this anymore$$$";

