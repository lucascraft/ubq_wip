/*
* generated by Xtext
*/

package net.sf.smbt.osc.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.xbase.services.XbaseGrammarAccess;
import org.eclipse.xtext.xbase.services.XtypeGrammarAccess;

@Singleton
public class OscDslGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EzModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzModel");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cCmdAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cCmdEzCmdParserRuleCall_0_0 = (RuleCall)cCmdAssignment_0.eContents().get(0);
		private final Assignment cMsgAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cMsgEzMsgParserRuleCall_1_0 = (RuleCall)cMsgAssignment_1.eContents().get(0);
		
		//EzModel:
		//	cmd=EzCmd | / * |  mdl=ExprModel * / msg+=EzMsg*;
		public ParserRule getRule() { return rule; }

		//cmd=EzCmd | / * |  mdl=ExprModel * / msg+=EzMsg*
		public Alternatives getAlternatives() { return cAlternatives; }

		//cmd=EzCmd
		public Assignment getCmdAssignment_0() { return cCmdAssignment_0; }

		//EzCmd
		public RuleCall getCmdEzCmdParserRuleCall_0_0() { return cCmdEzCmdParserRuleCall_0_0; }

		/// * |  mdl=ExprModel * / msg+=EzMsg*
		public Assignment getMsgAssignment_1() { return cMsgAssignment_1; }

		//EzMsg
		public RuleCall getMsgEzMsgParserRuleCall_1_0() { return cMsgEzMsgParserRuleCall_1_0; }
	}

	public class EzCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzCmd");
		private final Assignment cCmdAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cCmdAlternatives_0 = (Alternatives)cCmdAssignment.eContents().get(0);
		private final RuleCall cCmdEzOpenCmdParserRuleCall_0_0 = (RuleCall)cCmdAlternatives_0.eContents().get(0);
		private final RuleCall cCmdEzCloseCmdParserRuleCall_0_1 = (RuleCall)cCmdAlternatives_0.eContents().get(1);
		private final RuleCall cCmdEzHookCmdParserRuleCall_0_2 = (RuleCall)cCmdAlternatives_0.eContents().get(2);
		private final RuleCall cCmdEzUnhookCmdParserRuleCall_0_3 = (RuleCall)cCmdAlternatives_0.eContents().get(3);
		private final RuleCall cCmdEzAliasCmdParserRuleCall_0_4 = (RuleCall)cCmdAlternatives_0.eContents().get(4);
		private final RuleCall cCmdEzStatusCmdParserRuleCall_0_5 = (RuleCall)cCmdAlternatives_0.eContents().get(5);
		private final RuleCall cCmdEzListCmdParserRuleCall_0_6 = (RuleCall)cCmdAlternatives_0.eContents().get(6);
		private final RuleCall cCmdEzHelpCmdParserRuleCall_0_7 = (RuleCall)cCmdAlternatives_0.eContents().get(7);
		private final RuleCall cCmdEzClearCmdParserRuleCall_0_8 = (RuleCall)cCmdAlternatives_0.eContents().get(8);
		private final RuleCall cCmdEzResetCmdParserRuleCall_0_9 = (RuleCall)cCmdAlternatives_0.eContents().get(9);
		private final RuleCall cCmdEzProtocolCmdParserRuleCall_0_10 = (RuleCall)cCmdAlternatives_0.eContents().get(10);
		
		//EzCmd:
		//	cmd=(EzOpenCmd | EzCloseCmd | EzHookCmd | EzUnhookCmd | EzAliasCmd | EzStatusCmd | EzListCmd | EzHelpCmd | EzClearCmd
		//	| EzResetCmd | EzProtocolCmd);
		public ParserRule getRule() { return rule; }

		//cmd=(EzOpenCmd | EzCloseCmd | EzHookCmd | EzUnhookCmd | EzAliasCmd | EzStatusCmd | EzListCmd | EzHelpCmd | EzClearCmd |
		//EzResetCmd | EzProtocolCmd)
		public Assignment getCmdAssignment() { return cCmdAssignment; }

		//EzOpenCmd | EzCloseCmd | EzHookCmd | EzUnhookCmd | EzAliasCmd | EzStatusCmd | EzListCmd | EzHelpCmd | EzClearCmd |
		//EzResetCmd | EzProtocolCmd
		public Alternatives getCmdAlternatives_0() { return cCmdAlternatives_0; }

		//EzOpenCmd
		public RuleCall getCmdEzOpenCmdParserRuleCall_0_0() { return cCmdEzOpenCmdParserRuleCall_0_0; }

		//EzCloseCmd
		public RuleCall getCmdEzCloseCmdParserRuleCall_0_1() { return cCmdEzCloseCmdParserRuleCall_0_1; }

		//EzHookCmd
		public RuleCall getCmdEzHookCmdParserRuleCall_0_2() { return cCmdEzHookCmdParserRuleCall_0_2; }

		//EzUnhookCmd
		public RuleCall getCmdEzUnhookCmdParserRuleCall_0_3() { return cCmdEzUnhookCmdParserRuleCall_0_3; }

		//EzAliasCmd
		public RuleCall getCmdEzAliasCmdParserRuleCall_0_4() { return cCmdEzAliasCmdParserRuleCall_0_4; }

		//EzStatusCmd
		public RuleCall getCmdEzStatusCmdParserRuleCall_0_5() { return cCmdEzStatusCmdParserRuleCall_0_5; }

		//EzListCmd
		public RuleCall getCmdEzListCmdParserRuleCall_0_6() { return cCmdEzListCmdParserRuleCall_0_6; }

		//EzHelpCmd
		public RuleCall getCmdEzHelpCmdParserRuleCall_0_7() { return cCmdEzHelpCmdParserRuleCall_0_7; }

		//EzClearCmd
		public RuleCall getCmdEzClearCmdParserRuleCall_0_8() { return cCmdEzClearCmdParserRuleCall_0_8; }

		//EzResetCmd
		public RuleCall getCmdEzResetCmdParserRuleCall_0_9() { return cCmdEzResetCmdParserRuleCall_0_9; }

		//EzProtocolCmd
		public RuleCall getCmdEzProtocolCmdParserRuleCall_0_10() { return cCmdEzProtocolCmdParserRuleCall_0_10; }
	}

	public class EzOpenCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzOpenCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOpenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTargetsAlternatives_1_0 = (Alternatives)cTargetsAssignment_1.eContents().get(0);
		private final RuleCall cTargetsOSCUDPTargetParserRuleCall_1_0_0 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(0);
		private final RuleCall cTargetsOSCTCPTargetParserRuleCall_1_0_1 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(1);
		private final RuleCall cTargetsOSCUSBTargetParserRuleCall_1_0_2 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(2);
		private final RuleCall cTargetsOSCXBeeTargetParserRuleCall_1_0_3 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(3);
		private final RuleCall cTargetsOSCHttpTargetParserRuleCall_1_0_4 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(4);
		private final RuleCall cTargetsOSCBluetoothTargetParserRuleCall_1_0_5 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(5);
		
		//EzOpenCmd:
		//	"open" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
		public ParserRule getRule() { return rule; }

		//"open" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Group getGroup() { return cGroup; }

		//"open"
		public Keyword getOpenKeyword_0() { return cOpenKeyword_0; }

		//targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }

		//OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget
		public Alternatives getTargetsAlternatives_1_0() { return cTargetsAlternatives_1_0; }

		//OSCUDPTarget
		public RuleCall getTargetsOSCUDPTargetParserRuleCall_1_0_0() { return cTargetsOSCUDPTargetParserRuleCall_1_0_0; }

		//OSCTCPTarget
		public RuleCall getTargetsOSCTCPTargetParserRuleCall_1_0_1() { return cTargetsOSCTCPTargetParserRuleCall_1_0_1; }

		//OSCUSBTarget
		public RuleCall getTargetsOSCUSBTargetParserRuleCall_1_0_2() { return cTargetsOSCUSBTargetParserRuleCall_1_0_2; }

		//OSCXBeeTarget
		public RuleCall getTargetsOSCXBeeTargetParserRuleCall_1_0_3() { return cTargetsOSCXBeeTargetParserRuleCall_1_0_3; }

		//OSCHttpTarget
		public RuleCall getTargetsOSCHttpTargetParserRuleCall_1_0_4() { return cTargetsOSCHttpTargetParserRuleCall_1_0_4; }

		//OSCBluetoothTarget
		public RuleCall getTargetsOSCBluetoothTargetParserRuleCall_1_0_5() { return cTargetsOSCBluetoothTargetParserRuleCall_1_0_5; }
	}

	public class EzCloseCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzCloseCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCloseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTargetsAlternatives_1_0 = (Alternatives)cTargetsAssignment_1.eContents().get(0);
		private final RuleCall cTargetsOSCUDPTargetParserRuleCall_1_0_0 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(0);
		private final RuleCall cTargetsOSCTCPTargetParserRuleCall_1_0_1 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(1);
		private final RuleCall cTargetsOSCUSBTargetParserRuleCall_1_0_2 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(2);
		private final RuleCall cTargetsOSCXBeeTargetParserRuleCall_1_0_3 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(3);
		private final RuleCall cTargetsOSCHttpTargetParserRuleCall_1_0_4 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(4);
		private final RuleCall cTargetsOSCBluetoothTargetParserRuleCall_1_0_5 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(5);
		
		//EzCloseCmd:
		//	"close" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
		public ParserRule getRule() { return rule; }

		//"close" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Group getGroup() { return cGroup; }

		//"close"
		public Keyword getCloseKeyword_0() { return cCloseKeyword_0; }

		//targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }

		//OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget
		public Alternatives getTargetsAlternatives_1_0() { return cTargetsAlternatives_1_0; }

		//OSCUDPTarget
		public RuleCall getTargetsOSCUDPTargetParserRuleCall_1_0_0() { return cTargetsOSCUDPTargetParserRuleCall_1_0_0; }

		//OSCTCPTarget
		public RuleCall getTargetsOSCTCPTargetParserRuleCall_1_0_1() { return cTargetsOSCTCPTargetParserRuleCall_1_0_1; }

		//OSCUSBTarget
		public RuleCall getTargetsOSCUSBTargetParserRuleCall_1_0_2() { return cTargetsOSCUSBTargetParserRuleCall_1_0_2; }

		//OSCXBeeTarget
		public RuleCall getTargetsOSCXBeeTargetParserRuleCall_1_0_3() { return cTargetsOSCXBeeTargetParserRuleCall_1_0_3; }

		//OSCHttpTarget
		public RuleCall getTargetsOSCHttpTargetParserRuleCall_1_0_4() { return cTargetsOSCHttpTargetParserRuleCall_1_0_4; }

		//OSCBluetoothTarget
		public RuleCall getTargetsOSCBluetoothTargetParserRuleCall_1_0_5() { return cTargetsOSCBluetoothTargetParserRuleCall_1_0_5; }
	}

	public class EzHookCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzHookCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHookKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTargetsAlternatives_1_0 = (Alternatives)cTargetsAssignment_1.eContents().get(0);
		private final RuleCall cTargetsOSCUDPTargetParserRuleCall_1_0_0 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(0);
		private final RuleCall cTargetsOSCTCPTargetParserRuleCall_1_0_1 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(1);
		private final RuleCall cTargetsOSCUSBTargetParserRuleCall_1_0_2 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(2);
		private final RuleCall cTargetsOSCXBeeTargetParserRuleCall_1_0_3 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(3);
		private final RuleCall cTargetsOSCHttpTargetParserRuleCall_1_0_4 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(4);
		private final RuleCall cTargetsOSCBluetoothTargetParserRuleCall_1_0_5 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(5);
		
		//EzHookCmd:
		//	"hook" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
		public ParserRule getRule() { return rule; }

		//"hook" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Group getGroup() { return cGroup; }

		//"hook"
		public Keyword getHookKeyword_0() { return cHookKeyword_0; }

		//targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }

		//OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget
		public Alternatives getTargetsAlternatives_1_0() { return cTargetsAlternatives_1_0; }

		//OSCUDPTarget
		public RuleCall getTargetsOSCUDPTargetParserRuleCall_1_0_0() { return cTargetsOSCUDPTargetParserRuleCall_1_0_0; }

		//OSCTCPTarget
		public RuleCall getTargetsOSCTCPTargetParserRuleCall_1_0_1() { return cTargetsOSCTCPTargetParserRuleCall_1_0_1; }

		//OSCUSBTarget
		public RuleCall getTargetsOSCUSBTargetParserRuleCall_1_0_2() { return cTargetsOSCUSBTargetParserRuleCall_1_0_2; }

		//OSCXBeeTarget
		public RuleCall getTargetsOSCXBeeTargetParserRuleCall_1_0_3() { return cTargetsOSCXBeeTargetParserRuleCall_1_0_3; }

		//OSCHttpTarget
		public RuleCall getTargetsOSCHttpTargetParserRuleCall_1_0_4() { return cTargetsOSCHttpTargetParserRuleCall_1_0_4; }

		//OSCBluetoothTarget
		public RuleCall getTargetsOSCBluetoothTargetParserRuleCall_1_0_5() { return cTargetsOSCBluetoothTargetParserRuleCall_1_0_5; }
	}

	public class EzUnhookCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzUnhookCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUnhookKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTargetsAlternatives_1_0 = (Alternatives)cTargetsAssignment_1.eContents().get(0);
		private final RuleCall cTargetsOSCUDPTargetParserRuleCall_1_0_0 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(0);
		private final RuleCall cTargetsOSCTCPTargetParserRuleCall_1_0_1 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(1);
		private final RuleCall cTargetsOSCUSBTargetParserRuleCall_1_0_2 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(2);
		private final RuleCall cTargetsOSCXBeeTargetParserRuleCall_1_0_3 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(3);
		private final RuleCall cTargetsOSCHttpTargetParserRuleCall_1_0_4 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(4);
		private final RuleCall cTargetsOSCBluetoothTargetParserRuleCall_1_0_5 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(5);
		
		//EzUnhookCmd:
		//	"unhook" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
		public ParserRule getRule() { return rule; }

		//"unhook" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Group getGroup() { return cGroup; }

		//"unhook"
		public Keyword getUnhookKeyword_0() { return cUnhookKeyword_0; }

		//targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }

		//OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget
		public Alternatives getTargetsAlternatives_1_0() { return cTargetsAlternatives_1_0; }

		//OSCUDPTarget
		public RuleCall getTargetsOSCUDPTargetParserRuleCall_1_0_0() { return cTargetsOSCUDPTargetParserRuleCall_1_0_0; }

		//OSCTCPTarget
		public RuleCall getTargetsOSCTCPTargetParserRuleCall_1_0_1() { return cTargetsOSCTCPTargetParserRuleCall_1_0_1; }

		//OSCUSBTarget
		public RuleCall getTargetsOSCUSBTargetParserRuleCall_1_0_2() { return cTargetsOSCUSBTargetParserRuleCall_1_0_2; }

		//OSCXBeeTarget
		public RuleCall getTargetsOSCXBeeTargetParserRuleCall_1_0_3() { return cTargetsOSCXBeeTargetParserRuleCall_1_0_3; }

		//OSCHttpTarget
		public RuleCall getTargetsOSCHttpTargetParserRuleCall_1_0_4() { return cTargetsOSCHttpTargetParserRuleCall_1_0_4; }

		//OSCBluetoothTarget
		public RuleCall getTargetsOSCBluetoothTargetParserRuleCall_1_0_5() { return cTargetsOSCBluetoothTargetParserRuleCall_1_0_5; }
	}

	public class EzAliasCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzAliasCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAliasKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAliasAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAliasIDTerminalRuleCall_1_0 = (RuleCall)cAliasAssignment_1.eContents().get(0);
		private final Assignment cTargetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTargetsAlternatives_2_0 = (Alternatives)cTargetsAssignment_2.eContents().get(0);
		private final RuleCall cTargetsOSCUDPTargetParserRuleCall_2_0_0 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(0);
		private final RuleCall cTargetsOSCTCPTargetParserRuleCall_2_0_1 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(1);
		private final RuleCall cTargetsOSCUSBTargetParserRuleCall_2_0_2 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(2);
		private final RuleCall cTargetsOSCXBeeTargetParserRuleCall_2_0_3 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(3);
		private final RuleCall cTargetsOSCHttpTargetParserRuleCall_2_0_4 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(4);
		private final RuleCall cTargetsOSCBluetoothTargetParserRuleCall_2_0_5 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(5);
		
		//EzAliasCmd:
		//	"alias" alias=ID targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget |
		//	OSCBluetoothTarget);
		public ParserRule getRule() { return rule; }

		//"alias" alias=ID targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget |
		//OSCBluetoothTarget)
		public Group getGroup() { return cGroup; }

		//"alias"
		public Keyword getAliasKeyword_0() { return cAliasKeyword_0; }

		//alias=ID
		public Assignment getAliasAssignment_1() { return cAliasAssignment_1; }

		//ID
		public RuleCall getAliasIDTerminalRuleCall_1_0() { return cAliasIDTerminalRuleCall_1_0; }

		//targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Assignment getTargetsAssignment_2() { return cTargetsAssignment_2; }

		//OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget
		public Alternatives getTargetsAlternatives_2_0() { return cTargetsAlternatives_2_0; }

		//OSCUDPTarget
		public RuleCall getTargetsOSCUDPTargetParserRuleCall_2_0_0() { return cTargetsOSCUDPTargetParserRuleCall_2_0_0; }

		//OSCTCPTarget
		public RuleCall getTargetsOSCTCPTargetParserRuleCall_2_0_1() { return cTargetsOSCTCPTargetParserRuleCall_2_0_1; }

		//OSCUSBTarget
		public RuleCall getTargetsOSCUSBTargetParserRuleCall_2_0_2() { return cTargetsOSCUSBTargetParserRuleCall_2_0_2; }

		//OSCXBeeTarget
		public RuleCall getTargetsOSCXBeeTargetParserRuleCall_2_0_3() { return cTargetsOSCXBeeTargetParserRuleCall_2_0_3; }

		//OSCHttpTarget
		public RuleCall getTargetsOSCHttpTargetParserRuleCall_2_0_4() { return cTargetsOSCHttpTargetParserRuleCall_2_0_4; }

		//OSCBluetoothTarget
		public RuleCall getTargetsOSCBluetoothTargetParserRuleCall_2_0_5() { return cTargetsOSCBluetoothTargetParserRuleCall_2_0_5; }
	}

	public class EzStatusCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzStatusCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStatusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTargetsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cTargetsAlternatives_1_0 = (Alternatives)cTargetsAssignment_1.eContents().get(0);
		private final RuleCall cTargetsOSCUDPTargetParserRuleCall_1_0_0 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(0);
		private final RuleCall cTargetsOSCTCPTargetParserRuleCall_1_0_1 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(1);
		private final RuleCall cTargetsOSCUSBTargetParserRuleCall_1_0_2 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(2);
		private final RuleCall cTargetsOSCXBeeTargetParserRuleCall_1_0_3 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(3);
		private final RuleCall cTargetsOSCHttpTargetParserRuleCall_1_0_4 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(4);
		private final RuleCall cTargetsOSCBluetoothTargetParserRuleCall_1_0_5 = (RuleCall)cTargetsAlternatives_1_0.eContents().get(5);
		
		//EzStatusCmd:
		//	"status" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
		public ParserRule getRule() { return rule; }

		//"status" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Group getGroup() { return cGroup; }

		//"status"
		public Keyword getStatusKeyword_0() { return cStatusKeyword_0; }

		//targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)
		public Assignment getTargetsAssignment_1() { return cTargetsAssignment_1; }

		//OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget
		public Alternatives getTargetsAlternatives_1_0() { return cTargetsAlternatives_1_0; }

		//OSCUDPTarget
		public RuleCall getTargetsOSCUDPTargetParserRuleCall_1_0_0() { return cTargetsOSCUDPTargetParserRuleCall_1_0_0; }

		//OSCTCPTarget
		public RuleCall getTargetsOSCTCPTargetParserRuleCall_1_0_1() { return cTargetsOSCTCPTargetParserRuleCall_1_0_1; }

		//OSCUSBTarget
		public RuleCall getTargetsOSCUSBTargetParserRuleCall_1_0_2() { return cTargetsOSCUSBTargetParserRuleCall_1_0_2; }

		//OSCXBeeTarget
		public RuleCall getTargetsOSCXBeeTargetParserRuleCall_1_0_3() { return cTargetsOSCXBeeTargetParserRuleCall_1_0_3; }

		//OSCHttpTarget
		public RuleCall getTargetsOSCHttpTargetParserRuleCall_1_0_4() { return cTargetsOSCHttpTargetParserRuleCall_1_0_4; }

		//OSCBluetoothTarget
		public RuleCall getTargetsOSCBluetoothTargetParserRuleCall_1_0_5() { return cTargetsOSCBluetoothTargetParserRuleCall_1_0_5; }
	}

	public class EzResetCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzResetCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdResetKeyword_0_0 = (Keyword)cIdAssignment_0.eContents().get(0);
		private final Assignment cVerboseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVerboseVKeyword_1_0 = (Keyword)cVerboseAssignment_1.eContents().get(0);
		
		//EzResetCmd:
		//	id="reset" verbose="-v"?;
		public ParserRule getRule() { return rule; }

		//id="reset" verbose="-v"?
		public Group getGroup() { return cGroup; }

		//id="reset"
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//"reset"
		public Keyword getIdResetKeyword_0_0() { return cIdResetKeyword_0_0; }

		//verbose="-v"?
		public Assignment getVerboseAssignment_1() { return cVerboseAssignment_1; }

		//"-v"
		public Keyword getVerboseVKeyword_1_0() { return cVerboseVKeyword_1_0; }
	}

	public class EzHelpCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzHelpCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdHelpKeyword_0_0 = (Keyword)cIdAssignment_0.eContents().get(0);
		private final Assignment cVerboseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVerboseVKeyword_1_0 = (Keyword)cVerboseAssignment_1.eContents().get(0);
		
		//EzHelpCmd:
		//	id="help" verbose="-v"?;
		public ParserRule getRule() { return rule; }

		//id="help" verbose="-v"?
		public Group getGroup() { return cGroup; }

		//id="help"
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//"help"
		public Keyword getIdHelpKeyword_0_0() { return cIdHelpKeyword_0_0; }

		//verbose="-v"?
		public Assignment getVerboseAssignment_1() { return cVerboseAssignment_1; }

		//"-v"
		public Keyword getVerboseVKeyword_1_0() { return cVerboseVKeyword_1_0; }
	}

	public class EzClearCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzClearCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdClearKeyword_0_0 = (Keyword)cIdAssignment_0.eContents().get(0);
		private final Assignment cVerboseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVerboseVKeyword_1_0 = (Keyword)cVerboseAssignment_1.eContents().get(0);
		
		//EzClearCmd:
		//	id="clear" verbose="-v"?;
		public ParserRule getRule() { return rule; }

		//id="clear" verbose="-v"?
		public Group getGroup() { return cGroup; }

		//id="clear"
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//"clear"
		public Keyword getIdClearKeyword_0_0() { return cIdClearKeyword_0_0; }

		//verbose="-v"?
		public Assignment getVerboseAssignment_1() { return cVerboseAssignment_1; }

		//"-v"
		public Keyword getVerboseVKeyword_1_0() { return cVerboseVKeyword_1_0; }
	}

	public class EzProtocolCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzProtocolCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIdProtocolKeyword_0_0 = (Keyword)cIdAssignment_0.eContents().get(0);
		private final Assignment cVerboseAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cVerboseVKeyword_1_0 = (Keyword)cVerboseAssignment_1.eContents().get(0);
		
		//EzProtocolCmd:
		//	id="protocol" verbose="-v"?;
		public ParserRule getRule() { return rule; }

		//id="protocol" verbose="-v"?
		public Group getGroup() { return cGroup; }

		//id="protocol"
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//"protocol"
		public Keyword getIdProtocolKeyword_0_0() { return cIdProtocolKeyword_0_0; }

		//verbose="-v"?
		public Assignment getVerboseAssignment_1() { return cVerboseAssignment_1; }

		//"-v"
		public Keyword getVerboseVKeyword_1_0() { return cVerboseVKeyword_1_0; }
	}

	public class EzListCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzListCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cListKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cAddrEzAliasCmdCrossReference_1_0 = (CrossReference)cAddrAssignment_1.eContents().get(0);
		private final RuleCall cAddrEzAliasCmdIDTerminalRuleCall_1_0_1 = (RuleCall)cAddrEzAliasCmdCrossReference_1_0.eContents().get(1);
		
		//EzListCmd:
		//	"list" addr=[EzAliasCmd];
		public ParserRule getRule() { return rule; }

		//"list" addr=[EzAliasCmd]
		public Group getGroup() { return cGroup; }

		//"list"
		public Keyword getListKeyword_0() { return cListKeyword_0; }

		//addr=[EzAliasCmd]
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }

		//[EzAliasCmd]
		public CrossReference getAddrEzAliasCmdCrossReference_1_0() { return cAddrEzAliasCmdCrossReference_1_0; }

		//ID
		public RuleCall getAddrEzAliasCmdIDTerminalRuleCall_1_0_1() { return cAddrEzAliasCmdIDTerminalRuleCall_1_0_1; }
	}

	public class EzMsgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cMsgAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Alternatives cMsgAlternatives_0_0 = (Alternatives)cMsgAssignment_0.eContents().get(0);
		private final RuleCall cMsgEzMsgLegacySetParserRuleCall_0_0_0 = (RuleCall)cMsgAlternatives_0_0.eContents().get(0);
		private final RuleCall cMsgEzMsgBangParserRuleCall_0_0_1 = (RuleCall)cMsgAlternatives_0_0.eContents().get(1);
		private final RuleCall cMsgEzMsgBindParserRuleCall_0_0_2 = (RuleCall)cMsgAlternatives_0_0.eContents().get(2);
		private final RuleCall cMsgEzMsgClockParserRuleCall_0_0_3 = (RuleCall)cMsgAlternatives_0_0.eContents().get(3);
		private final RuleCall cMsgEzMsgForwardParserRuleCall_0_0_4 = (RuleCall)cMsgAlternatives_0_0.eContents().get(4);
		private final RuleCall cMsgEzMsgGetParserRuleCall_0_0_5 = (RuleCall)cMsgAlternatives_0_0.eContents().get(5);
		private final RuleCall cMsgEzMsgListenParserRuleCall_0_0_6 = (RuleCall)cMsgAlternatives_0_0.eContents().get(6);
		private final RuleCall cMsgEzMsgRemoveParserRuleCall_0_0_7 = (RuleCall)cMsgAlternatives_0_0.eContents().get(7);
		private final RuleCall cMsgEzMsgSelectParserRuleCall_0_0_8 = (RuleCall)cMsgAlternatives_0_0.eContents().get(8);
		private final RuleCall cMsgEzMsgServiceParserRuleCall_0_0_9 = (RuleCall)cMsgAlternatives_0_0.eContents().get(9);
		private final RuleCall cMsgEzMsgSetParserRuleCall_0_0_10 = (RuleCall)cMsgAlternatives_0_0.eContents().get(10);
		private final RuleCall cMsgEzMsgUnforwardParserRuleCall_0_0_11 = (RuleCall)cMsgAlternatives_0_0.eContents().get(11);
		private final RuleCall cMsgEzMsgUnlistenParserRuleCall_0_0_12 = (RuleCall)cMsgAlternatives_0_0.eContents().get(12);
		private final RuleCall cMsgEzMsgKinematicsParserRuleCall_0_0_13 = (RuleCall)cMsgAlternatives_0_0.eContents().get(13);
		private final RuleCall cOSCSubDomainParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EzMsg:
		//	msg=(EzMsgLegacySet | EzMsgBang | EzMsgBind | EzMsgClock | EzMsgForward | EzMsgGet | EzMsgListen | EzMsgRemove |
		//	EzMsgSelect | EzMsgService | EzMsgSet | EzMsgUnforward | EzMsgUnlisten | EzMsgKinematics) | OSCSubDomain;
		public ParserRule getRule() { return rule; }

		//msg=(EzMsgLegacySet | EzMsgBang | EzMsgBind | EzMsgClock | EzMsgForward | EzMsgGet | EzMsgListen | EzMsgRemove |
		//EzMsgSelect | EzMsgService | EzMsgSet | EzMsgUnforward | EzMsgUnlisten | EzMsgKinematics) | OSCSubDomain
		public Alternatives getAlternatives() { return cAlternatives; }

		//msg=(EzMsgLegacySet | EzMsgBang | EzMsgBind | EzMsgClock | EzMsgForward | EzMsgGet | EzMsgListen | EzMsgRemove |
		//EzMsgSelect | EzMsgService | EzMsgSet | EzMsgUnforward | EzMsgUnlisten | EzMsgKinematics)
		public Assignment getMsgAssignment_0() { return cMsgAssignment_0; }

		//EzMsgLegacySet | EzMsgBang | EzMsgBind | EzMsgClock | EzMsgForward | EzMsgGet | EzMsgListen | EzMsgRemove | EzMsgSelect
		//| EzMsgService | EzMsgSet | EzMsgUnforward | EzMsgUnlisten | EzMsgKinematics
		public Alternatives getMsgAlternatives_0_0() { return cMsgAlternatives_0_0; }

		//EzMsgLegacySet
		public RuleCall getMsgEzMsgLegacySetParserRuleCall_0_0_0() { return cMsgEzMsgLegacySetParserRuleCall_0_0_0; }

		//EzMsgBang
		public RuleCall getMsgEzMsgBangParserRuleCall_0_0_1() { return cMsgEzMsgBangParserRuleCall_0_0_1; }

		//EzMsgBind
		public RuleCall getMsgEzMsgBindParserRuleCall_0_0_2() { return cMsgEzMsgBindParserRuleCall_0_0_2; }

		//EzMsgClock
		public RuleCall getMsgEzMsgClockParserRuleCall_0_0_3() { return cMsgEzMsgClockParserRuleCall_0_0_3; }

		//EzMsgForward
		public RuleCall getMsgEzMsgForwardParserRuleCall_0_0_4() { return cMsgEzMsgForwardParserRuleCall_0_0_4; }

		//EzMsgGet
		public RuleCall getMsgEzMsgGetParserRuleCall_0_0_5() { return cMsgEzMsgGetParserRuleCall_0_0_5; }

		//EzMsgListen
		public RuleCall getMsgEzMsgListenParserRuleCall_0_0_6() { return cMsgEzMsgListenParserRuleCall_0_0_6; }

		//EzMsgRemove
		public RuleCall getMsgEzMsgRemoveParserRuleCall_0_0_7() { return cMsgEzMsgRemoveParserRuleCall_0_0_7; }

		//EzMsgSelect
		public RuleCall getMsgEzMsgSelectParserRuleCall_0_0_8() { return cMsgEzMsgSelectParserRuleCall_0_0_8; }

		//EzMsgService
		public RuleCall getMsgEzMsgServiceParserRuleCall_0_0_9() { return cMsgEzMsgServiceParserRuleCall_0_0_9; }

		//EzMsgSet
		public RuleCall getMsgEzMsgSetParserRuleCall_0_0_10() { return cMsgEzMsgSetParserRuleCall_0_0_10; }

		//EzMsgUnforward
		public RuleCall getMsgEzMsgUnforwardParserRuleCall_0_0_11() { return cMsgEzMsgUnforwardParserRuleCall_0_0_11; }

		//EzMsgUnlisten
		public RuleCall getMsgEzMsgUnlistenParserRuleCall_0_0_12() { return cMsgEzMsgUnlistenParserRuleCall_0_0_12; }

		//EzMsgKinematics
		public RuleCall getMsgEzMsgKinematicsParserRuleCall_0_0_13() { return cMsgEzMsgKinematicsParserRuleCall_0_0_13; }

		//OSCSubDomain
		public RuleCall getOSCSubDomainParserRuleCall_1() { return cOSCSubDomainParserRuleCall_1; }
	}

	public class EzMsgRemoveElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgRemove");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cRemoveKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgRemove:
		//	("remove" | "-") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("remove" | "-") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"remove" | "-"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"remove"
		public Keyword getRemoveKeyword_0_0() { return cRemoveKeyword_0_0; }

		//"-"
		public Keyword getHyphenMinusKeyword_0_1() { return cHyphenMinusKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgGetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgGet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cGetKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cColonKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgGet:
		//	("get" | ":") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("get" | ":") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"get" | ":"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"get"
		public Keyword getGetKeyword_0_0() { return cGetKeyword_0_0; }

		//":"
		public Keyword getColonKeyword_0_1() { return cColonKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgBindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgBind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBindKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgBind:
		//	("bind" | "=") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("bind" | "=") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"bind" | "="
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"bind"
		public Keyword getBindKeyword_0_0() { return cBindKeyword_0_0; }

		//"="
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgListenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgListen");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cListenKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgListen:
		//	("listen" | "!") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("listen" | "!") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"listen" | "!"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"listen"
		public Keyword getListenKeyword_0_0() { return cListenKeyword_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgService");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cApiKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cDollarSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgService:
		//	("api" | "$") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("api" | "$") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"api" | "$"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"api"
		public Keyword getApiKeyword_0_0() { return cApiKeyword_0_0; }

		//"$"
		public Keyword getDollarSignKeyword_0_1() { return cDollarSignKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgUnlistenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgUnlisten");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUnlistenKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgUnlisten:
		//	("unlisten" | "#") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("unlisten" | "#") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"unlisten" | "#"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"unlisten"
		public Keyword getUnlistenKeyword_0_0() { return cUnlistenKeyword_0_0; }

		//"#"
		public Keyword getNumberSignKeyword_0_1() { return cNumberSignKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgCmdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgCmd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cCommandKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPercentSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgCmd:
		//	("command" | "%") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("command" | "%") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"command" | "%"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"command"
		public Keyword getCommandKeyword_0_0() { return cCommandKeyword_0_0; }

		//"%"
		public Keyword getPercentSignKeyword_0_1() { return cPercentSignKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgClockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgClock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cClockKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cAmpersandKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgClock:
		//	("clock" | "&") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("clock" | "&") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"clock" | "&"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"clock"
		public Keyword getClockKeyword_0_0() { return cClockKeyword_0_0; }

		//"&"
		public Keyword getAmpersandKeyword_0_1() { return cAmpersandKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgToggleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgToggle");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cToggleKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgToggle:
		//	("toggle" | ")") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("toggle" | ")") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"toggle" | ")"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"toggle"
		public Keyword getToggleKeyword_0_0() { return cToggleKeyword_0_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_1() { return cRightParenthesisKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgBangElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgBang");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cBangKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cCommercialAtKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgBang:
		//	("bang" | "@") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("bang" | "@") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"bang" | "@"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"bang"
		public Keyword getBangKeyword_0_0() { return cBangKeyword_0_0; }

		//"@"
		public Keyword getCommercialAtKeyword_0_1() { return cCommercialAtKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgUnforwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgUnforward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cUnforwardKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgUnforward:
		//	("unforward" | "<") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("unforward" | "<") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"unforward" | "<"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"unforward"
		public Keyword getUnforwardKeyword_0_0() { return cUnforwardKeyword_0_0; }

		//"<"
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgForwardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgForward");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cForwardKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgForward:
		//	(">" | "forward") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//(">" | "forward") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//">" | "forward"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_0_0() { return cGreaterThanSignKeyword_0_0; }

		//"forward"
		public Keyword getForwardKeyword_0_1() { return cForwardKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSetKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cPlusSignKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgSet:
		//	("set" | "+") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("set" | "+") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"set" | "+"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"set"
		public Keyword getSetKeyword_0_0() { return cSetKeyword_0_0; }

		//"+"
		public Keyword getPlusSignKeyword_0_1() { return cPlusSignKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgLegacySetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgLegacySet");
		private final Assignment cCmdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_0 = (RuleCall)cCmdAssignment.eContents().get(0);
		
		//EzMsgLegacySet:
		//	cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment() { return cCmdAssignment; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_0() { return cCmdOSCExprParserRuleCall_0; }
	}

	public class EzMsgSelectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgSelect");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cSelectKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cFullStopKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgSelect:
		//	("select" | ".") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("select" | ".") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"select" | "."
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"select"
		public Keyword getSelectKeyword_0_0() { return cSelectKeyword_0_0; }

		//"."
		public Keyword getFullStopKeyword_0_1() { return cFullStopKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgKinematicsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgKinematics");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cKinematicKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cKKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgKinematics:
		//	("kinematic" | "k") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("kinematic" | "k") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"kinematic" | "k"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"kinematic"
		public Keyword getKinematicKeyword_0_0() { return cKinematicKeyword_0_0; }

		//"k"
		public Keyword getKKeyword_0_1() { return cKKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class EzMsgTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EzMsgTrigger");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cTriggerKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Keyword cTKeyword_0_1 = (Keyword)cAlternatives_0.eContents().get(1);
		private final Assignment cCmdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCmdOSCExprParserRuleCall_1_0 = (RuleCall)cCmdAssignment_1.eContents().get(0);
		
		//EzMsgTrigger:
		//	("trigger" | "T") cmd=OSCExpr;
		public ParserRule getRule() { return rule; }

		//("trigger" | "T") cmd=OSCExpr
		public Group getGroup() { return cGroup; }

		//"trigger" | "T"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"trigger"
		public Keyword getTriggerKeyword_0_0() { return cTriggerKeyword_0_0; }

		//"T"
		public Keyword getTKeyword_0_1() { return cTKeyword_0_1; }

		//cmd=OSCExpr
		public Assignment getCmdAssignment_1() { return cCmdAssignment_1; }

		//OSCExpr
		public RuleCall getCmdOSCExprParserRuleCall_1_0() { return cCmdOSCExprParserRuleCall_1_0; }
	}

	public class OSCExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPathAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPathOSCAddrTerminalRuleCall_0_0 = (RuleCall)cPathAssignment_0.eContents().get(0);
		private final Assignment cArgsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cArgsOSCArgParserRuleCall_1_0 = (RuleCall)cArgsAssignment_1.eContents().get(0);
		private final Assignment cTargetsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cTargetsAlternatives_2_0 = (Alternatives)cTargetsAssignment_2.eContents().get(0);
		private final RuleCall cTargetsOSCUDPTargetParserRuleCall_2_0_0 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(0);
		private final RuleCall cTargetsOSCTCPTargetParserRuleCall_2_0_1 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(1);
		private final RuleCall cTargetsOSCUSBTargetParserRuleCall_2_0_2 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(2);
		private final RuleCall cTargetsOSCXBeeTargetParserRuleCall_2_0_3 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(3);
		private final RuleCall cTargetsOSCHttpTargetParserRuleCall_2_0_4 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(4);
		private final RuleCall cTargetsOSCBluetoothTargetParserRuleCall_2_0_5 = (RuleCall)cTargetsAlternatives_2_0.eContents().get(5);
		
		//OSCExpr:
		//	path=OSCAddr args+=OSCArg* targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget |
		//	OSCBluetoothTarget)?;
		public ParserRule getRule() { return rule; }

		//path=OSCAddr args+=OSCArg* targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget |
		//OSCBluetoothTarget)?
		public Group getGroup() { return cGroup; }

		//path=OSCAddr
		public Assignment getPathAssignment_0() { return cPathAssignment_0; }

		//OSCAddr
		public RuleCall getPathOSCAddrTerminalRuleCall_0_0() { return cPathOSCAddrTerminalRuleCall_0_0; }

		//args+=OSCArg*
		public Assignment getArgsAssignment_1() { return cArgsAssignment_1; }

		//OSCArg
		public RuleCall getArgsOSCArgParserRuleCall_1_0() { return cArgsOSCArgParserRuleCall_1_0; }

		//targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget)?
		public Assignment getTargetsAssignment_2() { return cTargetsAssignment_2; }

		//OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget
		public Alternatives getTargetsAlternatives_2_0() { return cTargetsAlternatives_2_0; }

		//OSCUDPTarget
		public RuleCall getTargetsOSCUDPTargetParserRuleCall_2_0_0() { return cTargetsOSCUDPTargetParserRuleCall_2_0_0; }

		//OSCTCPTarget
		public RuleCall getTargetsOSCTCPTargetParserRuleCall_2_0_1() { return cTargetsOSCTCPTargetParserRuleCall_2_0_1; }

		//OSCUSBTarget
		public RuleCall getTargetsOSCUSBTargetParserRuleCall_2_0_2() { return cTargetsOSCUSBTargetParserRuleCall_2_0_2; }

		//OSCXBeeTarget
		public RuleCall getTargetsOSCXBeeTargetParserRuleCall_2_0_3() { return cTargetsOSCXBeeTargetParserRuleCall_2_0_3; }

		//OSCHttpTarget
		public RuleCall getTargetsOSCHttpTargetParserRuleCall_2_0_4() { return cTargetsOSCHttpTargetParserRuleCall_2_0_4; }

		//OSCBluetoothTarget
		public RuleCall getTargetsOSCBluetoothTargetParserRuleCall_2_0_5() { return cTargetsOSCBluetoothTargetParserRuleCall_2_0_5; }
	}

	public class OSCSubDomainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCSubDomain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprEzMsgParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//OSCSubDomain:
		//	"{" expr=EzMsg "}";
		public ParserRule getRule() { return rule; }

		//"{" expr=EzMsg "}"
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//expr=EzMsg
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//EzMsg
		public RuleCall getExprEzMsgParserRuleCall_1_0() { return cExprEzMsgParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }
	}

	public class OSCArgElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCArg");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEintegerTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cEfloatTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEbooleanTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//OSCArg:
		//	einteger | efloat | STRING | eboolean;
		public ParserRule getRule() { return rule; }

		//einteger | efloat | STRING | eboolean
		public Alternatives getAlternatives() { return cAlternatives; }

		//einteger
		public RuleCall getEintegerTerminalRuleCall_0() { return cEintegerTerminalRuleCall_0; }

		//efloat
		public RuleCall getEfloatTerminalRuleCall_1() { return cEfloatTerminalRuleCall_1; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }

		//eboolean
		public RuleCall getEbooleanTerminalRuleCall_3() { return cEbooleanTerminalRuleCall_3; }
	}

	public class OSCUDPTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCUDPTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtoUdpKeyword_0_0 = (Keyword)cProtoAssignment_0.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddrIPExprTerminalRuleCall_1_0 = (RuleCall)cAddrAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormatEzFormatsEnumRuleCall_2_1_0 = (RuleCall)cFormatAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//OSCUDPTarget:
		//	proto="udp://" addr=IPExpr ("<" format=EzFormats ">")?;
		public ParserRule getRule() { return rule; }

		//proto="udp://" addr=IPExpr ("<" format=EzFormats ">")?
		public Group getGroup() { return cGroup; }

		//proto="udp://"
		public Assignment getProtoAssignment_0() { return cProtoAssignment_0; }

		//"udp://"
		public Keyword getProtoUdpKeyword_0_0() { return cProtoUdpKeyword_0_0; }

		//addr=IPExpr
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }

		//IPExpr
		public RuleCall getAddrIPExprTerminalRuleCall_1_0() { return cAddrIPExprTerminalRuleCall_1_0; }

		//("<" format=EzFormats ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//format=EzFormats
		public Assignment getFormatAssignment_2_1() { return cFormatAssignment_2_1; }

		//EzFormats
		public RuleCall getFormatEzFormatsEnumRuleCall_2_1_0() { return cFormatEzFormatsEnumRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}

	public class OSCTCPTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCTCPTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtoTcpKeyword_0_0 = (Keyword)cProtoAssignment_0.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddrIPExprTerminalRuleCall_1_0 = (RuleCall)cAddrAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormatEzFormatsEnumRuleCall_2_1_0 = (RuleCall)cFormatAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//OSCTCPTarget:
		//	proto="tcp://" addr=IPExpr ("<" format=EzFormats ">")?;
		public ParserRule getRule() { return rule; }

		//proto="tcp://" addr=IPExpr ("<" format=EzFormats ">")?
		public Group getGroup() { return cGroup; }

		//proto="tcp://"
		public Assignment getProtoAssignment_0() { return cProtoAssignment_0; }

		//"tcp://"
		public Keyword getProtoTcpKeyword_0_0() { return cProtoTcpKeyword_0_0; }

		//addr=IPExpr
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }

		//IPExpr
		public RuleCall getAddrIPExprTerminalRuleCall_1_0() { return cAddrIPExprTerminalRuleCall_1_0; }

		//("<" format=EzFormats ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//format=EzFormats
		public Assignment getFormatAssignment_2_1() { return cFormatAssignment_2_1; }

		//EzFormats
		public RuleCall getFormatEzFormatsEnumRuleCall_2_1_0() { return cFormatEzFormatsEnumRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}

	public class OSCXBeeTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCXBeeTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtoXbeeKeyword_0_0 = (Keyword)cProtoAssignment_0.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddrIPExprTerminalRuleCall_1_0 = (RuleCall)cAddrAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormatEzFormatsEnumRuleCall_2_1_0 = (RuleCall)cFormatAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//OSCXBeeTarget:
		//	proto="xbee://" addr=IPExpr ("<" format=EzFormats ">")?;
		public ParserRule getRule() { return rule; }

		//proto="xbee://" addr=IPExpr ("<" format=EzFormats ">")?
		public Group getGroup() { return cGroup; }

		//proto="xbee://"
		public Assignment getProtoAssignment_0() { return cProtoAssignment_0; }

		//"xbee://"
		public Keyword getProtoXbeeKeyword_0_0() { return cProtoXbeeKeyword_0_0; }

		//addr=IPExpr
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }

		//IPExpr
		public RuleCall getAddrIPExprTerminalRuleCall_1_0() { return cAddrIPExprTerminalRuleCall_1_0; }

		//("<" format=EzFormats ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//format=EzFormats
		public Assignment getFormatAssignment_2_1() { return cFormatAssignment_2_1; }

		//EzFormats
		public RuleCall getFormatEzFormatsEnumRuleCall_2_1_0() { return cFormatEzFormatsEnumRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}

	public class OSCHttpTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCHttpTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtoHttpKeyword_0_0 = (Keyword)cProtoAssignment_0.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddrIPExprTerminalRuleCall_1_0 = (RuleCall)cAddrAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormatEzFormatsEnumRuleCall_2_1_0 = (RuleCall)cFormatAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//OSCHttpTarget:
		//	proto="http://" addr=IPExpr ("<" format=EzFormats ">")?;
		public ParserRule getRule() { return rule; }

		//proto="http://" addr=IPExpr ("<" format=EzFormats ">")?
		public Group getGroup() { return cGroup; }

		//proto="http://"
		public Assignment getProtoAssignment_0() { return cProtoAssignment_0; }

		//"http://"
		public Keyword getProtoHttpKeyword_0_0() { return cProtoHttpKeyword_0_0; }

		//addr=IPExpr
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }

		//IPExpr
		public RuleCall getAddrIPExprTerminalRuleCall_1_0() { return cAddrIPExprTerminalRuleCall_1_0; }

		//("<" format=EzFormats ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//format=EzFormats
		public Assignment getFormatAssignment_2_1() { return cFormatAssignment_2_1; }

		//EzFormats
		public RuleCall getFormatEzFormatsEnumRuleCall_2_1_0() { return cFormatEzFormatsEnumRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}

	public class OSCBluetoothTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCBluetoothTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtoBtKeyword_0_0 = (Keyword)cProtoAssignment_0.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAddrIPExprTerminalRuleCall_1_0 = (RuleCall)cAddrAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormatEzFormatsEnumRuleCall_2_1_0 = (RuleCall)cFormatAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//OSCBluetoothTarget:
		//	proto="bt://" addr=IPExpr ("<" format=EzFormats ">")?;
		public ParserRule getRule() { return rule; }

		//proto="bt://" addr=IPExpr ("<" format=EzFormats ">")?
		public Group getGroup() { return cGroup; }

		//proto="bt://"
		public Assignment getProtoAssignment_0() { return cProtoAssignment_0; }

		//"bt://"
		public Keyword getProtoBtKeyword_0_0() { return cProtoBtKeyword_0_0; }

		//addr=IPExpr
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }

		//IPExpr
		public RuleCall getAddrIPExprTerminalRuleCall_1_0() { return cAddrIPExprTerminalRuleCall_1_0; }

		//("<" format=EzFormats ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//format=EzFormats
		public Assignment getFormatAssignment_2_1() { return cFormatAssignment_2_1; }

		//EzFormats
		public RuleCall getFormatEzFormatsEnumRuleCall_2_1_0() { return cFormatEzFormatsEnumRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}

	public class OSCUSBTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCUSBTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtoUsbKeyword_0_0 = (Keyword)cProtoAssignment_0.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAddrAlternatives_1_0 = (Alternatives)cAddrAssignment_1.eContents().get(0);
		private final RuleCall cAddrOSCUSBLinuxMacAddrTerminalRuleCall_1_0_0 = (RuleCall)cAddrAlternatives_1_0.eContents().get(0);
		private final RuleCall cAddrUSBWinPortTerminalRuleCall_1_0_1 = (RuleCall)cAddrAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommercialAtKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSpeedAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cSpeedSpeedParserRuleCall_2_1_0 = (RuleCall)cSpeedAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLessThanSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cFormatAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cFormatEzFormatsEnumRuleCall_3_1_0 = (RuleCall)cFormatAssignment_3_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		
		//OSCUSBTarget:
		//	proto="usb://" addr=(OSCUSBLinuxMacAddr | USBWinPort) ("@" speed=Speed)? ("<" format=EzFormats ">")?;
		public ParserRule getRule() { return rule; }

		//proto="usb://" addr=(OSCUSBLinuxMacAddr | USBWinPort) ("@" speed=Speed)? ("<" format=EzFormats ">")?
		public Group getGroup() { return cGroup; }

		//proto="usb://"
		public Assignment getProtoAssignment_0() { return cProtoAssignment_0; }

		//"usb://"
		public Keyword getProtoUsbKeyword_0_0() { return cProtoUsbKeyword_0_0; }

		//addr=(OSCUSBLinuxMacAddr | USBWinPort)
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }

		//OSCUSBLinuxMacAddr | USBWinPort
		public Alternatives getAddrAlternatives_1_0() { return cAddrAlternatives_1_0; }

		//OSCUSBLinuxMacAddr
		public RuleCall getAddrOSCUSBLinuxMacAddrTerminalRuleCall_1_0_0() { return cAddrOSCUSBLinuxMacAddrTerminalRuleCall_1_0_0; }

		//USBWinPort
		public RuleCall getAddrUSBWinPortTerminalRuleCall_1_0_1() { return cAddrUSBWinPortTerminalRuleCall_1_0_1; }

		//("@" speed=Speed)?
		public Group getGroup_2() { return cGroup_2; }

		//"@"
		public Keyword getCommercialAtKeyword_2_0() { return cCommercialAtKeyword_2_0; }

		//speed=Speed
		public Assignment getSpeedAssignment_2_1() { return cSpeedAssignment_2_1; }

		//Speed
		public RuleCall getSpeedSpeedParserRuleCall_2_1_0() { return cSpeedSpeedParserRuleCall_2_1_0; }

		//("<" format=EzFormats ">")?
		public Group getGroup_3() { return cGroup_3; }

		//"<"
		public Keyword getLessThanSignKeyword_3_0() { return cLessThanSignKeyword_3_0; }

		//format=EzFormats
		public Assignment getFormatAssignment_3_1() { return cFormatAssignment_3_1; }

		//EzFormats
		public RuleCall getFormatEzFormatsEnumRuleCall_3_1_0() { return cFormatEzFormatsEnumRuleCall_3_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_3_2() { return cGreaterThanSignKeyword_3_2; }
	}

	public class OSCUbqTargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OSCUbqTarget");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cProtoAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cProtoUbqKeyword_0_0 = (Keyword)cProtoAssignment_0.eContents().get(0);
		private final Assignment cAddrAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cAddrAlternatives_1_0 = (Alternatives)cAddrAssignment_1.eContents().get(0);
		private final RuleCall cAddrOSCUSBLinuxMacAddrTerminalRuleCall_1_0_0 = (RuleCall)cAddrAlternatives_1_0.eContents().get(0);
		private final RuleCall cAddrUSBWinPortTerminalRuleCall_1_0_1 = (RuleCall)cAddrAlternatives_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cLessThanSignKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cFormatAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFormatEzFormatsEnumRuleCall_2_1_0 = (RuleCall)cFormatAssignment_2_1.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//OSCUbqTarget:
		//	proto="midi://" addr=(OSCUSBLinuxMacAddr | USBWinPort) ("<" format=EzFormats ">")?;
		public ParserRule getRule() { return rule; }

		//proto="midi://" addr=(OSCUSBLinuxMacAddr | USBWinPort) ("<" format=EzFormats ">")?
		public Group getGroup() { return cGroup; }

		//proto="midi://"
		public Assignment getProtoAssignment_0() { return cProtoAssignment_0; }

		//"midi://"
		public Keyword getProtoUbqKeyword_0_0() { return cProtoUbqKeyword_0_0; }

		//addr=(OSCUSBLinuxMacAddr | USBWinPort)
		public Assignment getAddrAssignment_1() { return cAddrAssignment_1; }

		//OSCUSBLinuxMacAddr | USBWinPort
		public Alternatives getAddrAlternatives_1_0() { return cAddrAlternatives_1_0; }

		//OSCUSBLinuxMacAddr
		public RuleCall getAddrOSCUSBLinuxMacAddrTerminalRuleCall_1_0_0() { return cAddrOSCUSBLinuxMacAddrTerminalRuleCall_1_0_0; }

		//USBWinPort
		public RuleCall getAddrUSBWinPortTerminalRuleCall_1_0_1() { return cAddrUSBWinPortTerminalRuleCall_1_0_1; }

		//("<" format=EzFormats ">")?
		public Group getGroup_2() { return cGroup_2; }

		//"<"
		public Keyword getLessThanSignKeyword_2_0() { return cLessThanSignKeyword_2_0; }

		//format=EzFormats
		public Assignment getFormatAssignment_2_1() { return cFormatAssignment_2_1; }

		//EzFormats
		public RuleCall getFormatEzFormatsEnumRuleCall_2_1_0() { return cFormatEzFormatsEnumRuleCall_2_1_0; }

		//">"
		public Keyword getGreaterThanSignKeyword_2_2() { return cGreaterThanSignKeyword_2_2; }
	}

	public class SpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Speed");
		private final Assignment cSpeedAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cSpeedAlternatives_0 = (Alternatives)cSpeedAssignment.eContents().get(0);
		private final Keyword cSpeed300Keyword_0_0 = (Keyword)cSpeedAlternatives_0.eContents().get(0);
		private final Keyword cSpeed1200Keyword_0_1 = (Keyword)cSpeedAlternatives_0.eContents().get(1);
		private final Keyword cSpeed2400Keyword_0_2 = (Keyword)cSpeedAlternatives_0.eContents().get(2);
		private final Keyword cSpeed4800Keyword_0_3 = (Keyword)cSpeedAlternatives_0.eContents().get(3);
		private final Keyword cSpeed9600Keyword_0_4 = (Keyword)cSpeedAlternatives_0.eContents().get(4);
		private final Keyword cSpeed14400Keyword_0_5 = (Keyword)cSpeedAlternatives_0.eContents().get(5);
		private final Keyword cSpeed19200Keyword_0_6 = (Keyword)cSpeedAlternatives_0.eContents().get(6);
		private final Keyword cSpeed28800Keyword_0_7 = (Keyword)cSpeedAlternatives_0.eContents().get(7);
		private final Keyword cSpeed38400Keyword_0_8 = (Keyword)cSpeedAlternatives_0.eContents().get(8);
		private final Keyword cSpeed57600Keyword_0_9 = (Keyword)cSpeedAlternatives_0.eContents().get(9);
		private final Keyword cSpeed115200Keyword_0_10 = (Keyword)cSpeedAlternatives_0.eContents().get(10);
		
		//Speed:
		//	speed=("300" | "1200" | "2400" | "4800" | "9600" | "14400" | "19200" | "28800" | "38400" | "57600" | "115200");
		public ParserRule getRule() { return rule; }

		//speed=("300" | "1200" | "2400" | "4800" | "9600" | "14400" | "19200" | "28800" | "38400" | "57600" | "115200")
		public Assignment getSpeedAssignment() { return cSpeedAssignment; }

		//"300" | "1200" | "2400" | "4800" | "9600" | "14400" | "19200" | "28800" | "38400" | "57600" | "115200"
		public Alternatives getSpeedAlternatives_0() { return cSpeedAlternatives_0; }

		//"300"
		public Keyword getSpeed300Keyword_0_0() { return cSpeed300Keyword_0_0; }

		//"1200"
		public Keyword getSpeed1200Keyword_0_1() { return cSpeed1200Keyword_0_1; }

		//"2400"
		public Keyword getSpeed2400Keyword_0_2() { return cSpeed2400Keyword_0_2; }

		//"4800"
		public Keyword getSpeed4800Keyword_0_3() { return cSpeed4800Keyword_0_3; }

		//"9600"
		public Keyword getSpeed9600Keyword_0_4() { return cSpeed9600Keyword_0_4; }

		//"14400"
		public Keyword getSpeed14400Keyword_0_5() { return cSpeed14400Keyword_0_5; }

		//"19200"
		public Keyword getSpeed19200Keyword_0_6() { return cSpeed19200Keyword_0_6; }

		//"28800"
		public Keyword getSpeed28800Keyword_0_7() { return cSpeed28800Keyword_0_7; }

		//"38400"
		public Keyword getSpeed38400Keyword_0_8() { return cSpeed38400Keyword_0_8; }

		//"57600"
		public Keyword getSpeed57600Keyword_0_9() { return cSpeed57600Keyword_0_9; }

		//"115200"
		public Keyword getSpeed115200Keyword_0_10() { return cSpeed115200Keyword_0_10; }
	}

	public class JvmVarElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "JvmVar");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJvarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cAsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cJavaTypesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cJavaTypesJvmTypeCrossReference_3_0 = (CrossReference)cJavaTypesAssignment_3.eContents().get(0);
		private final RuleCall cJavaTypesJvmTypeQualifiedNameParserRuleCall_3_0_1 = (RuleCall)cJavaTypesJvmTypeCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cJavaTypesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cJavaTypesJvmTypeCrossReference_4_1_0 = (CrossReference)cJavaTypesAssignment_4_1.eContents().get(0);
		private final RuleCall cJavaTypesJvmTypeQualifiedNameParserRuleCall_4_1_0_1 = (RuleCall)cJavaTypesJvmTypeCrossReference_4_1_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		////
		////
		////
		//JvmVar:
		//	"jvar" name=ID "as" javaTypes+=[jvmTypes::JvmType|QualifiedName] ("," javaTypes+=[jvmTypes::JvmType|QualifiedName])*
		//	"!";
		public ParserRule getRule() { return rule; }

		//"jvar" name=ID "as" javaTypes+=[jvmTypes::JvmType|QualifiedName] ("," javaTypes+=[jvmTypes::JvmType|QualifiedName])* "!"
		public Group getGroup() { return cGroup; }

		//"jvar"
		public Keyword getJvarKeyword_0() { return cJvarKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"as"
		public Keyword getAsKeyword_2() { return cAsKeyword_2; }

		//javaTypes+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getJavaTypesAssignment_3() { return cJavaTypesAssignment_3; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getJavaTypesJvmTypeCrossReference_3_0() { return cJavaTypesJvmTypeCrossReference_3_0; }

		//QualifiedName
		public RuleCall getJavaTypesJvmTypeQualifiedNameParserRuleCall_3_0_1() { return cJavaTypesJvmTypeQualifiedNameParserRuleCall_3_0_1; }

		//("," javaTypes+=[jvmTypes::JvmType|QualifiedName])*
		public Group getGroup_4() { return cGroup_4; }

		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }

		//javaTypes+=[jvmTypes::JvmType|QualifiedName]
		public Assignment getJavaTypesAssignment_4_1() { return cJavaTypesAssignment_4_1; }

		//[jvmTypes::JvmType|QualifiedName]
		public CrossReference getJavaTypesJvmTypeCrossReference_4_1_0() { return cJavaTypesJvmTypeCrossReference_4_1_0; }

		//QualifiedName
		public RuleCall getJavaTypesJvmTypeQualifiedNameParserRuleCall_4_1_0_1() { return cJavaTypesJvmTypeQualifiedNameParserRuleCall_4_1_0_1; }

		//"!"
		public Keyword getExclamationMarkKeyword_5() { return cExclamationMarkKeyword_5; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ExprModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExprModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsTestedAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsTestedTestedKeyword_0_0 = (Keyword)cIsTestedAssignment_0.eContents().get(0);
		private final Keyword cModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cUsingsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUsingsUsingParserRuleCall_3_0 = (RuleCall)cUsingsAssignment_3.eContents().get(0);
		private final Alternatives cAlternatives_4 = (Alternatives)cGroup.eContents().get(4);
		private final Assignment cElementsAssignment_4_0 = (Assignment)cAlternatives_4.eContents().get(0);
		private final RuleCall cElementsElementParserRuleCall_4_0_0 = (RuleCall)cElementsAssignment_4_0.eContents().get(0);
		private final Assignment cFunctionsAssignment_4_1 = (Assignment)cAlternatives_4.eContents().get(1);
		private final RuleCall cFunctionsFunctionDeclarationParserRuleCall_4_1_0 = (RuleCall)cFunctionsAssignment_4_1.eContents().get(0);
		
		////
		////
		////
		//ExprModel:
		//	isTested?="tested"? "model" name=ID usings+=Using* (elements+=Element | functions+=FunctionDeclaration)*;
		public ParserRule getRule() { return rule; }

		//isTested?="tested"? "model" name=ID usings+=Using* (elements+=Element | functions+=FunctionDeclaration)*
		public Group getGroup() { return cGroup; }

		//isTested?="tested"?
		public Assignment getIsTestedAssignment_0() { return cIsTestedAssignment_0; }

		//"tested"
		public Keyword getIsTestedTestedKeyword_0_0() { return cIsTestedTestedKeyword_0_0; }

		//"model"
		public Keyword getModelKeyword_1() { return cModelKeyword_1; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//usings+=Using*
		public Assignment getUsingsAssignment_3() { return cUsingsAssignment_3; }

		//Using
		public RuleCall getUsingsUsingParserRuleCall_3_0() { return cUsingsUsingParserRuleCall_3_0; }

		//(elements+=Element | functions+=FunctionDeclaration)*
		public Alternatives getAlternatives_4() { return cAlternatives_4; }

		//elements+=Element
		public Assignment getElementsAssignment_4_0() { return cElementsAssignment_4_0; }

		//Element
		public RuleCall getElementsElementParserRuleCall_4_0_0() { return cElementsElementParserRuleCall_4_0_0; }

		//functions+=FunctionDeclaration
		public Assignment getFunctionsAssignment_4_1() { return cFunctionsAssignment_4_1; }

		//FunctionDeclaration
		public RuleCall getFunctionsFunctionDeclarationParserRuleCall_4_1_0() { return cFunctionsFunctionDeclarationParserRuleCall_4_1_0; }
	}

	public class UsingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Using");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUsingKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportedNamespaceImportIDParserRuleCall_1_0 = (RuleCall)cImportedNamespaceAssignment_1.eContents().get(0);
		
		//Using:
		//	"using" importedNamespace=ImportID;
		public ParserRule getRule() { return rule; }

		//"using" importedNamespace=ImportID
		public Group getGroup() { return cGroup; }

		//"using"
		public Keyword getUsingKeyword_0() { return cUsingKeyword_0; }

		//importedNamespace=ImportID
		public Assignment getImportedNamespaceAssignment_1() { return cImportedNamespaceAssignment_1; }

		//ImportID
		public RuleCall getImportedNamespaceImportIDParserRuleCall_1_0() { return cImportedNamespaceImportIDParserRuleCall_1_0; }
	}

	public class ImportIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ImportID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//// ... and ID with .* at the end.
		//ImportID:
		//	ID ("." "*");
		public ParserRule getRule() { return rule; }

		//ID ("." "*")
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"." "*"
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
	}

	public class ElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Element");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cVarDeclParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFormulaParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumDeclParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cReturnParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Element:
		//	VarDecl | Formula | EnumDecl | Return;
		public ParserRule getRule() { return rule; }

		//VarDecl | Formula | EnumDecl | Return
		public Alternatives getAlternatives() { return cAlternatives; }

		//VarDecl
		public RuleCall getVarDeclParserRuleCall_0() { return cVarDeclParserRuleCall_0; }

		//Formula
		public RuleCall getFormulaParserRuleCall_1() { return cFormulaParserRuleCall_1; }

		//EnumDecl
		public RuleCall getEnumDeclParserRuleCall_2() { return cEnumDeclParserRuleCall_2; }

		//Return
		public RuleCall getReturnParserRuleCall_3() { return cReturnParserRuleCall_3; }
	}

	public class FunctionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFunctionDeclarationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFunctionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cParamsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cParamsParameterParserRuleCall_5_0_0 = (RuleCall)cParamsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cParamsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cParamsParameterParserRuleCall_5_1_1_0 = (RuleCall)cParamsAssignment_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cElementsAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cElementsElementParserRuleCall_8_0 = (RuleCall)cElementsAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//FunctionDeclaration returns Symbol:
		//	{FunctionDeclaration} "function" type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" // FUNC
		//	"{" elements+=Element* "}";
		public ParserRule getRule() { return rule; }

		//{FunctionDeclaration} "function" type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" // FUNC
		//"{" elements+=Element* "}"
		public Group getGroup() { return cGroup; }

		//{FunctionDeclaration}
		public Action getFunctionDeclarationAction_0() { return cFunctionDeclarationAction_0; }

		//"function"
		public Keyword getFunctionKeyword_1() { return cFunctionKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }

		//(params+=Parameter ("," params+=Parameter)*)?
		public Group getGroup_5() { return cGroup_5; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_0() { return cParamsAssignment_5_0; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_0_0() { return cParamsParameterParserRuleCall_5_0_0; }

		//("," params+=Parameter)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//params+=Parameter
		public Assignment getParamsAssignment_5_1_1() { return cParamsAssignment_5_1_1; }

		//Parameter
		public RuleCall getParamsParameterParserRuleCall_5_1_1_0() { return cParamsParameterParserRuleCall_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }

		//// FUNC
		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//elements+=Element*
		public Assignment getElementsAssignment_8() { return cElementsAssignment_8; }

		//Element
		public RuleCall getElementsElementParserRuleCall_8_0() { return cElementsElementParserRuleCall_8_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class ReturnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Return");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReturnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExprExprParserRuleCall_1_0 = (RuleCall)cExprAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Return:
		//	"return" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//"return" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//"return"
		public Keyword getReturnKeyword_0() { return cReturnKeyword_0; }

		//expr=Expr
		public Assignment getExprAssignment_1() { return cExprAssignment_1; }

		//Expr
		public RuleCall getExprExprParserRuleCall_1_0() { return cExprExprParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeTypeParserRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Parameter returns Symbol:
		//	{Parameter} type=Type name=ID;
		public ParserRule getRule() { return rule; }

		//{Parameter} type=Type name=ID
		public Group getGroup() { return cGroup; }

		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }

		//type=Type
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_1_0() { return cTypeTypeParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class EnumDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cEnumKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLiteralsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLiteralsEnumLiteralParserRuleCall_3_0 = (RuleCall)cLiteralsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//EnumDecl:
		//	"enum" name=ID "{" literals+=EnumLiteral* "}";
		public ParserRule getRule() { return rule; }

		//"enum" name=ID "{" literals+=EnumLiteral* "}"
		public Group getGroup() { return cGroup; }

		//"enum"
		public Keyword getEnumKeyword_0() { return cEnumKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//literals+=EnumLiteral*
		public Assignment getLiteralsAssignment_3() { return cLiteralsAssignment_3; }

		//EnumLiteral
		public RuleCall getLiteralsEnumLiteralParserRuleCall_3_0() { return cLiteralsEnumLiteralParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class EnumLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//EnumLiteral returns Symbol:
		//	{EnumLiteral} name=ID;
		public ParserRule getRule() { return rule; }

		//{EnumLiteral} name=ID
		public Group getGroup() { return cGroup; }

		//{EnumLiteral}
		public Action getEnumLiteralAction_0() { return cEnumLiteralAction_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class VarDeclElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VarDecl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVarDeclAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cReadonlyAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cReadonlyReadonlyKeyword_1_0 = (Keyword)cReadonlyAssignment_1.eContents().get(0);
		private final Keyword cVarKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTypeParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInitAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInitExprParserRuleCall_5_1_0 = (RuleCall)cInitAssignment_5_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//VarDecl returns Symbol:
		//	{VarDecl} readonly?="readonly"? "var" type=Type name=ID ("=" init=Expr)? ";";
		public ParserRule getRule() { return rule; }

		//{VarDecl} readonly?="readonly"? "var" type=Type name=ID ("=" init=Expr)? ";"
		public Group getGroup() { return cGroup; }

		//{VarDecl}
		public Action getVarDeclAction_0() { return cVarDeclAction_0; }

		//readonly?="readonly"?
		public Assignment getReadonlyAssignment_1() { return cReadonlyAssignment_1; }

		//"readonly"
		public Keyword getReadonlyReadonlyKeyword_1_0() { return cReadonlyReadonlyKeyword_1_0; }

		//"var"
		public Keyword getVarKeyword_2() { return cVarKeyword_2; }

		//type=Type
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_3_0() { return cTypeTypeParserRuleCall_3_0; }

		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }

		//("=" init=Expr)?
		public Group getGroup_5() { return cGroup_5; }

		//"="
		public Keyword getEqualsSignKeyword_5_0() { return cEqualsSignKeyword_5_0; }

		//init=Expr
		public Assignment getInitAssignment_5_1() { return cInitAssignment_5_1; }

		//Expr
		public RuleCall getInitExprParserRuleCall_5_1_0() { return cInitExprParserRuleCall_5_1_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Type");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPrimitiveTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cArrayTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Type:
		//	PrimitiveType | ArrayType;
		public ParserRule getRule() { return rule; }

		//PrimitiveType | ArrayType
		public Alternatives getAlternatives() { return cAlternatives; }

		//PrimitiveType
		public RuleCall getPrimitiveTypeParserRuleCall_0() { return cPrimitiveTypeParserRuleCall_0; }

		//ArrayType
		public RuleCall getArrayTypeParserRuleCall_1() { return cArrayTypeParserRuleCall_1; }
	}

	public class PrimitiveTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PrimitiveType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBoolTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cFloatTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cEnumTypeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cStringTypeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//PrimitiveType:
		//	IntType | BoolType | FloatType | EnumType | StringType;
		public ParserRule getRule() { return rule; }

		//IntType | BoolType | FloatType | EnumType | StringType
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntType
		public RuleCall getIntTypeParserRuleCall_0() { return cIntTypeParserRuleCall_0; }

		//BoolType
		public RuleCall getBoolTypeParserRuleCall_1() { return cBoolTypeParserRuleCall_1; }

		//FloatType
		public RuleCall getFloatTypeParserRuleCall_2() { return cFloatTypeParserRuleCall_2; }

		//EnumType
		public RuleCall getEnumTypeParserRuleCall_3() { return cEnumTypeParserRuleCall_3; }

		//StringType
		public RuleCall getStringTypeParserRuleCall_4() { return cStringTypeParserRuleCall_4; }
	}

	public class ArrayTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cArrayTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cArrayKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBaseTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cBaseTypeTypeParserRuleCall_3_0 = (RuleCall)cBaseTypeAssignment_3.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ArrayType:
		//	{ArrayType} "array" "[" baseType=Type "]";
		public ParserRule getRule() { return rule; }

		//{ArrayType} "array" "[" baseType=Type "]"
		public Group getGroup() { return cGroup; }

		//{ArrayType}
		public Action getArrayTypeAction_0() { return cArrayTypeAction_0; }

		//"array"
		public Keyword getArrayKeyword_1() { return cArrayKeyword_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }

		//baseType=Type
		public Assignment getBaseTypeAssignment_3() { return cBaseTypeAssignment_3; }

		//Type
		public RuleCall getBaseTypeTypeParserRuleCall_3_0() { return cBaseTypeTypeParserRuleCall_3_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4() { return cRightSquareBracketKeyword_4; }
	}

	public class EnumTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EnumType");
		private final Assignment cEnumRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cEnumRefEnumDeclCrossReference_0 = (CrossReference)cEnumRefAssignment.eContents().get(0);
		private final RuleCall cEnumRefEnumDeclIDTerminalRuleCall_0_1 = (RuleCall)cEnumRefEnumDeclCrossReference_0.eContents().get(1);
		
		//EnumType:
		//	enumRef=[EnumDecl];
		public ParserRule getRule() { return rule; }

		//enumRef=[EnumDecl]
		public Assignment getEnumRefAssignment() { return cEnumRefAssignment; }

		//[EnumDecl]
		public CrossReference getEnumRefEnumDeclCrossReference_0() { return cEnumRefEnumDeclCrossReference_0; }

		//ID
		public RuleCall getEnumRefEnumDeclIDTerminalRuleCall_0_1() { return cEnumRefEnumDeclIDTerminalRuleCall_0_1; }
	}

	public class IntTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//IntType:
		//	{IntType} "int";
		public ParserRule getRule() { return rule; }

		//{IntType} "int"
		public Group getGroup() { return cGroup; }

		//{IntType}
		public Action getIntTypeAction_0() { return cIntTypeAction_0; }

		//"int"
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
	}

	public class BoolTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BoolType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoolTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//BoolType:
		//	{BoolType} "bool";
		public ParserRule getRule() { return rule; }

		//{BoolType} "bool"
		public Group getGroup() { return cGroup; }

		//{BoolType}
		public Action getBoolTypeAction_0() { return cBoolTypeAction_0; }

		//"bool"
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
	}

	public class FloatTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FloatType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFloatTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFloatKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//FloatType:
		//	{FloatType} "float";
		public ParserRule getRule() { return rule; }

		//{FloatType} "float"
		public Group getGroup() { return cGroup; }

		//{FloatType}
		public Action getFloatTypeAction_0() { return cFloatTypeAction_0; }

		//"float"
		public Keyword getFloatKeyword_1() { return cFloatKeyword_1; }
	}

	public class StringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//StringType:
		//	{StringType} "string";
		public ParserRule getRule() { return rule; }

		//{StringType} "string"
		public Group getGroup() { return cGroup; }

		//{StringType}
		public Action getStringTypeAction_0() { return cStringTypeAction_0; }

		//"string"
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}

	public class FormulaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Formula");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cFormulaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cCalcKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTypeTypeParserRuleCall_2_0 = (RuleCall)cTypeAssignment_2.eContents().get(0);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cEqualsSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cExprAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cExprExprParserRuleCall_5_0 = (RuleCall)cExprAssignment_5.eContents().get(0);
		private final Keyword cSemicolonKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Formula returns Symbol:
		//	{Formula} "calc" type=Type name=ID "=" expr=Expr ";";
		public ParserRule getRule() { return rule; }

		//{Formula} "calc" type=Type name=ID "=" expr=Expr ";"
		public Group getGroup() { return cGroup; }

		//{Formula}
		public Action getFormulaAction_0() { return cFormulaAction_0; }

		//"calc"
		public Keyword getCalcKeyword_1() { return cCalcKeyword_1; }

		//type=Type
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//Type
		public RuleCall getTypeTypeParserRuleCall_2_0() { return cTypeTypeParserRuleCall_2_0; }

		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }

		//"="
		public Keyword getEqualsSignKeyword_4() { return cEqualsSignKeyword_4; }

		//expr=Expr
		public Assignment getExprAssignment_5() { return cExprAssignment_5; }

		//Expr
		public RuleCall getExprExprParserRuleCall_5_0() { return cExprExprParserRuleCall_5_0; }

		//";"
		public Keyword getSemicolonKeyword_6() { return cSemicolonKeyword_6; }
	}

	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expr");
		private final RuleCall cComparisonParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expr:
		//	Comparison;
		public ParserRule getRule() { return rule; }

		//Comparison
		public RuleCall getComparisonParserRuleCall() { return cComparisonParserRuleCall; }
	}

	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAdditionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cEqualsLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cEqualsSignEqualsSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAdditionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Comparison returns Expression:
		//	Addition ({Equals.left=current} "==" right=Addition)?;
		public ParserRule getRule() { return rule; }

		//Addition ({Equals.left=current} "==" right=Addition)?
		public Group getGroup() { return cGroup; }

		//Addition
		public RuleCall getAdditionParserRuleCall_0() { return cAdditionParserRuleCall_0; }

		//({Equals.left=current} "==" right=Addition)?
		public Group getGroup_1() { return cGroup_1; }

		//{Equals.left=current}
		public Action getEqualsLeftAction_1_0() { return cEqualsLeftAction_1_0; }

		//"=="
		public Keyword getEqualsSignEqualsSignKeyword_1_1() { return cEqualsSignEqualsSignKeyword_1_1; }

		//right=Addition
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Addition
		public RuleCall getRightAdditionParserRuleCall_1_2_0() { return cRightAdditionParserRuleCall_1_2_0; }
	}

	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cPlusLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//	Multiplication ({Plus.left=current} "+" right=Multiplication)*;
		public ParserRule getRule() { return rule; }

		//Multiplication ({Plus.left=current} "+" right=Multiplication)*
		public Group getGroup() { return cGroup; }

		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }

		//({Plus.left=current} "+" right=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }

		//{Plus.left=current}
		public Action getPlusLeftAction_1_0() { return cPlusLeftAction_1_0; }

		//"+"
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }

		//right=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}

	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPostfixOperatorsParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPostfixOperatorsParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//	PostfixOperators ({Multi.left=current} "*" right=PostfixOperators)*;
		public ParserRule getRule() { return rule; }

		//PostfixOperators ({Multi.left=current} "*" right=PostfixOperators)*
		public Group getGroup() { return cGroup; }

		//PostfixOperators
		public RuleCall getPostfixOperatorsParserRuleCall_0() { return cPostfixOperatorsParserRuleCall_0; }

		//({Multi.left=current} "*" right=PostfixOperators)*
		public Group getGroup_1() { return cGroup_1; }

		//{Multi.left=current}
		public Action getMultiLeftAction_1_0() { return cMultiLeftAction_1_0; }

		//"*"
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }

		//right=PostfixOperators
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }

		//PostfixOperators
		public RuleCall getRightPostfixOperatorsParserRuleCall_1_2_0() { return cRightPostfixOperatorsParserRuleCall_1_2_0; }
	}

	public class PostfixOperatorsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PostfixOperators");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAtomicParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cArrayAccessExprAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cIndexAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cIndexExprParserRuleCall_1_2_0 = (RuleCall)cIndexAssignment_1_2.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//PostfixOperators returns Expression:
		//	Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?;
		public ParserRule getRule() { return rule; }

		//Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?
		public Group getGroup() { return cGroup; }

		//Atomic
		public RuleCall getAtomicParserRuleCall_0() { return cAtomicParserRuleCall_0; }

		//({ArrayAccess.expr=current} "[" index=Expr "]")?
		public Group getGroup_1() { return cGroup_1; }

		//{ArrayAccess.expr=current}
		public Action getArrayAccessExprAction_1_0() { return cArrayAccessExprAction_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_1() { return cLeftSquareBracketKeyword_1_1; }

		//index=Expr
		public Assignment getIndexAssignment_1_2() { return cIndexAssignment_1_2; }

		//Expr
		public RuleCall getIndexExprParserRuleCall_1_2_0() { return cIndexExprParserRuleCall_1_2_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_3() { return cRightSquareBracketKeyword_1_3; }
	}

	public class AtomicElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Atomic");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cSymbolRefAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cSymbolAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final CrossReference cSymbolSymbolCrossReference_0_1_0 = (CrossReference)cSymbolAssignment_0_1.eContents().get(0);
		private final RuleCall cSymbolSymbolQIDParserRuleCall_0_1_0_1 = (RuleCall)cSymbolSymbolCrossReference_0_1_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cActualsAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cActualsExprParserRuleCall_0_2_1_0 = (RuleCall)cActualsAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cActualsAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cActualsExprParserRuleCall_0_2_2_1_0 = (RuleCall)cActualsAssignment_0_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Action cNumberLiteralAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cValueEfloatTerminalRuleCall_1_1_0 = (RuleCall)cValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cStringLiteralAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Assignment cValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cValueAssignment_2_1.eContents().get(0);
		
		//Atomic returns Expression:
		//	{SymbolRef} symbol=[Symbol|QID] ("(" actuals+=Expr? ("," actuals+=Expr)* ")")? // FUNC
		//	| {NumberLiteral} value=efloat | {StringLiteral} value=STRING;
		public ParserRule getRule() { return rule; }

		//{SymbolRef} symbol=[Symbol|QID] ("(" actuals+=Expr? ("," actuals+=Expr)* ")")? // FUNC
		//| {NumberLiteral} value=efloat | {StringLiteral} value=STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//{SymbolRef} symbol=[Symbol|QID] ("(" actuals+=Expr? ("," actuals+=Expr)* ")")?
		public Group getGroup_0() { return cGroup_0; }

		//{SymbolRef}
		public Action getSymbolRefAction_0_0() { return cSymbolRefAction_0_0; }

		//symbol=[Symbol|QID]
		public Assignment getSymbolAssignment_0_1() { return cSymbolAssignment_0_1; }

		//[Symbol|QID]
		public CrossReference getSymbolSymbolCrossReference_0_1_0() { return cSymbolSymbolCrossReference_0_1_0; }

		//QID
		public RuleCall getSymbolSymbolQIDParserRuleCall_0_1_0_1() { return cSymbolSymbolQIDParserRuleCall_0_1_0_1; }

		//("(" actuals+=Expr? ("," actuals+=Expr)* ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//actuals+=Expr?
		public Assignment getActualsAssignment_0_2_1() { return cActualsAssignment_0_2_1; }

		//Expr
		public RuleCall getActualsExprParserRuleCall_0_2_1_0() { return cActualsExprParserRuleCall_0_2_1_0; }

		//("," actuals+=Expr)*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }

		//","
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }

		//actuals+=Expr
		public Assignment getActualsAssignment_0_2_2_1() { return cActualsAssignment_0_2_2_1; }

		//Expr
		public RuleCall getActualsExprParserRuleCall_0_2_2_1_0() { return cActualsExprParserRuleCall_0_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_3() { return cRightParenthesisKeyword_0_2_3; }

		//{NumberLiteral} value=efloat
		public Group getGroup_1() { return cGroup_1; }

		//{NumberLiteral}
		public Action getNumberLiteralAction_1_0() { return cNumberLiteralAction_1_0; }

		//value=efloat
		public Assignment getValueAssignment_1_1() { return cValueAssignment_1_1; }

		//efloat
		public RuleCall getValueEfloatTerminalRuleCall_1_1_0() { return cValueEfloatTerminalRuleCall_1_1_0; }

		//{StringLiteral} value=STRING
		public Group getGroup_2() { return cGroup_2; }

		//{StringLiteral}
		public Action getStringLiteralAction_2_0() { return cStringLiteralAction_2_0; }

		//value=STRING
		public Assignment getValueAssignment_2_1() { return cValueAssignment_2_1; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_2_1_0() { return cValueSTRINGTerminalRuleCall_2_1_0; }
	}

	public class QIDElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QID");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QID:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	public class EzFormatsElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EzFormats");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOscEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOscOscKeyword_0_0 = (Keyword)cOscEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMidiEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMidiMidiKeyword_1_0 = (Keyword)cMidiEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDmxEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDmxDmxKeyword_2_0 = (Keyword)cDmxEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cOscabletonEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cOscabletonOscabletonKeyword_3_0 = (Keyword)cOscabletonEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOscwiimoteEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cOscwiimoteOscwiimoteKeyword_4_0 = (Keyword)cOscwiimoteEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cOscresolumeEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cOscresolumeOscresolumeKeyword_5_0 = (Keyword)cOscresolumeEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTuioEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTuioTuioKeyword_6_0 = (Keyword)cTuioEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cTuio2EnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cTuio2Tuio2Keyword_7_0 = (Keyword)cTuio2EnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cThingmEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cThingmThingmKeyword_8_0 = (Keyword)cThingmEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cFirmataEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cFirmataFirmataKeyword_9_0 = (Keyword)cFirmataEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cI2cfirmataEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cI2cfirmataI2cfirmataKeyword_10_0 = (Keyword)cI2cfirmataEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cPachubeEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cPachubePachubeKeyword_11_0 = (Keyword)cPachubeEnumLiteralDeclaration_11.eContents().get(0);
		private final EnumLiteralDeclaration cUbiquinoEnumLiteralDeclaration_12 = (EnumLiteralDeclaration)cAlternatives.eContents().get(12);
		private final Keyword cUbiquinoUbiquinoKeyword_12_0 = (Keyword)cUbiquinoEnumLiteralDeclaration_12.eContents().get(0);
		
		//enum EzFormats:
		//	osc | midi | dmx | oscableton | oscwiimote | oscresolume | tuio | tuio2 | thingm | firmata | i2cfirmata | pachube |
		//	ubiquino;
		public EnumRule getRule() { return rule; }

		//osc | midi | dmx | oscableton | oscwiimote | oscresolume | tuio | tuio2 | thingm | firmata | i2cfirmata | pachube |
		//ubiquino
		public Alternatives getAlternatives() { return cAlternatives; }

		//osc
		public EnumLiteralDeclaration getOscEnumLiteralDeclaration_0() { return cOscEnumLiteralDeclaration_0; }

		//"osc"
		public Keyword getOscOscKeyword_0_0() { return cOscOscKeyword_0_0; }

		//midi
		public EnumLiteralDeclaration getMidiEnumLiteralDeclaration_1() { return cMidiEnumLiteralDeclaration_1; }

		//"midi"
		public Keyword getMidiMidiKeyword_1_0() { return cMidiMidiKeyword_1_0; }

		//dmx
		public EnumLiteralDeclaration getDmxEnumLiteralDeclaration_2() { return cDmxEnumLiteralDeclaration_2; }

		//"dmx"
		public Keyword getDmxDmxKeyword_2_0() { return cDmxDmxKeyword_2_0; }

		//oscableton
		public EnumLiteralDeclaration getOscabletonEnumLiteralDeclaration_3() { return cOscabletonEnumLiteralDeclaration_3; }

		//"oscableton"
		public Keyword getOscabletonOscabletonKeyword_3_0() { return cOscabletonOscabletonKeyword_3_0; }

		//oscwiimote
		public EnumLiteralDeclaration getOscwiimoteEnumLiteralDeclaration_4() { return cOscwiimoteEnumLiteralDeclaration_4; }

		//"oscwiimote"
		public Keyword getOscwiimoteOscwiimoteKeyword_4_0() { return cOscwiimoteOscwiimoteKeyword_4_0; }

		//oscresolume
		public EnumLiteralDeclaration getOscresolumeEnumLiteralDeclaration_5() { return cOscresolumeEnumLiteralDeclaration_5; }

		//"oscresolume"
		public Keyword getOscresolumeOscresolumeKeyword_5_0() { return cOscresolumeOscresolumeKeyword_5_0; }

		//tuio
		public EnumLiteralDeclaration getTuioEnumLiteralDeclaration_6() { return cTuioEnumLiteralDeclaration_6; }

		//"tuio"
		public Keyword getTuioTuioKeyword_6_0() { return cTuioTuioKeyword_6_0; }

		//tuio2
		public EnumLiteralDeclaration getTuio2EnumLiteralDeclaration_7() { return cTuio2EnumLiteralDeclaration_7; }

		//"tuio2"
		public Keyword getTuio2Tuio2Keyword_7_0() { return cTuio2Tuio2Keyword_7_0; }

		//thingm
		public EnumLiteralDeclaration getThingmEnumLiteralDeclaration_8() { return cThingmEnumLiteralDeclaration_8; }

		//"thingm"
		public Keyword getThingmThingmKeyword_8_0() { return cThingmThingmKeyword_8_0; }

		//firmata
		public EnumLiteralDeclaration getFirmataEnumLiteralDeclaration_9() { return cFirmataEnumLiteralDeclaration_9; }

		//"firmata"
		public Keyword getFirmataFirmataKeyword_9_0() { return cFirmataFirmataKeyword_9_0; }

		//i2cfirmata
		public EnumLiteralDeclaration getI2cfirmataEnumLiteralDeclaration_10() { return cI2cfirmataEnumLiteralDeclaration_10; }

		//"i2cfirmata"
		public Keyword getI2cfirmataI2cfirmataKeyword_10_0() { return cI2cfirmataI2cfirmataKeyword_10_0; }

		//pachube
		public EnumLiteralDeclaration getPachubeEnumLiteralDeclaration_11() { return cPachubeEnumLiteralDeclaration_11; }

		//"pachube"
		public Keyword getPachubePachubeKeyword_11_0() { return cPachubePachubeKeyword_11_0; }

		//ubiquino
		public EnumLiteralDeclaration getUbiquinoEnumLiteralDeclaration_12() { return cUbiquinoEnumLiteralDeclaration_12; }

		//"ubiquino"
		public Keyword getUbiquinoUbiquinoKeyword_12_0() { return cUbiquinoUbiquinoKeyword_12_0; }
	}
	
	private EzModelElements pEzModel;
	private EzCmdElements pEzCmd;
	private EzOpenCmdElements pEzOpenCmd;
	private EzCloseCmdElements pEzCloseCmd;
	private EzHookCmdElements pEzHookCmd;
	private EzUnhookCmdElements pEzUnhookCmd;
	private EzAliasCmdElements pEzAliasCmd;
	private EzStatusCmdElements pEzStatusCmd;
	private EzResetCmdElements pEzResetCmd;
	private EzHelpCmdElements pEzHelpCmd;
	private EzClearCmdElements pEzClearCmd;
	private EzProtocolCmdElements pEzProtocolCmd;
	private EzListCmdElements pEzListCmd;
	private EzMsgElements pEzMsg;
	private EzMsgRemoveElements pEzMsgRemove;
	private EzMsgGetElements pEzMsgGet;
	private EzMsgBindElements pEzMsgBind;
	private EzMsgListenElements pEzMsgListen;
	private EzMsgServiceElements pEzMsgService;
	private EzMsgUnlistenElements pEzMsgUnlisten;
	private EzMsgCmdElements pEzMsgCmd;
	private EzMsgClockElements pEzMsgClock;
	private EzMsgToggleElements pEzMsgToggle;
	private EzMsgBangElements pEzMsgBang;
	private EzMsgUnforwardElements pEzMsgUnforward;
	private EzMsgForwardElements pEzMsgForward;
	private EzMsgSetElements pEzMsgSet;
	private EzMsgLegacySetElements pEzMsgLegacySet;
	private EzMsgSelectElements pEzMsgSelect;
	private EzMsgKinematicsElements pEzMsgKinematics;
	private EzMsgTriggerElements pEzMsgTrigger;
	private OSCExprElements pOSCExpr;
	private OSCSubDomainElements pOSCSubDomain;
	private TerminalRule tOSCAddr;
	private OSCArgElements pOSCArg;
	private OSCUDPTargetElements pOSCUDPTarget;
	private OSCTCPTargetElements pOSCTCPTarget;
	private OSCXBeeTargetElements pOSCXBeeTarget;
	private OSCHttpTargetElements pOSCHttpTarget;
	private OSCBluetoothTargetElements pOSCBluetoothTarget;
	private OSCUSBTargetElements pOSCUSBTarget;
	private OSCUbqTargetElements pOSCUbqTarget;
	private TerminalRule tOSCUSBLinuxMacAddr;
	private EzFormatsElements unknownRuleEzFormats;
	private TerminalRule tUSBWinPort;
	private TerminalRule tIPExpr;
	private SpeedElements pSpeed;
	private TerminalRule tHttpAddr;
	private TerminalRule tUsbmac;
	private TerminalRule tEbyte;
	private TerminalRule tEblob;
	private TerminalRule tEimpulse;
	private TerminalRule tEtimetag;
	private TerminalRule tEnull;
	private TerminalRule tEboolean;
	private TerminalRule tEfloat;
	private TerminalRule tEinteger;
	private JvmVarElements pJvmVar;
	private QualifiedNameElements pQualifiedName;
	private ExprModelElements pExprModel;
	private UsingElements pUsing;
	private ImportIDElements pImportID;
	private ElementElements pElement;
	private FunctionDeclarationElements pFunctionDeclaration;
	private ReturnElements pReturn;
	private ParameterElements pParameter;
	private EnumDeclElements pEnumDecl;
	private EnumLiteralElements pEnumLiteral;
	private VarDeclElements pVarDecl;
	private TypeElements pType;
	private PrimitiveTypeElements pPrimitiveType;
	private ArrayTypeElements pArrayType;
	private EnumTypeElements pEnumType;
	private IntTypeElements pIntType;
	private BoolTypeElements pBoolType;
	private FloatTypeElements pFloatType;
	private StringTypeElements pStringType;
	private FormulaElements pFormula;
	private ExprElements pExpr;
	private ComparisonElements pComparison;
	private AdditionElements pAddition;
	private MultiplicationElements pMultiplication;
	private PostfixOperatorsElements pPostfixOperators;
	private AtomicElements pAtomic;
	private QIDElements pQID;
	private TerminalRule tINT;
	
	private final Grammar grammar;

	private XbaseGrammarAccess gaXbase;

	@Inject
	public OscDslGrammarAccess(GrammarProvider grammarProvider,
		XbaseGrammarAccess gaXbase) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaXbase = gaXbase;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("net.sf.smbt.osc.OscDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public XbaseGrammarAccess getXbaseGrammarAccess() {
		return gaXbase;
	}

	
	//EzModel:
	//	cmd=EzCmd | / * |  mdl=ExprModel * / msg+=EzMsg*;
	public EzModelElements getEzModelAccess() {
		return (pEzModel != null) ? pEzModel : (pEzModel = new EzModelElements());
	}
	
	public ParserRule getEzModelRule() {
		return getEzModelAccess().getRule();
	}

	//EzCmd:
	//	cmd=(EzOpenCmd | EzCloseCmd | EzHookCmd | EzUnhookCmd | EzAliasCmd | EzStatusCmd | EzListCmd | EzHelpCmd | EzClearCmd
	//	| EzResetCmd | EzProtocolCmd);
	public EzCmdElements getEzCmdAccess() {
		return (pEzCmd != null) ? pEzCmd : (pEzCmd = new EzCmdElements());
	}
	
	public ParserRule getEzCmdRule() {
		return getEzCmdAccess().getRule();
	}

	//EzOpenCmd:
	//	"open" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
	public EzOpenCmdElements getEzOpenCmdAccess() {
		return (pEzOpenCmd != null) ? pEzOpenCmd : (pEzOpenCmd = new EzOpenCmdElements());
	}
	
	public ParserRule getEzOpenCmdRule() {
		return getEzOpenCmdAccess().getRule();
	}

	//EzCloseCmd:
	//	"close" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
	public EzCloseCmdElements getEzCloseCmdAccess() {
		return (pEzCloseCmd != null) ? pEzCloseCmd : (pEzCloseCmd = new EzCloseCmdElements());
	}
	
	public ParserRule getEzCloseCmdRule() {
		return getEzCloseCmdAccess().getRule();
	}

	//EzHookCmd:
	//	"hook" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
	public EzHookCmdElements getEzHookCmdAccess() {
		return (pEzHookCmd != null) ? pEzHookCmd : (pEzHookCmd = new EzHookCmdElements());
	}
	
	public ParserRule getEzHookCmdRule() {
		return getEzHookCmdAccess().getRule();
	}

	//EzUnhookCmd:
	//	"unhook" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
	public EzUnhookCmdElements getEzUnhookCmdAccess() {
		return (pEzUnhookCmd != null) ? pEzUnhookCmd : (pEzUnhookCmd = new EzUnhookCmdElements());
	}
	
	public ParserRule getEzUnhookCmdRule() {
		return getEzUnhookCmdAccess().getRule();
	}

	//EzAliasCmd:
	//	"alias" alias=ID targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget |
	//	OSCBluetoothTarget);
	public EzAliasCmdElements getEzAliasCmdAccess() {
		return (pEzAliasCmd != null) ? pEzAliasCmd : (pEzAliasCmd = new EzAliasCmdElements());
	}
	
	public ParserRule getEzAliasCmdRule() {
		return getEzAliasCmdAccess().getRule();
	}

	//EzStatusCmd:
	//	"status" targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget | OSCBluetoothTarget);
	public EzStatusCmdElements getEzStatusCmdAccess() {
		return (pEzStatusCmd != null) ? pEzStatusCmd : (pEzStatusCmd = new EzStatusCmdElements());
	}
	
	public ParserRule getEzStatusCmdRule() {
		return getEzStatusCmdAccess().getRule();
	}

	//EzResetCmd:
	//	id="reset" verbose="-v"?;
	public EzResetCmdElements getEzResetCmdAccess() {
		return (pEzResetCmd != null) ? pEzResetCmd : (pEzResetCmd = new EzResetCmdElements());
	}
	
	public ParserRule getEzResetCmdRule() {
		return getEzResetCmdAccess().getRule();
	}

	//EzHelpCmd:
	//	id="help" verbose="-v"?;
	public EzHelpCmdElements getEzHelpCmdAccess() {
		return (pEzHelpCmd != null) ? pEzHelpCmd : (pEzHelpCmd = new EzHelpCmdElements());
	}
	
	public ParserRule getEzHelpCmdRule() {
		return getEzHelpCmdAccess().getRule();
	}

	//EzClearCmd:
	//	id="clear" verbose="-v"?;
	public EzClearCmdElements getEzClearCmdAccess() {
		return (pEzClearCmd != null) ? pEzClearCmd : (pEzClearCmd = new EzClearCmdElements());
	}
	
	public ParserRule getEzClearCmdRule() {
		return getEzClearCmdAccess().getRule();
	}

	//EzProtocolCmd:
	//	id="protocol" verbose="-v"?;
	public EzProtocolCmdElements getEzProtocolCmdAccess() {
		return (pEzProtocolCmd != null) ? pEzProtocolCmd : (pEzProtocolCmd = new EzProtocolCmdElements());
	}
	
	public ParserRule getEzProtocolCmdRule() {
		return getEzProtocolCmdAccess().getRule();
	}

	//EzListCmd:
	//	"list" addr=[EzAliasCmd];
	public EzListCmdElements getEzListCmdAccess() {
		return (pEzListCmd != null) ? pEzListCmd : (pEzListCmd = new EzListCmdElements());
	}
	
	public ParserRule getEzListCmdRule() {
		return getEzListCmdAccess().getRule();
	}

	//EzMsg:
	//	msg=(EzMsgLegacySet | EzMsgBang | EzMsgBind | EzMsgClock | EzMsgForward | EzMsgGet | EzMsgListen | EzMsgRemove |
	//	EzMsgSelect | EzMsgService | EzMsgSet | EzMsgUnforward | EzMsgUnlisten | EzMsgKinematics) | OSCSubDomain;
	public EzMsgElements getEzMsgAccess() {
		return (pEzMsg != null) ? pEzMsg : (pEzMsg = new EzMsgElements());
	}
	
	public ParserRule getEzMsgRule() {
		return getEzMsgAccess().getRule();
	}

	//EzMsgRemove:
	//	("remove" | "-") cmd=OSCExpr;
	public EzMsgRemoveElements getEzMsgRemoveAccess() {
		return (pEzMsgRemove != null) ? pEzMsgRemove : (pEzMsgRemove = new EzMsgRemoveElements());
	}
	
	public ParserRule getEzMsgRemoveRule() {
		return getEzMsgRemoveAccess().getRule();
	}

	//EzMsgGet:
	//	("get" | ":") cmd=OSCExpr;
	public EzMsgGetElements getEzMsgGetAccess() {
		return (pEzMsgGet != null) ? pEzMsgGet : (pEzMsgGet = new EzMsgGetElements());
	}
	
	public ParserRule getEzMsgGetRule() {
		return getEzMsgGetAccess().getRule();
	}

	//EzMsgBind:
	//	("bind" | "=") cmd=OSCExpr;
	public EzMsgBindElements getEzMsgBindAccess() {
		return (pEzMsgBind != null) ? pEzMsgBind : (pEzMsgBind = new EzMsgBindElements());
	}
	
	public ParserRule getEzMsgBindRule() {
		return getEzMsgBindAccess().getRule();
	}

	//EzMsgListen:
	//	("listen" | "!") cmd=OSCExpr;
	public EzMsgListenElements getEzMsgListenAccess() {
		return (pEzMsgListen != null) ? pEzMsgListen : (pEzMsgListen = new EzMsgListenElements());
	}
	
	public ParserRule getEzMsgListenRule() {
		return getEzMsgListenAccess().getRule();
	}

	//EzMsgService:
	//	("api" | "$") cmd=OSCExpr;
	public EzMsgServiceElements getEzMsgServiceAccess() {
		return (pEzMsgService != null) ? pEzMsgService : (pEzMsgService = new EzMsgServiceElements());
	}
	
	public ParserRule getEzMsgServiceRule() {
		return getEzMsgServiceAccess().getRule();
	}

	//EzMsgUnlisten:
	//	("unlisten" | "#") cmd=OSCExpr;
	public EzMsgUnlistenElements getEzMsgUnlistenAccess() {
		return (pEzMsgUnlisten != null) ? pEzMsgUnlisten : (pEzMsgUnlisten = new EzMsgUnlistenElements());
	}
	
	public ParserRule getEzMsgUnlistenRule() {
		return getEzMsgUnlistenAccess().getRule();
	}

	//EzMsgCmd:
	//	("command" | "%") cmd=OSCExpr;
	public EzMsgCmdElements getEzMsgCmdAccess() {
		return (pEzMsgCmd != null) ? pEzMsgCmd : (pEzMsgCmd = new EzMsgCmdElements());
	}
	
	public ParserRule getEzMsgCmdRule() {
		return getEzMsgCmdAccess().getRule();
	}

	//EzMsgClock:
	//	("clock" | "&") cmd=OSCExpr;
	public EzMsgClockElements getEzMsgClockAccess() {
		return (pEzMsgClock != null) ? pEzMsgClock : (pEzMsgClock = new EzMsgClockElements());
	}
	
	public ParserRule getEzMsgClockRule() {
		return getEzMsgClockAccess().getRule();
	}

	//EzMsgToggle:
	//	("toggle" | ")") cmd=OSCExpr;
	public EzMsgToggleElements getEzMsgToggleAccess() {
		return (pEzMsgToggle != null) ? pEzMsgToggle : (pEzMsgToggle = new EzMsgToggleElements());
	}
	
	public ParserRule getEzMsgToggleRule() {
		return getEzMsgToggleAccess().getRule();
	}

	//EzMsgBang:
	//	("bang" | "@") cmd=OSCExpr;
	public EzMsgBangElements getEzMsgBangAccess() {
		return (pEzMsgBang != null) ? pEzMsgBang : (pEzMsgBang = new EzMsgBangElements());
	}
	
	public ParserRule getEzMsgBangRule() {
		return getEzMsgBangAccess().getRule();
	}

	//EzMsgUnforward:
	//	("unforward" | "<") cmd=OSCExpr;
	public EzMsgUnforwardElements getEzMsgUnforwardAccess() {
		return (pEzMsgUnforward != null) ? pEzMsgUnforward : (pEzMsgUnforward = new EzMsgUnforwardElements());
	}
	
	public ParserRule getEzMsgUnforwardRule() {
		return getEzMsgUnforwardAccess().getRule();
	}

	//EzMsgForward:
	//	(">" | "forward") cmd=OSCExpr;
	public EzMsgForwardElements getEzMsgForwardAccess() {
		return (pEzMsgForward != null) ? pEzMsgForward : (pEzMsgForward = new EzMsgForwardElements());
	}
	
	public ParserRule getEzMsgForwardRule() {
		return getEzMsgForwardAccess().getRule();
	}

	//EzMsgSet:
	//	("set" | "+") cmd=OSCExpr;
	public EzMsgSetElements getEzMsgSetAccess() {
		return (pEzMsgSet != null) ? pEzMsgSet : (pEzMsgSet = new EzMsgSetElements());
	}
	
	public ParserRule getEzMsgSetRule() {
		return getEzMsgSetAccess().getRule();
	}

	//EzMsgLegacySet:
	//	cmd=OSCExpr;
	public EzMsgLegacySetElements getEzMsgLegacySetAccess() {
		return (pEzMsgLegacySet != null) ? pEzMsgLegacySet : (pEzMsgLegacySet = new EzMsgLegacySetElements());
	}
	
	public ParserRule getEzMsgLegacySetRule() {
		return getEzMsgLegacySetAccess().getRule();
	}

	//EzMsgSelect:
	//	("select" | ".") cmd=OSCExpr;
	public EzMsgSelectElements getEzMsgSelectAccess() {
		return (pEzMsgSelect != null) ? pEzMsgSelect : (pEzMsgSelect = new EzMsgSelectElements());
	}
	
	public ParserRule getEzMsgSelectRule() {
		return getEzMsgSelectAccess().getRule();
	}

	//EzMsgKinematics:
	//	("kinematic" | "k") cmd=OSCExpr;
	public EzMsgKinematicsElements getEzMsgKinematicsAccess() {
		return (pEzMsgKinematics != null) ? pEzMsgKinematics : (pEzMsgKinematics = new EzMsgKinematicsElements());
	}
	
	public ParserRule getEzMsgKinematicsRule() {
		return getEzMsgKinematicsAccess().getRule();
	}

	//EzMsgTrigger:
	//	("trigger" | "T") cmd=OSCExpr;
	public EzMsgTriggerElements getEzMsgTriggerAccess() {
		return (pEzMsgTrigger != null) ? pEzMsgTrigger : (pEzMsgTrigger = new EzMsgTriggerElements());
	}
	
	public ParserRule getEzMsgTriggerRule() {
		return getEzMsgTriggerAccess().getRule();
	}

	//OSCExpr:
	//	path=OSCAddr args+=OSCArg* targets+=(OSCUDPTarget | OSCTCPTarget | OSCUSBTarget | OSCXBeeTarget | OSCHttpTarget |
	//	OSCBluetoothTarget)?;
	public OSCExprElements getOSCExprAccess() {
		return (pOSCExpr != null) ? pOSCExpr : (pOSCExpr = new OSCExprElements());
	}
	
	public ParserRule getOSCExprRule() {
		return getOSCExprAccess().getRule();
	}

	//OSCSubDomain:
	//	"{" expr=EzMsg "}";
	public OSCSubDomainElements getOSCSubDomainAccess() {
		return (pOSCSubDomain != null) ? pOSCSubDomain : (pOSCSubDomain = new OSCSubDomainElements());
	}
	
	public ParserRule getOSCSubDomainRule() {
		return getOSCSubDomainAccess().getRule();
	}

	//terminal OSCAddr:
	//	(("/" ("a".."z" | "A".."Z")) ("a".."z" | "A".."Z" | "0".."9")*)+;
	public TerminalRule getOSCAddrRule() {
		return (tOSCAddr != null) ? tOSCAddr : (tOSCAddr = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OSCAddr"));
	} 

	//OSCArg:
	//	einteger | efloat | STRING | eboolean;
	public OSCArgElements getOSCArgAccess() {
		return (pOSCArg != null) ? pOSCArg : (pOSCArg = new OSCArgElements());
	}
	
	public ParserRule getOSCArgRule() {
		return getOSCArgAccess().getRule();
	}

	//OSCUDPTarget:
	//	proto="udp://" addr=IPExpr ("<" format=EzFormats ">")?;
	public OSCUDPTargetElements getOSCUDPTargetAccess() {
		return (pOSCUDPTarget != null) ? pOSCUDPTarget : (pOSCUDPTarget = new OSCUDPTargetElements());
	}
	
	public ParserRule getOSCUDPTargetRule() {
		return getOSCUDPTargetAccess().getRule();
	}

	//OSCTCPTarget:
	//	proto="tcp://" addr=IPExpr ("<" format=EzFormats ">")?;
	public OSCTCPTargetElements getOSCTCPTargetAccess() {
		return (pOSCTCPTarget != null) ? pOSCTCPTarget : (pOSCTCPTarget = new OSCTCPTargetElements());
	}
	
	public ParserRule getOSCTCPTargetRule() {
		return getOSCTCPTargetAccess().getRule();
	}

	//OSCXBeeTarget:
	//	proto="xbee://" addr=IPExpr ("<" format=EzFormats ">")?;
	public OSCXBeeTargetElements getOSCXBeeTargetAccess() {
		return (pOSCXBeeTarget != null) ? pOSCXBeeTarget : (pOSCXBeeTarget = new OSCXBeeTargetElements());
	}
	
	public ParserRule getOSCXBeeTargetRule() {
		return getOSCXBeeTargetAccess().getRule();
	}

	//OSCHttpTarget:
	//	proto="http://" addr=IPExpr ("<" format=EzFormats ">")?;
	public OSCHttpTargetElements getOSCHttpTargetAccess() {
		return (pOSCHttpTarget != null) ? pOSCHttpTarget : (pOSCHttpTarget = new OSCHttpTargetElements());
	}
	
	public ParserRule getOSCHttpTargetRule() {
		return getOSCHttpTargetAccess().getRule();
	}

	//OSCBluetoothTarget:
	//	proto="bt://" addr=IPExpr ("<" format=EzFormats ">")?;
	public OSCBluetoothTargetElements getOSCBluetoothTargetAccess() {
		return (pOSCBluetoothTarget != null) ? pOSCBluetoothTarget : (pOSCBluetoothTarget = new OSCBluetoothTargetElements());
	}
	
	public ParserRule getOSCBluetoothTargetRule() {
		return getOSCBluetoothTargetAccess().getRule();
	}

	//OSCUSBTarget:
	//	proto="usb://" addr=(OSCUSBLinuxMacAddr | USBWinPort) ("@" speed=Speed)? ("<" format=EzFormats ">")?;
	public OSCUSBTargetElements getOSCUSBTargetAccess() {
		return (pOSCUSBTarget != null) ? pOSCUSBTarget : (pOSCUSBTarget = new OSCUSBTargetElements());
	}
	
	public ParserRule getOSCUSBTargetRule() {
		return getOSCUSBTargetAccess().getRule();
	}

	//OSCUbqTarget:
	//	proto="midi://" addr=(OSCUSBLinuxMacAddr | USBWinPort) ("<" format=EzFormats ">")?;
	public OSCUbqTargetElements getOSCUbqTargetAccess() {
		return (pOSCUbqTarget != null) ? pOSCUbqTarget : (pOSCUbqTarget = new OSCUbqTargetElements());
	}
	
	public ParserRule getOSCUbqTargetRule() {
		return getOSCUbqTargetAccess().getRule();
	}

	//terminal OSCUSBLinuxMacAddr:
	//	(("/" ("a".."z" | "A".."Z")) ("a".."z" | "A".."Z" | "0".."9" | "." | "-")*)+;
	public TerminalRule getOSCUSBLinuxMacAddrRule() {
		return (tOSCUSBLinuxMacAddr != null) ? tOSCUSBLinuxMacAddr : (tOSCUSBLinuxMacAddr = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "OSCUSBLinuxMacAddr"));
	} 

	//enum EzFormats:
	//	osc | midi | dmx | oscableton | oscwiimote | oscresolume | tuio | tuio2 | thingm | firmata | i2cfirmata | pachube |
	//	ubiquino;
	public EzFormatsElements getEzFormatsAccess() {
		return (unknownRuleEzFormats != null) ? unknownRuleEzFormats : (unknownRuleEzFormats = new EzFormatsElements());
	}
	
	public EnumRule getEzFormatsRule() {
		return getEzFormatsAccess().getRule();
	}

	//terminal USBWinPort:
	//	"COM0" | "COM1" | "COM2" | "COM3" | "COM4" | "COM5" | "COM6" | "COM7" | "COM8" | "COM9" | "COM10" | "COM11" | "COM12"
	//	| "COM13" | "COM14" | "COM15" | "COM16" | "COM17" | "COM18" | "COM19" | "COM20";
	public TerminalRule getUSBWinPortRule() {
		return (tUSBWinPort != null) ? tUSBWinPort : (tUSBWinPort = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "USBWinPort"));
	} 

	//terminal IPExpr:
	//	(("0".."9" | "*" | ".")+ | "localhost")? (":" INT)?;
	public TerminalRule getIPExprRule() {
		return (tIPExpr != null) ? tIPExpr : (tIPExpr = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "IPExpr"));
	} 

	//Speed:
	//	speed=("300" | "1200" | "2400" | "4800" | "9600" | "14400" | "19200" | "28800" | "38400" | "57600" | "115200");
	public SpeedElements getSpeedAccess() {
		return (pSpeed != null) ? pSpeed : (pSpeed = new SpeedElements());
	}
	
	public ParserRule getSpeedRule() {
		return getSpeedAccess().getRule();
	}

	//terminal httpAddr:
	//	"A".."Z" "0".."9" ":" "." "/";
	public TerminalRule getHttpAddrRule() {
		return (tHttpAddr != null) ? tHttpAddr : (tHttpAddr = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "httpAddr"));
	} 

	//terminal usbmac:
	//	"A".."Z" ("A".."Z" "0".."9" "-")+;
	public TerminalRule getUsbmacRule() {
		return (tUsbmac != null) ? tUsbmac : (tUsbmac = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "usbmac"));
	} 

	//terminal ebyte returns ecore::EByteObject:
	//	"0x" ("0".."9" | "A".."F") ("0".."9" | "A".."F") | ("0".."9" | "1".."9" "0".."9" | "1" "0".."9" "0".."9" | "2"
	//	"0".."5" "0".."5");
	public TerminalRule getEbyteRule() {
		return (tEbyte != null) ? tEbyte : (tEbyte = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ebyte"));
	} 

	//terminal eblob returns ecore::ECharacterObject:
	//	"b";
	public TerminalRule getEblobRule() {
		return (tEblob != null) ? tEblob : (tEblob = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eblob"));
	} 

	//terminal eimpulse returns ecore::ECharacterObject:
	//	"I";
	public TerminalRule getEimpulseRule() {
		return (tEimpulse != null) ? tEimpulse : (tEimpulse = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eimpulse"));
	} 

	//terminal etimetag returns ecore::ECharacterObject:
	//	"t";
	public TerminalRule getEtimetagRule() {
		return (tEtimetag != null) ? tEtimetag : (tEtimetag = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "etimetag"));
	} 

	//terminal enull returns ecore::ECharacterObject:
	//	"N";
	public TerminalRule getEnullRule() {
		return (tEnull != null) ? tEnull : (tEnull = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "enull"));
	} 

	//terminal eboolean returns ecore::EBooleanObject:
	//	"T" | "F";
	public TerminalRule getEbooleanRule() {
		return (tEboolean != null) ? tEboolean : (tEboolean = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "eboolean"));
	} 

	//terminal efloat returns ecore::EFloatObject:
	//	"0".."9"* "." "0".."9"+ "f";
	public TerminalRule getEfloatRule() {
		return (tEfloat != null) ? tEfloat : (tEfloat = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "efloat"));
	} 

	//terminal einteger returns ecore::EIntegerObject:
	//	"0".."9"+ "i";
	public TerminalRule getEintegerRule() {
		return (tEinteger != null) ? tEinteger : (tEinteger = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "einteger"));
	} 

	////
	////
	////
	//JvmVar:
	//	"jvar" name=ID "as" javaTypes+=[jvmTypes::JvmType|QualifiedName] ("," javaTypes+=[jvmTypes::JvmType|QualifiedName])*
	//	"!";
	public JvmVarElements getJvmVarAccess() {
		return (pJvmVar != null) ? pJvmVar : (pJvmVar = new JvmVarElements());
	}
	
	public ParserRule getJvmVarRule() {
		return getJvmVarAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return (pQualifiedName != null) ? pQualifiedName : (pQualifiedName = new QualifiedNameElements());
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	////
	////
	////
	//ExprModel:
	//	isTested?="tested"? "model" name=ID usings+=Using* (elements+=Element | functions+=FunctionDeclaration)*;
	public ExprModelElements getExprModelAccess() {
		return (pExprModel != null) ? pExprModel : (pExprModel = new ExprModelElements());
	}
	
	public ParserRule getExprModelRule() {
		return getExprModelAccess().getRule();
	}

	//Using:
	//	"using" importedNamespace=ImportID;
	public UsingElements getUsingAccess() {
		return (pUsing != null) ? pUsing : (pUsing = new UsingElements());
	}
	
	public ParserRule getUsingRule() {
		return getUsingAccess().getRule();
	}

	//// ... and ID with .* at the end.
	//ImportID:
	//	ID ("." "*");
	public ImportIDElements getImportIDAccess() {
		return (pImportID != null) ? pImportID : (pImportID = new ImportIDElements());
	}
	
	public ParserRule getImportIDRule() {
		return getImportIDAccess().getRule();
	}

	//Element:
	//	VarDecl | Formula | EnumDecl | Return;
	public ElementElements getElementAccess() {
		return (pElement != null) ? pElement : (pElement = new ElementElements());
	}
	
	public ParserRule getElementRule() {
		return getElementAccess().getRule();
	}

	//FunctionDeclaration returns Symbol:
	//	{FunctionDeclaration} "function" type=Type name=ID "(" (params+=Parameter ("," params+=Parameter)*)? ")" // FUNC
	//	"{" elements+=Element* "}";
	public FunctionDeclarationElements getFunctionDeclarationAccess() {
		return (pFunctionDeclaration != null) ? pFunctionDeclaration : (pFunctionDeclaration = new FunctionDeclarationElements());
	}
	
	public ParserRule getFunctionDeclarationRule() {
		return getFunctionDeclarationAccess().getRule();
	}

	//Return:
	//	"return" expr=Expr ";";
	public ReturnElements getReturnAccess() {
		return (pReturn != null) ? pReturn : (pReturn = new ReturnElements());
	}
	
	public ParserRule getReturnRule() {
		return getReturnAccess().getRule();
	}

	//Parameter returns Symbol:
	//	{Parameter} type=Type name=ID;
	public ParameterElements getParameterAccess() {
		return (pParameter != null) ? pParameter : (pParameter = new ParameterElements());
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}

	//EnumDecl:
	//	"enum" name=ID "{" literals+=EnumLiteral* "}";
	public EnumDeclElements getEnumDeclAccess() {
		return (pEnumDecl != null) ? pEnumDecl : (pEnumDecl = new EnumDeclElements());
	}
	
	public ParserRule getEnumDeclRule() {
		return getEnumDeclAccess().getRule();
	}

	//EnumLiteral returns Symbol:
	//	{EnumLiteral} name=ID;
	public EnumLiteralElements getEnumLiteralAccess() {
		return (pEnumLiteral != null) ? pEnumLiteral : (pEnumLiteral = new EnumLiteralElements());
	}
	
	public ParserRule getEnumLiteralRule() {
		return getEnumLiteralAccess().getRule();
	}

	//VarDecl returns Symbol:
	//	{VarDecl} readonly?="readonly"? "var" type=Type name=ID ("=" init=Expr)? ";";
	public VarDeclElements getVarDeclAccess() {
		return (pVarDecl != null) ? pVarDecl : (pVarDecl = new VarDeclElements());
	}
	
	public ParserRule getVarDeclRule() {
		return getVarDeclAccess().getRule();
	}

	//Type:
	//	PrimitiveType | ArrayType;
	public TypeElements getTypeAccess() {
		return (pType != null) ? pType : (pType = new TypeElements());
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}

	//PrimitiveType:
	//	IntType | BoolType | FloatType | EnumType | StringType;
	public PrimitiveTypeElements getPrimitiveTypeAccess() {
		return (pPrimitiveType != null) ? pPrimitiveType : (pPrimitiveType = new PrimitiveTypeElements());
	}
	
	public ParserRule getPrimitiveTypeRule() {
		return getPrimitiveTypeAccess().getRule();
	}

	//ArrayType:
	//	{ArrayType} "array" "[" baseType=Type "]";
	public ArrayTypeElements getArrayTypeAccess() {
		return (pArrayType != null) ? pArrayType : (pArrayType = new ArrayTypeElements());
	}
	
	public ParserRule getArrayTypeRule() {
		return getArrayTypeAccess().getRule();
	}

	//EnumType:
	//	enumRef=[EnumDecl];
	public EnumTypeElements getEnumTypeAccess() {
		return (pEnumType != null) ? pEnumType : (pEnumType = new EnumTypeElements());
	}
	
	public ParserRule getEnumTypeRule() {
		return getEnumTypeAccess().getRule();
	}

	//IntType:
	//	{IntType} "int";
	public IntTypeElements getIntTypeAccess() {
		return (pIntType != null) ? pIntType : (pIntType = new IntTypeElements());
	}
	
	public ParserRule getIntTypeRule() {
		return getIntTypeAccess().getRule();
	}

	//BoolType:
	//	{BoolType} "bool";
	public BoolTypeElements getBoolTypeAccess() {
		return (pBoolType != null) ? pBoolType : (pBoolType = new BoolTypeElements());
	}
	
	public ParserRule getBoolTypeRule() {
		return getBoolTypeAccess().getRule();
	}

	//FloatType:
	//	{FloatType} "float";
	public FloatTypeElements getFloatTypeAccess() {
		return (pFloatType != null) ? pFloatType : (pFloatType = new FloatTypeElements());
	}
	
	public ParserRule getFloatTypeRule() {
		return getFloatTypeAccess().getRule();
	}

	//StringType:
	//	{StringType} "string";
	public StringTypeElements getStringTypeAccess() {
		return (pStringType != null) ? pStringType : (pStringType = new StringTypeElements());
	}
	
	public ParserRule getStringTypeRule() {
		return getStringTypeAccess().getRule();
	}

	//Formula returns Symbol:
	//	{Formula} "calc" type=Type name=ID "=" expr=Expr ";";
	public FormulaElements getFormulaAccess() {
		return (pFormula != null) ? pFormula : (pFormula = new FormulaElements());
	}
	
	public ParserRule getFormulaRule() {
		return getFormulaAccess().getRule();
	}

	//Expr:
	//	Comparison;
	public ExprElements getExprAccess() {
		return (pExpr != null) ? pExpr : (pExpr = new ExprElements());
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}

	//Comparison returns Expression:
	//	Addition ({Equals.left=current} "==" right=Addition)?;
	public ComparisonElements getComparisonAccess() {
		return (pComparison != null) ? pComparison : (pComparison = new ComparisonElements());
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//Addition returns Expression:
	//	Multiplication ({Plus.left=current} "+" right=Multiplication)*;
	public AdditionElements getAdditionAccess() {
		return (pAddition != null) ? pAddition : (pAddition = new AdditionElements());
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}

	//Multiplication returns Expression:
	//	PostfixOperators ({Multi.left=current} "*" right=PostfixOperators)*;
	public MultiplicationElements getMultiplicationAccess() {
		return (pMultiplication != null) ? pMultiplication : (pMultiplication = new MultiplicationElements());
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}

	//PostfixOperators returns Expression:
	//	Atomic ({ArrayAccess.expr=current} "[" index=Expr "]")?;
	public PostfixOperatorsElements getPostfixOperatorsAccess() {
		return (pPostfixOperators != null) ? pPostfixOperators : (pPostfixOperators = new PostfixOperatorsElements());
	}
	
	public ParserRule getPostfixOperatorsRule() {
		return getPostfixOperatorsAccess().getRule();
	}

	//Atomic returns Expression:
	//	{SymbolRef} symbol=[Symbol|QID] ("(" actuals+=Expr? ("," actuals+=Expr)* ")")? // FUNC
	//	| {NumberLiteral} value=efloat | {StringLiteral} value=STRING;
	public AtomicElements getAtomicAccess() {
		return (pAtomic != null) ? pAtomic : (pAtomic = new AtomicElements());
	}
	
	public ParserRule getAtomicRule() {
		return getAtomicAccess().getRule();
	}

	//QID:
	//	ID ("." ID)*;
	public QIDElements getQIDAccess() {
		return (pQID != null) ? pQID : (pQID = new QIDElements());
	}
	
	public ParserRule getQIDRule() {
		return getQIDAccess().getRule();
	}

	//terminal INT returns ecore::EInt:
	//	"$$$don\'t use this anymore$$$";
	public TerminalRule getINTRule() {
		return (tINT != null) ? tINT : (tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "INT"));
	} 

	//XExpression:
	//	XAssignment;
	public XbaseGrammarAccess.XExpressionElements getXExpressionAccess() {
		return gaXbase.getXExpressionAccess();
	}
	
	public ParserRule getXExpressionRule() {
		return getXExpressionAccess().getRule();
	}

	//XAssignment returns XExpression:
	//	{XAssignment} / * (declaringType=[types::JvmDeclaredType] '::')? * / feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign value=XAssignment | XOrExpression (=> ({XBinaryOperation.leftOperand=current}
	//	feature=[types::JvmIdentifiableElement|OpMultiAssign]) rightOperand=XAssignment)?;
	public XbaseGrammarAccess.XAssignmentElements getXAssignmentAccess() {
		return gaXbase.getXAssignmentAccess();
	}
	
	public ParserRule getXAssignmentRule() {
		return getXAssignmentAccess().getRule();
	}

	//OpSingleAssign:
	//	"=";
	public XbaseGrammarAccess.OpSingleAssignElements getOpSingleAssignAccess() {
		return gaXbase.getOpSingleAssignAccess();
	}
	
	public ParserRule getOpSingleAssignRule() {
		return getOpSingleAssignAccess().getRule();
	}

	//OpMultiAssign:
	//	"+=";
	public XbaseGrammarAccess.OpMultiAssignElements getOpMultiAssignAccess() {
		return gaXbase.getOpMultiAssignAccess();
	}
	
	public ParserRule getOpMultiAssignRule() {
		return getOpMultiAssignAccess().getRule();
	}

	//XOrExpression returns XExpression:
	//	XAndExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOr])
	//	rightOperand=XAndExpression)*;
	public XbaseGrammarAccess.XOrExpressionElements getXOrExpressionAccess() {
		return gaXbase.getXOrExpressionAccess();
	}
	
	public ParserRule getXOrExpressionRule() {
		return getXOrExpressionAccess().getRule();
	}

	//OpOr:
	//	"||";
	public XbaseGrammarAccess.OpOrElements getOpOrAccess() {
		return gaXbase.getOpOrAccess();
	}
	
	public ParserRule getOpOrRule() {
		return getOpOrAccess().getRule();
	}

	//XAndExpression returns XExpression:
	//	XEqualityExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAnd])
	//	rightOperand=XEqualityExpression)*;
	public XbaseGrammarAccess.XAndExpressionElements getXAndExpressionAccess() {
		return gaXbase.getXAndExpressionAccess();
	}
	
	public ParserRule getXAndExpressionRule() {
		return getXAndExpressionAccess().getRule();
	}

	//OpAnd:
	//	"&&";
	public XbaseGrammarAccess.OpAndElements getOpAndAccess() {
		return gaXbase.getOpAndAccess();
	}
	
	public ParserRule getOpAndRule() {
		return getOpAndAccess().getRule();
	}

	//XEqualityExpression returns XExpression:
	//	XRelationalExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpEquality])
	//	rightOperand=XRelationalExpression)*;
	public XbaseGrammarAccess.XEqualityExpressionElements getXEqualityExpressionAccess() {
		return gaXbase.getXEqualityExpressionAccess();
	}
	
	public ParserRule getXEqualityExpressionRule() {
		return getXEqualityExpressionAccess().getRule();
	}

	//OpEquality:
	//	"==" | "!=";
	public XbaseGrammarAccess.OpEqualityElements getOpEqualityAccess() {
		return gaXbase.getOpEqualityAccess();
	}
	
	public ParserRule getOpEqualityRule() {
		return getOpEqualityAccess().getRule();
	}

	//XRelationalExpression returns XExpression:
	//	XOtherOperatorExpression (=> ({XInstanceOfExpression.expression=current} "instanceof") type=JvmTypeReference | =>
	//	({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpCompare])
	//	rightOperand=XOtherOperatorExpression)*;
	public XbaseGrammarAccess.XRelationalExpressionElements getXRelationalExpressionAccess() {
		return gaXbase.getXRelationalExpressionAccess();
	}
	
	public ParserRule getXRelationalExpressionRule() {
		return getXRelationalExpressionAccess().getRule();
	}

	//OpCompare:
	//	">=" | "<=" | ">" | "<";
	public XbaseGrammarAccess.OpCompareElements getOpCompareAccess() {
		return gaXbase.getOpCompareAccess();
	}
	
	public ParserRule getOpCompareRule() {
		return getOpCompareAccess().getRule();
	}

	//XOtherOperatorExpression returns XExpression:
	//	XAdditiveExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpOther])
	//	rightOperand=XAdditiveExpression)*;
	public XbaseGrammarAccess.XOtherOperatorExpressionElements getXOtherOperatorExpressionAccess() {
		return gaXbase.getXOtherOperatorExpressionAccess();
	}
	
	public ParserRule getXOtherOperatorExpressionRule() {
		return getXOtherOperatorExpressionAccess().getRule();
	}

	//OpOther:
	//	"->" | ".." | "=>" | ">" (=> (">" ">") | ">") | "<" (=> ("<" "<") | "<") | "<>" | "?:" | "<=>";
	public XbaseGrammarAccess.OpOtherElements getOpOtherAccess() {
		return gaXbase.getOpOtherAccess();
	}
	
	public ParserRule getOpOtherRule() {
		return getOpOtherAccess().getRule();
	}

	//XAdditiveExpression returns XExpression:
	//	XMultiplicativeExpression (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpAdd])
	//	rightOperand=XMultiplicativeExpression)*;
	public XbaseGrammarAccess.XAdditiveExpressionElements getXAdditiveExpressionAccess() {
		return gaXbase.getXAdditiveExpressionAccess();
	}
	
	public ParserRule getXAdditiveExpressionRule() {
		return getXAdditiveExpressionAccess().getRule();
	}

	//OpAdd:
	//	"+" | "-";
	public XbaseGrammarAccess.OpAddElements getOpAddAccess() {
		return gaXbase.getOpAddAccess();
	}
	
	public ParserRule getOpAddRule() {
		return getOpAddAccess().getRule();
	}

	//XMultiplicativeExpression returns XExpression:
	//	XUnaryOperation (=> ({XBinaryOperation.leftOperand=current} feature=[types::JvmIdentifiableElement|OpMulti])
	//	rightOperand=XUnaryOperation)*;
	public XbaseGrammarAccess.XMultiplicativeExpressionElements getXMultiplicativeExpressionAccess() {
		return gaXbase.getXMultiplicativeExpressionAccess();
	}
	
	public ParserRule getXMultiplicativeExpressionRule() {
		return getXMultiplicativeExpressionAccess().getRule();
	}

	//OpMulti:
	//	"*" | "**" | "/" | "%";
	public XbaseGrammarAccess.OpMultiElements getOpMultiAccess() {
		return gaXbase.getOpMultiAccess();
	}
	
	public ParserRule getOpMultiRule() {
		return getOpMultiAccess().getRule();
	}

	//XUnaryOperation returns XExpression:
	//	{XUnaryOperation} feature=[types::JvmIdentifiableElement|OpUnary] operand=XCastedExpression | XCastedExpression;
	public XbaseGrammarAccess.XUnaryOperationElements getXUnaryOperationAccess() {
		return gaXbase.getXUnaryOperationAccess();
	}
	
	public ParserRule getXUnaryOperationRule() {
		return getXUnaryOperationAccess().getRule();
	}

	//OpUnary:
	//	"!" | "-" | "+";
	public XbaseGrammarAccess.OpUnaryElements getOpUnaryAccess() {
		return gaXbase.getOpUnaryAccess();
	}
	
	public ParserRule getOpUnaryRule() {
		return getOpUnaryAccess().getRule();
	}

	//XCastedExpression returns XExpression:
	//	XMemberFeatureCall (=> ({XCastedExpression.target=current} "as") type=JvmTypeReference)*;
	public XbaseGrammarAccess.XCastedExpressionElements getXCastedExpressionAccess() {
		return gaXbase.getXCastedExpressionAccess();
	}
	
	public ParserRule getXCastedExpressionRule() {
		return getXCastedExpressionAccess().getRule();
	}

	//XMemberFeatureCall returns XExpression:
	//	XPrimaryExpression (=> ({XAssignment.assignable=current} "." feature=[types::JvmIdentifiableElement|ValidID]
	//	OpSingleAssign) value=XAssignment | => ({XMemberFeatureCall.memberCallTarget=current} ("." | nullSafe?="?." |
	//	spreading?="*.")) ("<" typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")?
	//	feature=[types::JvmIdentifiableElement|ValidID] (=> explicitOperationCall?="(" (memberCallArguments+=XShortClosure |
	//	memberCallArguments+=XExpression ("," memberCallArguments+=XExpression)*)? ")")? memberCallArguments+=XClosure?)*;
	public XbaseGrammarAccess.XMemberFeatureCallElements getXMemberFeatureCallAccess() {
		return gaXbase.getXMemberFeatureCallAccess();
	}
	
	public ParserRule getXMemberFeatureCallRule() {
		return getXMemberFeatureCallAccess().getRule();
	}

	//XPrimaryExpression returns XExpression:
	//	XConstructorCall | XBlockExpression | XSwitchExpression | XFeatureCall | XLiteral | XIfExpression | XForLoopExpression
	//	| XWhileExpression | XDoWhileExpression | XThrowExpression | XReturnExpression | XTryCatchFinallyExpression |
	//	XParenthesizedExpression;
	public XbaseGrammarAccess.XPrimaryExpressionElements getXPrimaryExpressionAccess() {
		return gaXbase.getXPrimaryExpressionAccess();
	}
	
	public ParserRule getXPrimaryExpressionRule() {
		return getXPrimaryExpressionAccess().getRule();
	}

	//XLiteral returns XExpression:
	//	XClosure | XBooleanLiteral | XNumberLiteral | XNullLiteral | XStringLiteral | XTypeLiteral;
	public XbaseGrammarAccess.XLiteralElements getXLiteralAccess() {
		return gaXbase.getXLiteralAccess();
	}
	
	public ParserRule getXLiteralRule() {
		return getXLiteralAccess().getRule();
	}

	//XClosure returns XExpression:
	//	=> ({XClosure} "[") => ((declaredFormalParameters+=JvmFormalParameter (","
	//	declaredFormalParameters+=JvmFormalParameter)*)? explicitSyntax?="|")? expression=XExpressionInClosure "]";
	public XbaseGrammarAccess.XClosureElements getXClosureAccess() {
		return gaXbase.getXClosureAccess();
	}
	
	public ParserRule getXClosureRule() {
		return getXClosureAccess().getRule();
	}

	//XExpressionInClosure returns XExpression:
	//	{XBlockExpression} (expressions+=XExpressionInsideBlock ";"?)*;
	public XbaseGrammarAccess.XExpressionInClosureElements getXExpressionInClosureAccess() {
		return gaXbase.getXExpressionInClosureAccess();
	}
	
	public ParserRule getXExpressionInClosureRule() {
		return getXExpressionInClosureAccess().getRule();
	}

	//XShortClosure returns XExpression:
	//	=> ({XClosure} (declaredFormalParameters+=JvmFormalParameter ("," declaredFormalParameters+=JvmFormalParameter)*)?
	//	explicitSyntax?="|") expression=XExpression;
	public XbaseGrammarAccess.XShortClosureElements getXShortClosureAccess() {
		return gaXbase.getXShortClosureAccess();
	}
	
	public ParserRule getXShortClosureRule() {
		return getXShortClosureAccess().getRule();
	}

	//XParenthesizedExpression returns XExpression:
	//	"(" XExpression ")";
	public XbaseGrammarAccess.XParenthesizedExpressionElements getXParenthesizedExpressionAccess() {
		return gaXbase.getXParenthesizedExpressionAccess();
	}
	
	public ParserRule getXParenthesizedExpressionRule() {
		return getXParenthesizedExpressionAccess().getRule();
	}

	//XIfExpression returns XExpression:
	//	{XIfExpression} "if" "(" if=XExpression ")" then=XExpression ("else" else=XExpression)?;
	public XbaseGrammarAccess.XIfExpressionElements getXIfExpressionAccess() {
		return gaXbase.getXIfExpressionAccess();
	}
	
	public ParserRule getXIfExpressionRule() {
		return getXIfExpressionAccess().getRule();
	}

	//XSwitchExpression returns XExpression:
	//	{XSwitchExpression} "switch" (=> (localVarName=ValidID ":")? switch=XExpression | => ("(" localVarName=ValidID ":")
	//	switch=XExpression ")") "{" cases+=XCasePart+ ("default" ":" default=XExpression)? "}";
	public XbaseGrammarAccess.XSwitchExpressionElements getXSwitchExpressionAccess() {
		return gaXbase.getXSwitchExpressionAccess();
	}
	
	public ParserRule getXSwitchExpressionRule() {
		return getXSwitchExpressionAccess().getRule();
	}

	//XCasePart:
	//	typeGuard=JvmTypeReference? ("case" case=XExpression)? ":" then=XExpression;
	public XbaseGrammarAccess.XCasePartElements getXCasePartAccess() {
		return gaXbase.getXCasePartAccess();
	}
	
	public ParserRule getXCasePartRule() {
		return getXCasePartAccess().getRule();
	}

	//XForLoopExpression returns XExpression:
	//	{XForLoopExpression} "for" "(" declaredParam=JvmFormalParameter ":" forExpression=XExpression ")"
	//	eachExpression=XExpression;
	public XbaseGrammarAccess.XForLoopExpressionElements getXForLoopExpressionAccess() {
		return gaXbase.getXForLoopExpressionAccess();
	}
	
	public ParserRule getXForLoopExpressionRule() {
		return getXForLoopExpressionAccess().getRule();
	}

	//XWhileExpression returns XExpression:
	//	{XWhileExpression} "while" "(" predicate=XExpression ")" body=XExpression;
	public XbaseGrammarAccess.XWhileExpressionElements getXWhileExpressionAccess() {
		return gaXbase.getXWhileExpressionAccess();
	}
	
	public ParserRule getXWhileExpressionRule() {
		return getXWhileExpressionAccess().getRule();
	}

	//XDoWhileExpression returns XExpression:
	//	{XDoWhileExpression} "do" body=XExpression "while" "(" predicate=XExpression ")";
	public XbaseGrammarAccess.XDoWhileExpressionElements getXDoWhileExpressionAccess() {
		return gaXbase.getXDoWhileExpressionAccess();
	}
	
	public ParserRule getXDoWhileExpressionRule() {
		return getXDoWhileExpressionAccess().getRule();
	}

	//XBlockExpression returns XExpression:
	//	{XBlockExpression} "{" (expressions+=XExpressionInsideBlock ";"?)* "}";
	public XbaseGrammarAccess.XBlockExpressionElements getXBlockExpressionAccess() {
		return gaXbase.getXBlockExpressionAccess();
	}
	
	public ParserRule getXBlockExpressionRule() {
		return getXBlockExpressionAccess().getRule();
	}

	//XExpressionInsideBlock returns XExpression:
	//	XVariableDeclaration | XExpression;
	public XbaseGrammarAccess.XExpressionInsideBlockElements getXExpressionInsideBlockAccess() {
		return gaXbase.getXExpressionInsideBlockAccess();
	}
	
	public ParserRule getXExpressionInsideBlockRule() {
		return getXExpressionInsideBlockAccess().getRule();
	}

	//XVariableDeclaration returns XExpression:
	//	{XVariableDeclaration} (writeable?="var" | "val") (=> (type=JvmTypeReference name=ValidID) | name=ValidID) ("="
	//	right=XExpression)?;
	public XbaseGrammarAccess.XVariableDeclarationElements getXVariableDeclarationAccess() {
		return gaXbase.getXVariableDeclarationAccess();
	}
	
	public ParserRule getXVariableDeclarationRule() {
		return getXVariableDeclarationAccess().getRule();
	}

	//JvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference? name=ValidID;
	public XbaseGrammarAccess.JvmFormalParameterElements getJvmFormalParameterAccess() {
		return gaXbase.getJvmFormalParameterAccess();
	}
	
	public ParserRule getJvmFormalParameterRule() {
		return getJvmFormalParameterAccess().getRule();
	}

	//FullJvmFormalParameter returns types::JvmFormalParameter:
	//	parameterType=JvmTypeReference name=ValidID;
	public XbaseGrammarAccess.FullJvmFormalParameterElements getFullJvmFormalParameterAccess() {
		return gaXbase.getFullJvmFormalParameterAccess();
	}
	
	public ParserRule getFullJvmFormalParameterRule() {
		return getFullJvmFormalParameterAccess().getRule();
	}

	//XFeatureCall returns XExpression:
	//	{XFeatureCall} declaringType=[types::JvmDeclaredType|StaticQualifier]? ("<" typeArguments+=JvmArgumentTypeReference
	//	("," typeArguments+=JvmArgumentTypeReference)* ">")? feature=[types::JvmIdentifiableElement|IdOrSuper] (=>
	//	explicitOperationCall?="(" (featureCallArguments+=XShortClosure | featureCallArguments+=XExpression (","
	//	featureCallArguments+=XExpression)*)? ")")? featureCallArguments+=XClosure?;
	public XbaseGrammarAccess.XFeatureCallElements getXFeatureCallAccess() {
		return gaXbase.getXFeatureCallAccess();
	}
	
	public ParserRule getXFeatureCallRule() {
		return getXFeatureCallAccess().getRule();
	}

	//IdOrSuper:
	//	ValidID | "super";
	public XbaseGrammarAccess.IdOrSuperElements getIdOrSuperAccess() {
		return gaXbase.getIdOrSuperAccess();
	}
	
	public ParserRule getIdOrSuperRule() {
		return getIdOrSuperAccess().getRule();
	}

	//// This is a workaround since ANTLR will not be able to resolve
	//// StaticQualifier: ValidID ('::' ValidID)*; and XFeatureCall: (StaticQualifier '::')? ValidID
	//// Make sure to change the value converter if you change the syntax of the StaticQualifier
	//StaticQualifier:
	//	(ValidID "::")+;
	public XbaseGrammarAccess.StaticQualifierElements getStaticQualifierAccess() {
		return gaXbase.getStaticQualifierAccess();
	}
	
	public ParserRule getStaticQualifierRule() {
		return getStaticQualifierAccess().getRule();
	}

	//XConstructorCall returns XExpression:
	//	{XConstructorCall} "new" constructor=[types::JvmConstructor|QualifiedName] ("<"
	//	typeArguments+=JvmArgumentTypeReference ("," typeArguments+=JvmArgumentTypeReference)* ">")? ("("
	//	(arguments+=XShortClosure | arguments+=XExpression ("," arguments+=XExpression)*)? ")")? arguments+=XClosure?;
	public XbaseGrammarAccess.XConstructorCallElements getXConstructorCallAccess() {
		return gaXbase.getXConstructorCallAccess();
	}
	
	public ParserRule getXConstructorCallRule() {
		return getXConstructorCallAccess().getRule();
	}

	//XBooleanLiteral returns XExpression:
	//	{XBooleanLiteral} ("false" | isTrue?="true");
	public XbaseGrammarAccess.XBooleanLiteralElements getXBooleanLiteralAccess() {
		return gaXbase.getXBooleanLiteralAccess();
	}
	
	public ParserRule getXBooleanLiteralRule() {
		return getXBooleanLiteralAccess().getRule();
	}

	//XNullLiteral returns XExpression:
	//	{XNullLiteral} "null";
	public XbaseGrammarAccess.XNullLiteralElements getXNullLiteralAccess() {
		return gaXbase.getXNullLiteralAccess();
	}
	
	public ParserRule getXNullLiteralRule() {
		return getXNullLiteralAccess().getRule();
	}

	//XNumberLiteral returns XExpression:
	//	{XNumberLiteral} value=Number;
	public XbaseGrammarAccess.XNumberLiteralElements getXNumberLiteralAccess() {
		return gaXbase.getXNumberLiteralAccess();
	}
	
	public ParserRule getXNumberLiteralRule() {
		return getXNumberLiteralAccess().getRule();
	}

	//XStringLiteral returns XExpression:
	//	{XStringLiteral} value=STRING;
	public XbaseGrammarAccess.XStringLiteralElements getXStringLiteralAccess() {
		return gaXbase.getXStringLiteralAccess();
	}
	
	public ParserRule getXStringLiteralRule() {
		return getXStringLiteralAccess().getRule();
	}

	//XTypeLiteral returns XExpression:
	//	{XTypeLiteral} "typeof" "(" type=[types::JvmType|QualifiedName] ")";
	public XbaseGrammarAccess.XTypeLiteralElements getXTypeLiteralAccess() {
		return gaXbase.getXTypeLiteralAccess();
	}
	
	public ParserRule getXTypeLiteralRule() {
		return getXTypeLiteralAccess().getRule();
	}

	//XThrowExpression returns XExpression:
	//	{XThrowExpression} "throw" expression=XExpression;
	public XbaseGrammarAccess.XThrowExpressionElements getXThrowExpressionAccess() {
		return gaXbase.getXThrowExpressionAccess();
	}
	
	public ParserRule getXThrowExpressionRule() {
		return getXThrowExpressionAccess().getRule();
	}

	//XReturnExpression returns XExpression:
	//	{XReturnExpression} "return" => expression=XExpression?;
	public XbaseGrammarAccess.XReturnExpressionElements getXReturnExpressionAccess() {
		return gaXbase.getXReturnExpressionAccess();
	}
	
	public ParserRule getXReturnExpressionRule() {
		return getXReturnExpressionAccess().getRule();
	}

	//XTryCatchFinallyExpression returns XExpression:
	//	{XTryCatchFinallyExpression} "try" expression=XExpression (catchClauses+=XCatchClause+ ("finally"
	//	finallyExpression=XExpression)? | "finally" finallyExpression=XExpression);
	public XbaseGrammarAccess.XTryCatchFinallyExpressionElements getXTryCatchFinallyExpressionAccess() {
		return gaXbase.getXTryCatchFinallyExpressionAccess();
	}
	
	public ParserRule getXTryCatchFinallyExpressionRule() {
		return getXTryCatchFinallyExpressionAccess().getRule();
	}

	//XCatchClause:
	//	"catch" "(" declaredParam=FullJvmFormalParameter ")" expression=XExpression;
	public XbaseGrammarAccess.XCatchClauseElements getXCatchClauseAccess() {
		return gaXbase.getXCatchClauseAccess();
	}
	
	public ParserRule getXCatchClauseRule() {
		return getXCatchClauseAccess().getRule();
	}

	//Number hidden():
	//	HEX | (INT | DECIMAL) ("." (INT | DECIMAL))?;
	public XbaseGrammarAccess.NumberElements getNumberAccess() {
		return gaXbase.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//terminal HEX:
	//	("0x" | "0X") ("0".."9" | "a".."f" | "A".."F" | "_")+ ("#" (("b" | "B") ("i" | "I") | ("l" | "L")))?;
	public TerminalRule getHEXRule() {
		return gaXbase.getHEXRule();
	} 

	//terminal DECIMAL:
	//	INT (("e" | "E") ("+" | "-")? INT)? (("b" | "B") ("i" | "I" | "d" | "D") | ("l" | "L" | "d" | "D" | "f" | "F"))?;
	public TerminalRule getDECIMALRule() {
		return gaXbase.getDECIMALRule();
	} 

	//JvmTypeReference:
	//	JvmParameterizedTypeReference => ({JvmGenericArrayTypeReference.componentType=current} "[" "]")* | XFunctionTypeRef;
	public XtypeGrammarAccess.JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return gaXbase.getJvmTypeReferenceAccess();
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//XFunctionTypeRef:
	//	("(" (paramTypes+=JvmTypeReference ("," paramTypes+=JvmTypeReference)*)? ")")? "=>" returnType=JvmTypeReference;
	public XtypeGrammarAccess.XFunctionTypeRefElements getXFunctionTypeRefAccess() {
		return gaXbase.getXFunctionTypeRefAccess();
	}
	
	public ParserRule getXFunctionTypeRefRule() {
		return getXFunctionTypeRefAccess().getRule();
	}

	//JvmParameterizedTypeReference:
	//	type=[JvmType|QualifiedName] ("<" arguments+=JvmArgumentTypeReference ("," arguments+=JvmArgumentTypeReference)*
	//	">")?;
	public XtypeGrammarAccess.JvmParameterizedTypeReferenceElements getJvmParameterizedTypeReferenceAccess() {
		return gaXbase.getJvmParameterizedTypeReferenceAccess();
	}
	
	public ParserRule getJvmParameterizedTypeReferenceRule() {
		return getJvmParameterizedTypeReferenceAccess().getRule();
	}

	//JvmArgumentTypeReference returns JvmTypeReference:
	//	JvmTypeReference | JvmWildcardTypeReference;
	public XtypeGrammarAccess.JvmArgumentTypeReferenceElements getJvmArgumentTypeReferenceAccess() {
		return gaXbase.getJvmArgumentTypeReferenceAccess();
	}
	
	public ParserRule getJvmArgumentTypeReferenceRule() {
		return getJvmArgumentTypeReferenceAccess().getRule();
	}

	//JvmWildcardTypeReference:
	//	{JvmWildcardTypeReference} "?" (constraints+=JvmUpperBound | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmWildcardTypeReferenceElements getJvmWildcardTypeReferenceAccess() {
		return gaXbase.getJvmWildcardTypeReferenceAccess();
	}
	
	public ParserRule getJvmWildcardTypeReferenceRule() {
		return getJvmWildcardTypeReferenceAccess().getRule();
	}

	//JvmUpperBound:
	//	"extends" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundElements getJvmUpperBoundAccess() {
		return gaXbase.getJvmUpperBoundAccess();
	}
	
	public ParserRule getJvmUpperBoundRule() {
		return getJvmUpperBoundAccess().getRule();
	}

	//JvmUpperBoundAnded returns JvmUpperBound:
	//	"&" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmUpperBoundAndedElements getJvmUpperBoundAndedAccess() {
		return gaXbase.getJvmUpperBoundAndedAccess();
	}
	
	public ParserRule getJvmUpperBoundAndedRule() {
		return getJvmUpperBoundAndedAccess().getRule();
	}

	//JvmLowerBound:
	//	"super" typeReference=JvmTypeReference;
	public XtypeGrammarAccess.JvmLowerBoundElements getJvmLowerBoundAccess() {
		return gaXbase.getJvmLowerBoundAccess();
	}
	
	public ParserRule getJvmLowerBoundRule() {
		return getJvmLowerBoundAccess().getRule();
	}

	//JvmTypeParameter:
	//	name=ValidID (constraints+=JvmUpperBound constraints+=JvmUpperBoundAnded* | constraints+=JvmLowerBound)?;
	public XtypeGrammarAccess.JvmTypeParameterElements getJvmTypeParameterAccess() {
		return gaXbase.getJvmTypeParameterAccess();
	}
	
	public ParserRule getJvmTypeParameterRule() {
		return getJvmTypeParameterAccess().getRule();
	}

	//ValidID:
	//	ID;
	public XtypeGrammarAccess.ValidIDElements getValidIDAccess() {
		return gaXbase.getValidIDAccess();
	}
	
	public ParserRule getValidIDRule() {
		return getValidIDAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "$" | "_") ("a".."z" | "A".."Z" | "$" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaXbase.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaXbase.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaXbase.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaXbase.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaXbase.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaXbase.getANY_OTHERRule();
	} 
}
